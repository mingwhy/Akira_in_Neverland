[
  {
    "path": "posts/2022-01-15-technote-rank-aggregation/",
    "title": "TechNote: Rank Aggregation",
    "description": "Rank Aggregation Methods",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2022-01-16",
    "categories": [
      "biostatistics"
    ],
    "contents": "\n\nContents\nOverview\nIntro\nDistribution-based\nRank Aggregation\nR package\nimplementing rank aggregation\nRandomNote\nReferences\n\nOverview\nFigure source: Li, Xue, Xinlei Wang, and\nGuanghua Xiao. “A comparative study of rank aggregation methods for\npartial and top ranked lists in genomic applications.” Briefings in\nbioinformatics 20.1 (2019): 178-189.Intro\nThe first time I came across rank aggregation was from a\npaper titled A\nGene-Coexpression Network for Global Discovery of Conserved Genetic\nModules by Stuart Kim in 2003.\nThis is one of those early papers proposing new analytical tools to\nextract biological information from omics data.\nThis paper caught my attention as it used gene correlations to infer\ngene functions, as gene function knowledge could be\nlearned from three sources: genetic evidence,\nevolutioanry evidence, biochemical evidence (ref: Defining\nfunctional DNA elements in the human genome).\nBy assembling microarray datasets from four species (human, fly,\nworm, yeast), it used ‘recurrently’ highly correlated gene pairs\nconserved across species to infer gene functions.\nSpecifically, it first calculated gene correlations within each\nspecies and assigned a rank to each gene pair. Then for\neach gene pair, there is a ranking vector composed of ranks among\ndatasets.\nHow to determine if a gene pair is significantly highly\ncorrelated across datasets?\nIn the supplementary material, this paper proposed a probabilistic\nmodel.\nIt first transformed a ranking vector into a ranking ratio vector,\ndividing each rank by the total number of gene pairs in a dataset,\n(\\(r_1, r_2, ..., r_n\\)).\nIf each \\(r_s\\) was drawn indepently\nand uniformly, the P-value of the observed ranking ratio vector could be\ncomputed from a joint cumulative distribution of an n-dimensional order\nstatistic: \\(P(r_1,r_2,...,r_n) =\nn!\\int_{0}^{r1}\\int_{s1}^{r2}...\\int_{s_{n-1}}^{r_n}ds_1ds_2...ds_n\\)\nWith this equation, the author used an recursive formula to\nefficiently compute the P-value.\nThis approach looks intuitive and direct, the\nrank aggregation analysis they employed actually entailed\nmore implications.\nDistribution-based Rank\nAggregation\nThen in 2006, a method paper on nature\nbiotechnology generalized this rank aggregation idea\nto be applied in much broader contexts.\nThe problem formulation was as follows: if you have information about\ngene importance from multiple data sources, how to robustly and\nefficiently integrate these information and give a final importance\nscore for each gene.\nThis gene prioritization problem is nicely visualized by\ntheir Figure 1.\nFigure source: Aerts, Stein, et al. “Gene\nprioritization through genomic data fusion.” Nature biotechnology 24.5\n(2006): 537-544.The math formula for calculating probabilites from an N-dimensional\norder statistic are exactly the same as the 2003 paper, but they\ndesigned a more efficient and accurate computation algorithm.\nAlong with this paper, they released a software package\nEndeavour implementing the algorithm, which is a user-friendly\ntool in those “early” bioinformatic world. But now, it’s R or\nPython universe~\nR package implementing\nrank aggregation\nActually, there are several R packages performing rank aggregation\nanalysis, as reviewer in this paper.\nA ‘walk-through’ map can be found at the begining of this post.\nHere I use R package RobustRankAggreg as a show\ncase.\nThis package implements several different algorithms to calculate P\nvalues using the function aggregateRanks\nSuppose you have s set of items, all of them or subset of them were\nseparately ranked from different data sources. After ranking, you got a\ninput list of ranking vectors.\nFor the distribution based method P value,\naggregateRanks(..,method='RRA'...) would give each item a\nScore, which is close to P value but not exact P value.\nRefer to the original publication: \nIn practice, use the number of input list (the number of data\nsources) to obtain the upper bound of P value for each item, then use\n‘BH’ to perform multiple-testing correction.\nR code demo:\n\n\nlibrary(RobustRankAggreg)\ndata(cellCycleKO)\nr = rankMatrix(cellCycleKO$gl, N = cellCycleKO$N)\ndim(r) #item in row, data source in column\n\n\n[1] 2372   12\n\nr[1:3,1:4]\n\n\n                ACE2 CAC2 FKH1         HST3\nYLR286C 0.0001611344    1    1 0.0141798260\nYHR143W 0.0003222688    1    1 0.0225588141\nYFL026W 0.0004834032    1    1 0.0001611344\n\nar = aggregateRanks(rmat = r,method='RRA',full=T)\nhead(ar)\n\n\n           Name        Score\nYJR148W YJR148W 2.326157e-12\nYMR034C YMR034C 5.704013e-10\nYPL016W YPL016W 1.626147e-09\nYKR093W YKR093W 8.819815e-09\nYOR043W YOR043W 2.520095e-07\nYFL026W YFL026W 2.972454e-07\n\ndim(ar) #2372 features ranked by Score or P values\n\n\n[1] 2372    2\n\nar$derive.p.value=ar$Score*nrow(r); #tested list number\nar$adjust.p= p.adjust(ar$derive.p.value,method='BH')\npar(mfrow=c(1,3))\nhist(ar$Score)\nhist(ar$derive.p.value)\nhist(ar$adjust.p)\n\n\n\n\nRandomNote\nThe corresponding author, Stuart Kim of the 2003 Science paper, is\nalso the corresponding author of a Aging research paper Aging\nMice Show a Decreasing Correlation of Gene Expression within Genetic\nModules, leveraging microarray data and employing a network analysis\napproach to study aging from a systems biology perspective.\nThe first author, Stein Aerts of the 2006 nature biotechnology paper,\nis the corresponding author of the first Single-cell\nAging Fly Brain Atlas paper. With machine learning algorithms and\nsingle-cell techniques, his lab is generating new knowledge of fly\nbrains.\nI think their trajectories are pretty illuminating, as simple ideas\nin early careers gradually mature and develop into something huge.\nReferences\nStuart, Joshua M., et al. “A gene-coexpression network for global\ndiscovery of conserved genetic modules.” science 302.5643 (2003):\n249-255.\nAerts, Stein, et al. “Gene prioritization through genomic data\nfusion.” Nature biotechnology 24.5 (2006): 537-544.\nKolde, Raivo, et al. “Robust rank aggregation for gene list\nintegration and meta-analysis.” Bioinformatics 28.4 (2012):\n573-580.\n\n\nsessionInfo()\n\n\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] RobustRankAggreg_1.1\n\nloaded via a namespace (and not attached):\n [1] fansi_1.0.2     digest_0.6.29   R6_2.5.1        jsonlite_1.7.3 \n [5] magrittr_2.0.2  evaluate_0.15   highr_0.9       stringi_1.7.6  \n [9] rlang_1.0.1     cachem_1.0.6    cli_3.2.0       rstudioapi_0.13\n[13] jquerylib_0.1.4 bslib_0.3.1     vctrs_0.3.8     rmarkdown_2.13 \n[17] distill_1.3     tools_4.1.2     stringr_1.4.0   xfun_0.30      \n[21] yaml_2.3.4      fastmap_1.1.0   compiler_4.1.2  memoise_2.0.1  \n[25] htmltools_0.5.2 knitr_1.37      downlit_0.4.0   sass_0.4.0     \n\n\n\n\n",
    "preview": "posts/2022-01-15-technote-rank-aggregation/distill-preview.png",
    "last_modified": "2022-03-26T10:49:30-07:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2022-01-15-mathnote-random-matrix-theory-and-its-applications-in-biology/",
    "title": "MathNote: Random Matrix Theory and its applications in biology",
    "description": "Brief intro of Random Matrix Theory and its applications in biology",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2022-01-15",
    "categories": [
      "matrix"
    ],
    "contents": "\n\nContents\nRandom\nmatrix examples and the Wigner’s semicircle law\nExample 1:\nNormal random symmetric matrix\nExample 2:\nUniform random symmetric matrix\nWigner’s semicircle law\n\nRandom\ncorrelation matrices and the Marc̆henko-Pastur distribution\nExample: IID random\nnormal returns\nApplications\n\nThe Tracy-Widom law\nApplications\n\nNNSD,\nDistribution of Nearest-Neighbor eigenvalue Spacings.\nApplication:\nUse NNSD to threshold a correlation matrix\n\n\nRandom\nmatrix examples and the Wigner’s semicircle law\nExample 1: Normal\nrandom symmetric matrix\nGenerate a 5, 000 × 5, 000 random symmetric matrix with entries Aij\n∼ N(0,1)\nCompute eigenvalues\nDraw the histogram of all eigenvalues.\n\n\nn=5000\nm = array(rnorm(n^2),c(n,n));\nm2 = (m+t(m))/sqrt(2*n); # Make m symmetric\nlambda = eigen(m2, symmetric=T, only.values = T);\nev = lambda$values;\nhist(ev, breaks=seq(-2.01,2.01,0.02),main=NA, xlab=\"Eigenvalues\",freq=F)\n\n\n\n\nExample 2: Uniform\nrandom symmetric matrix\nGenerate a 5,000 x 5,000 random symmetric matrix with entries Aij ∼\nUniform(0, 1)\nCompute eigenvalues\nDraw the histogram of all eigenvalues\n\n\nn = 5000;\nmu = array(runif(n^2),c(n,n))\nmu2 = sqrt(12)*(mu+t(mu)-1)/sqrt(2*n)\nlambdau = eigen(mu2, symmetric=T, only.values = T)\nev = lambdau$values;\nhist(ev, breaks=seq(-2.01,2.01,0.02), main=NA, xlab=\"Eigenvalues\",freq=F)\n\n\n\n\nPattern: the density of eigenvalues is a\nsemicircle!\nWigner’s semicircle law\nsemicircle.lawRandom\ncorrelation matrices and the Marc̆henko-Pastur distribution\nDescribe the eigenvalue distribution of a correlation matrix\nhttps://journals.aps.org/pre/abstract/10.1103/PhysRevE.65.066126\n\nExample: IID random normal\nreturns\n\n\nt = 5000; #5000 time points\nm = 1000; #1000 stocks\nh = array(rnorm(m*t),c(m,t)); # Time series in rows, obs in row, feature in column\ne = h %*% t(h)/t; # Form the correlation matrix\nlambdae = eigen(e, symmetric=T, only.values = T);\nee = lambdae$values;\nhist(ee, breaks =seq(0.01,3.01,.02), \n     #main='Empirical eigenvalue density',\n     main='Empirical eigenvalue density with superimposed Marc ̆henko-Pastur density',\n     xlab='Eigenvalues', freq=F)\n\n# ratio of the matrix dimensions\nQ = t/m\ns=sd(as.numeric(h))\n# boundaries\na=s^2*(1-sqrt(1/Q))^2\nb=s^2*(1+sqrt(1/Q))^2\n# theoretical MP distribution\nMP<-function(x){\n  Q/2/pi/s^2 * ( ((a-x)*(x-b))^0.5 / x )\n}\n#pos=seq(min(ee),max(ee),length=100);\npos=seq(0,3,length=200);\nlines(pos,MP(pos),type='l',col='red',lwd=2)\n\n\n\n\nCompare the empirical eigenvalue density with theoretical\nMarc̆henko-Pastur density with different matrix sizes.\n\n\nMP_size_mt<-function(m,t){\n  #t = 5000; #5000 time points\n  #m = 1000; #1000 stocks\n  h = array(rnorm(m*t),c(m,t)); # Time series in rows, obs in row, feature in column\n  e = h %*% t(h)/t; # Form the correlation matrix\n  lambdae = eigen(e, symmetric=T, only.values = T);\n  ee = lambdae$values;\n  hist(ee, breaks =seq(0.01,3.01,.02), \n       #main='Empirical eigenvalue density',\n       main=paste0(m,'x',t,'\\nEmpirical vs MP'),\n       xlab='Eigenvalues', freq=F)\n  \n  # ratio of the matrix dimensions\n  Q = t/m\n  s=sd(as.numeric(h))\n  # boundaries\n  a=s^2*(1-sqrt(1/Q))^2\n  b=s^2*(1+sqrt(1/Q))^2\n  # theoretical MP distribution\n  MP<-function(x){\n    Q/2/pi/s^2 * ( ((a-x)*(x-b))^0.5 / x )\n  }\n  #pos=seq(min(ee),max(ee),length=100);\n  pos=seq(0,3,length=200);\n  lines(pos,MP(pos),type='l',col='red',lwd=2)\n}\nMP_size_mt(m=1000,t=5000)\n\n\n\nMP_size_mt(m=100,t=500)\n\n\n\nMP_size_mt(m=10,t=50)\n\n\n\n\nMP densities depends on Q = t/m\n\n\nout=list()\ns=1\nfor(Q in c(1,2,5)){\n  # boundaries\n  a=s^2*(1-sqrt(1/Q))^2\n  b=s^2*(1+sqrt(1/Q))^2\n  # theoretical MP distribution\n  MP<-function(x){\n    Q/2/pi/s^2 * ( ((a-x)*(x-b))^0.5 / x )\n  }\n  pos=seq(0,5,length=1000);\n  out[[as.character(Q)]]=MP(pos)\n}\nplot(0,0,xlim=c(0,5),ylim=c(0,1.2),type='n');\ncl=rainbow(3)\nfor(i in 1:length(out)){\n  lines(pos,out[[i]],col=cl[i],type='l',lwd=2)\n}\nlegend(\"topright\", legend = paste('Q',names(out)), col=cl, pch=1) # optional legend\n\n\n\n\nApplications\ndenoise single cell data\nAparicio, Luis, et al. “A random matrix theory approach to denoise\nsingle-cell data.” Patterns 1.3 (2020): 100035. https://rabadan.c2b2.columbia.edu/html/randomly/\n\nselecting the number of components in ICA\nTeschendorff, Andrew E., Joanna Zhuang, and Martin Widschwendter.\n“Independent surrogate variable analysis to deconvolve confounding\nfactors in large-scale microarray profiling studies.” Bioinformatics\n27.11 (2011): 1496-1505.\nWang, Weixu, et al. “Independent component analysis based gene\nco-expression network inference (ICAnet) to decipher functional modules\nfor better single-cell clustering and batch integration.” Nucleic acids\nresearch 49.9 (2021): e54-e54.\n\nThe Tracy-Widom law\nThe distribution of the largest eigenvalue of a random\ncorrelation matrix\nTWApplications\ndetect structure in genetic data\nPatterson, Nick, Alkes L. Price, and David Reich. “Population\nstructure and eigenanalysis.” PLoS genetics 2.12 (2006): e190.\n\nselecting the number of PC components in a PCA analysis\nWang, Lin, Wei Zhang, and Qizhai Li. “AssocTests: an R package for\ngenetic association studies.” Journal of Statistical Software 94.5\n(2020): 1-26.\n\n\n\nAssocTests::tw(eigenvalues = c(5, 3, 1, 0), eigenL = 4, criticalpoint = 2.0234)\n\n\n\n    Tracy-Widom test\n\ndata:  c(5, 3, 1, 0)\nTW1 = -0.82427, TW2 = -0.60186, TW3 = -0.55525, TW4 = NaN\nalternative hypothesis: the eigenvalue is significant\n\n#eigenvalues: a numeric vector whose elements are the eigenvalues of a matrix. The values should be sorted in the descending order.\n#eigenL: the number of eigenvalues.\n#criticalpoint: a numeric value corresponding to the significance level. If the significance level is 0.05, 0.01, 0.005, or 0.001, the criticalpoint should be set to be 0.9793, 2.0234, 2.4224, or 3.2724, accordingly. The default is 2.0234.\n\n\n\nNNSD,\nDistribution of Nearest-Neighbor eigenvalue Spacings.\nthe distribution of the spacing between the eigenvalues\nR package RMThreshold: https://github.com/cran/RMThreshold https://github.com/cran/RMThreshold/blob/master/inst/doc/RMThreshold_Intro.pdf\nnnsdApplication:\nUse NNSD to threshold a correlation matrix\nLuo, Feng, et al. “Constructing gene co-expression networks and\npredicting functions of unknown genes by random matrix theory.” BMC\nbioinformatics 8.1 (2007): 1-17.\nGibson, Scott M., et al. “Massive-scale gene co-expression network\nconstruction and robustness testing using random matrix theory.” PloS\none 8.2 (2013): e55871.\nRMThreshold: Signal-Noise Separation in Random Matrices by using\nEigenvalue Spectrum Analysis, https://cran.r-project.org/web/packages/RMThreshold/index.html\nWang, Haiying, et al. “Integrated metagenomic analysis of the rumen\nmicrobiome of cattle reveals key biological mechanisms associated with\nmethane traits.” Methods 124 (2017): 108-119.\nReferences: - https://www.stats.ox.ac.uk/~cucuring/ Lecture\n4: PCA in high dimensions, random matrix theory and financial\napplications Foundations of Data Science: Algorithms and Mathematical\nFoundations\nPlerou, Vasiliki, et al. “Random matrix approach to cross\ncorrelations in financial data.” Physical Review E 65.6 (2002):\n066126.\n\n\nsessionInfo()\n\n\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nloaded via a namespace (and not attached):\n [1] rstudioapi_0.13     knitr_1.37          cluster_2.1.2      \n [4] magrittr_2.0.2      downlit_0.4.0       R6_2.5.1           \n [7] rlang_1.0.1         fastmap_1.1.0       fansi_1.0.2        \n[10] stringr_1.4.0       highr_0.9           timeSeries_3062.100\n[13] tools_4.1.2         timeDate_3043.102   xfun_0.30          \n[16] cli_3.2.0           jquerylib_0.1.4     htmltools_0.5.2    \n[19] yaml_2.3.4          digest_0.6.29       sass_0.4.0         \n[22] vctrs_0.3.8         distill_1.3         memoise_2.0.1      \n[25] cachem_1.0.6        evaluate_0.15       rmarkdown_2.13     \n[28] fGarch_3042.83.2    stringi_1.7.6       compiler_4.1.2     \n[31] bslib_0.3.1         fBasics_3042.89.1   fExtremes_3042.82  \n[34] AssocTests_1.0-1    spatial_7.3-14      combinat_0.0-8     \n[37] mvtnorm_1.1-3       jsonlite_1.7.3     \n\n\n\n\n",
    "preview": "posts/2022-01-15-mathnote-random-matrix-theory-and-its-applications-in-biology/distill-preview.png",
    "last_modified": "2022-03-28T19:34:43-07:00",
    "input_file": "mathnote-random-matrix-theory-and-its-applications-in-biology.knit.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2022-01-14-technote-thresholding-a-correlation-matrix/",
    "title": "TechNote: Thresholding a correlation matrix",
    "description": "Some R packages help guide the selection of the threshold transforming a weighted correlation matrix into a binary one",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2022-01-12",
    "categories": [],
    "contents": "\n\nContents\nR package COGENT assessing internal consistency\nR package RMThreshold based on Random Matrix Theory\n\nR package COGENT assessing internal consistency\nsource code: https://github.com/lbozhilova/COGENT\nBozhilova, Lyuba V., et al. “COGENT: evaluating the consistency of gene co-expression networks.” Bioinformatics 37.13 (2021): 1928-1929.\n\n\nlibrary(COGENT)\nlibrary(ggplot2)\nset.seed(101019)\n\nsplitData <- function(df, colIdx,propShared=0.5){\n  sampleCount <- ncol(df)\n  #colIdx <- sample.int(sampleCount)\n  sharedSampleCount <- round(propShared*sampleCount)\n  sharedColsIdx <- 1:sharedSampleCount\n  specificSampleCount <- floor(0.5*(sampleCount-sharedSampleCount))\n  \n  s1=sharedSampleCount+1;\n  e1=sharedSampleCount+1+specificSampleCount;\n  s2=e1+1;\n  e2=min(s2+specificSampleCount,sampleCount);\n  df1 <- df[,colIdx[c(sharedColsIdx, s1:e1) ]]\n  df2 <- df[,colIdx[c(sharedColsIdx, s2:e2)]]\n  dfList <- list(df1, df2)\n  return(dfList)\n}\nn.rep=10;\nmat.count=matrix(runif(100*50),nrow=100)\nsplitData.mat=replicate(n.rep,sample.int(ncol(mat.count)))\ndim(splitData.mat) #50 sample X 10 random shuffling\n\n\n[1] 50 10\n\nmat.out=list();\nfor(i in 1:n.rep){\n  colIdx=splitData.mat[,i];\n  dat=splitData(mat.count, colIdx,propShared=0.5)\n  p1=coop::pcor(t(dat[[1]]))\n  p2=coop::pcor(t(dat[[2]]))\n  mat.out[[i]]=list(p1,p2)\n}\n\nthresholds<- c(0.7,0.9,0.95,0.99,0.995)\nresult=list()\nfor(rep in 1:length(mat.out)){\n  abs.mat.out=lapply(mat.out[[rep]],abs)\n  sapply(abs.mat.out,dim)\n  out=sapply(thresholds,function(th){\n    As=lapply(abs.mat.out,function(A){\n      threshold <- quantile(A[upper.tri(A)], th, na.rm=TRUE)\n      A <- 1*(A>=threshold); diag(A) <- 0; \n      A[is.na(A)]=0\n      A\n    });\n    return(getEdgeSimilarityCorrected(As,type=\"expected\")$correctedSimilarity)\n  })\n  result[[rep]]=out\n}\ndf=Reduce(`rbind`,result) \ncolnames(df)=as.character(thresholds)\nrownames(df)=paste('rep',1:nrow(df))\ndf2=reshape2::melt(df)\ncolnames(df2)=c('rep','th','value')\nggplot(df2,aes(x=1-th,y=value,group=rep))+geom_point()+\n  geom_smooth()+\n  scale_y_continuous(\"Signal to noise score\") +\n  theme_classic()+\n  scale_x_log10(\"Threshold cutoff\", breaks=1-df2$th)\n\n\n\n\nR package RMThreshold based on Random Matrix Theory\nR package RMThreshold manual: http://matstat.org/content_en/RMT/RMThreshold_Intro.pdf\nLuo, Feng, et al. “Constructing gene co-expression networks and predicting functions of unknown genes by random matrix theory.” BMC bioinformatics 8.1 (2007): 1-17.\nGibson, Scott M., et al. “Massive-scale gene co-expression network construction and robustness testing using random matrix theory.” PloS one 8.2 (2013): e55871.\n\n\n#http://matstat.org/content_en/RMT/RMThreshold_Intro.pdf\nlibrary(RMThreshold)\n\n# check if a matrix is well-conditioned for the RMT-based algorithm\n## function: rm.matrix.validation\n## eg1\nset.seed(777)\nrandom.mat <- create.rand.mat(size = 1000, distrib = \"norm\")$rand.matr\n\n\n\n  Required distribution of matrix elements: norm \n  The mean of the main diagonal is 0.1006 \n  The std. deviation of the main diagonal is 1.394 \n  The mean of the upper triangle is 0.0008975 \n  The std. deviation of the upper triangle is 1.001 \n  The matrix is real and symmetric.\n\ndim(random.mat) #1000 by 1000 symmetric matrix\n\n\n[1] 1000 1000\n\nisSymmetric(random.mat)\n\n\n[1] TRUE\n\nres <- rm.matrix.validation(random.mat)\n\n\n\n  1000 times 1000 matrix read.\n\n  Unfolding: gaussian \n  Bandwidth: nrd0 \n  Number of non-zero matrix elements: 1000000 ( 100 % )\n  Sparseness: 0 \n  Rank: 1000 \n  Validation plot saved to: matrix.validation.plot.png \n  Unfolding plot saved to: fit.unfold.png \n\nstr(res)\n\n\nList of 5\n $ sparseness         : num 0\n $ rank               : int 1000\n $ validation.plot    : chr \"matrix.validation.plot.png\"\n $ unfold.plot        : chr \"fit.unfold.png\"\n $ nr.outliers.removed: int 0\n\nimg\n\n## eg2\nlibrary(igraph); library(Matrix)\ng <- erdos.renyi.game(1000, 0.1)\nimage(as.matrix(get.adjacency(g)))\nrm.matrix.validation(as.matrix(get.adjacency(g)))\n\n## eg3\nmatlist = list()\nfor (i in 1:4) matlist[[i]] = get.adjacency(erdos.renyi.game(250, 0.1))\nmat <- bdiag(matlist)\ndim(mat)\nimage(mat)\nrm.matrix.validation(as.matrix(mat))\n\n# Finding a candidate signal-noise separating threshold for the matrix\n## function: rm.get.threshold\nset.seed(777)\nrandom.mat <- create.rand.mat(size = 1000, distrib = \"norm\")$rand.matr\nres <- rm.get.threshold(random.mat)\nstr(res)\n\n## \nmatlist = list()\nset.seed(979)\nfor (i in 1:4) matlist[[i]] = get.adjacency(erdos.renyi.game(250, 0.1))\nmat <- bdiag(matlist)\ndim(mat) #1000 by 1000\nrm.matrix.validation(as.matrix(mat))\n\nm <- mat != 0\ng <- graph.adjacency(m, mode = \"undirected\")\nclusters(g) # 4 clusters of size 250, as expected\n\nset.seed(979)\nmat1 = add.Gaussian.noise(as.matrix(mat), mean = 0, stddev = 0.1)\nrm.matrix.validation(mat1)\nm1 <- mat1 != 0\ng1 <- graph.adjacency(m1, mode = \"undirected\")\nclusters(g1) # a single big cluster with 1000 nodes\n\nres <- rm.get.threshold(mat1) # noisy matrix as input\nres\n\n# running the main algorithm on a smaller interval of thresholds\nres <- rm.get.threshold(random.mat, interval = c(2.5, 3.5))\ncleaned <- rm.denoise.mat(mat1, 0.6)\nmatr <- cleaned != 0\ng <- graph.adjacency(matr, mode = \"undirected\")\nclusters(g) # 4 clusters reconstructed !\n\n# Applying the identified threshold to the matrix\n## rm.denoise.mat\ncleaned.matrix <- rm.denoise.mat(random.mat, threshold = 3.2)\ncleaned.matrix <- rm.discard.zeros(cleaned.matrix)\ndim(cleaned.matrix)\nm3 <- cleaned.matrix != 0\ng3 <- graph.adjacency(m3, mode = \"undirected\")\nclusters(g3)\n\n\n\n\n\nsessionInfo()\n\n\nR version 4.1.0 (2021-05-18)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Mojave 10.14.5\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] RMThreshold_1.1 ggplot2_3.3.5   COGENT_0.1.1   \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.1.1  xfun_0.24         bslib_0.2.5.1    \n [4] purrr_0.3.4       reshape2_1.4.4    splines_4.1.0    \n [7] lattice_0.20-44   colorspace_2.0-2  vctrs_0.3.8      \n[10] generics_0.1.0    htmltools_0.5.1.1 yaml_2.2.1       \n[13] mgcv_1.8-36       utf8_1.2.2        rlang_0.4.11     \n[16] jquerylib_0.1.4   pillar_1.6.2      glue_1.4.2       \n[19] withr_2.4.2       DBI_1.1.1         lifecycle_1.0.0  \n[22] plyr_1.8.6        stringr_1.4.0     munsell_0.5.0    \n[25] gtable_0.3.0      memoise_2.0.0     evaluate_0.14    \n[28] labeling_0.4.2    knitr_1.33        fastmap_1.1.0    \n[31] parallel_4.1.0    fansi_0.5.0       highr_0.9        \n[34] Rcpp_1.0.7        scales_1.1.1      cachem_1.0.5     \n[37] jsonlite_1.7.2    farver_2.1.0      distill_1.3      \n[40] digest_0.6.27     stringi_1.7.3     dplyr_1.0.7      \n[43] coop_0.6-3        grid_4.1.0        tools_4.1.0      \n[46] magrittr_2.0.1    sass_0.4.0        tibble_3.1.3     \n[49] crayon_1.4.1      pkgconfig_2.0.3   downlit_0.4.0    \n[52] ellipsis_0.3.2    Matrix_1.3-3      assertthat_0.2.1 \n[55] rmarkdown_2.11    R6_2.5.0          igraph_1.2.6     \n[58] nlme_3.1-152      compiler_4.1.0   \n\n\n\n\n",
    "preview": "posts/2022-01-14-technote-thresholding-a-correlation-matrix/distill-preview.png",
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2022-01-03-survivalanalysis/",
    "title": "SurvivalAnalysis: From life table to survival curves",
    "description": "Hands on Survival Analysis",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2022-01-02",
    "categories": [],
    "contents": "\n\nContents\nData organizationDlife data structure explained\n\nKaplan Meier AnalysisReformat data for survival R package input\n\nParametric Survival AnalysisExponential model\nWeibull model\nCox proportional hazards model\nGompertz model\nplot fitting curves\n\n\nData organization\nDlife data structure explained\nDlife is a software for lifespan experiment.\nCensensus is performed every other day.\nsetup: vial ID, #total.fly per vial\nevery censunsus, record: #time, #deaths, #carried, #censored\nThe example dataset below contain lifespan data from 16 vials of 2 genotypes.\n\n\nlibrary(ggplot2);library(data.table)\nx<-readxl::read_xlsx(\"Tau_lifespan_Aug_19_2021.xlsx\",sheet='RawData') #DL=DLife, this data contain 48 vial lifespan data\ntable(x$Chamber,x$UniqueName)\n\n\n    \n     ON4R w1118\n  1     0    43\n  2    43     0\n  3     0    43\n  4    43     0\n  5     0    43\n  6    43     0\n  7     0    43\n  8    43     0\n  9     0    43\n  10   43     0\n  11    0    43\n  12   43     0\n  13    0    43\n  14   43     0\n  15    0    43\n  16   43     0\n\nx=as.data.table(x)\n\nDL=x[x$Chamber==1,] #select vial 1 as an example\nhead(DL)\n\n\n            CensusTime     AgeH Chamber Collective UniqueName\n                <POSc>    <num>   <num>      <num>     <char>\n1: 2021-08-17 14:04:39   1.0000       1          1      w1118\n2: 2021-08-17 16:04:39   3.0000       1          1      w1118\n3: 2021-08-25 11:26:43 190.3678       1          1      w1118\n4: 2021-08-27 11:51:00 238.7725       1          1      w1118\n5: 2021-08-29 12:48:01 287.7228       1          1      w1118\n6: 2021-08-31 14:24:58 337.3386       1          1      w1118\n   Transfer Deaths Carried Censored IntDeaths Flag1 Flag2     N\n     <char>  <num>   <num>    <num>     <num> <num> <num> <num>\n1:        Y      0       0        0         0     0     0    23\n2:        Y      0       0        0         0     0     0    23\n3:        Y      0       0        0         0     0     0    23\n4:        Y      0       0        0         0     0     0    23\n5:        Y      0       0        0         0     0     0    23\n6:        Y      0       0        0         0     0     0    23\n\nDL[AgeH==1,]$N #Total number of flies in the experiment \n\n\n[1] 23\n\n# select informative rows where events happen\nInfoDL<-DL[(Deaths>0|Censored>0 | IntDeaths>0), .(AgeH, Chamber, UniqueName, Deaths, Carried, Censored, IntDeaths, N)]\n\n# assmue t1: previous time\n#        t2: current time\n# IntDeath.t2 = Deaths.t2 + Carried.t2 - Carried.t1\n# N.t2 = N.t1 - Censored.t2 - IntDeath.t2\nplot(InfoDL$AgeH,InfoDL$N,type='l',xlab='Time in hr',ylab='#fly')\n\n\n\n\nKaplan Meier Analysis\nUseful link: http://www.sthda.com/english/wiki/survival-analysis-basics\nReformat data for survival R package input\n\n\nlibrary(survival)\n\n## Convert DLife data to the format usable by the survival package. \n# survival package require each death correspond to one row\n# input to survival package:\n# event happening time point, which event (death or census)\nDL<-readxl::read_xlsx(\"Tau_lifespan_Aug_19_2021.xlsx\",sheet='RawData') #DL=DLife, this data contain 48 vial lifespan data\nDL=as.data.table(DL)\nmin(DL$AgeH)\n\n\n[1] 1\n\nDL[AgeH==min(DL$AgeH), sum(N)] #Total number of flies in the experiment \n\n\n[1] 384\n\n# select informative rows where events happen\nInfoDL<-DL[(Censored>0 | IntDeaths>0), .(AgeH, Chamber, UniqueName, Deaths, Carried, Censored, IntDeaths, N)]\n# select non-redundant columns used in survival analysis\neDL<-InfoDL[, .(AgeH, Chamber, UniqueName, Censored, IntDeaths)]\ndim(eDL) #181 rows\n\n\n[1] 181   5\n\nlibrary(splitstackshape) \nsum(eDL$IntDeaths) #360\n\n\n[1] 360\n\nDeaths<-expandRows(eDL[,.(AgeH, Chamber, UniqueName, IntDeaths)], \"IntDeaths\")\ndim(Deaths) #360\n\n\n[1] 360   3\n\nDeaths$Deaths<-1 #Assign value 1 to each expanded row\nDeaths$Censored<-0 #Assign value 0 to each expanded row\n\nsum(eDL$Censored) #24\n\n\n[1] 24\n\nCensored<-expandRows(eDL[,.(AgeH, Chamber, UniqueName, Censored)], \"Censored\")\ndim(Censored) #24\n\n\n[1] 24  3\n\nCensored$Censored<-1\nCensored$Deaths<-0\n\ntemp<-rbind(Deaths, Censored) #temp$Deaths is equivalent to event in the survival object, as all deaths are 1 and all censored are 0\nData<-temp[,Genotype:=UniqueName]\nData$AgeD<-(Data$AgeH)/24 #hours into days\n\n#write.table(Data, \"Surv_input.txt\", sep=\"\\t\", quote=F, row.names=F)\n\n## survfit\nfit<-survfit(Surv(AgeD,Deaths)~Genotype, data=Data)\nsummary(fit)$table\n\n\n               records n.max n.start events   *rmean *se(rmean)\nGenotype=ON4R      197   197     197    183 79.60518  0.7541617\nGenotype=w1118     187   187     187    177 75.15569  0.6935623\n                 median  0.95LCL  0.95UCL\nGenotype=ON4R  82.82050 81.21878 84.82243\nGenotype=w1118 79.08146 76.89359 79.08146\n\n##Survival estimates at an early age\nhead(fit$time)\n\n\n[1] 23.96395 31.01424 37.08931 41.96478 43.95338 50.17742\n\nSurvTo40<-summary(fit, times=40)$surv\nSurvTo40\n\n\n[1] 0.9847716 0.9946524\n\nndeath<-summary(fit)$table[,4]\nrmean<-summary(fit)$table[,5]\nse<-summary(fit)$table[,6]\nmedian<-summary(fit)$table[,7]\nSummaryStats<-data.table(Genotype=levels(as.factor(Data$Genotype)),NDeath=ndeath,Mean=rmean,Se=se,Median=median)\n#write.table(SummaryStats, \"Surv_LifeSpan_Summary\", row.names=F, sep=\"\\t\", quote=F)\n\n\n# visualizae fitting curves https://cran.r-project.org/web/packages/ggfortify/vignettes/plot_surv.html\nlibrary(ggfortify)\nautoplot(fit)\n\n\n\n# log-rank test\n#https://zhuanlan.zhihu.com/p/138280210\nsurv_diff <- survdiff(Surv(AgeD, Deaths) ~ Genotype, data = Data)\nsurv_diff\n\n\nCall:\nsurvdiff(formula = Surv(AgeD, Deaths) ~ Genotype, data = Data)\n\n                 N Observed Expected (O-E)^2/E (O-E)^2/V\nGenotype=ON4R  197      183      239      13.2      51.9\nGenotype=w1118 187      177      121      26.1      51.9\n\n Chisq= 51.9  on 1 degrees of freedom, p= 6e-13 \n\nParametric Survival Analysis\nExponential model\n\n\nres.exp <- survreg(Surv(AgeD, Deaths) ~ Genotype, data = Data, dist = \"exponential\")\nsummary(res.exp)\n\n\n\nCall:\nsurvreg(formula = Surv(AgeD, Deaths) ~ Genotype, data = Data, \n    dist = \"exponential\")\n                Value Std. Error    z      p\n(Intercept)    4.4421     0.0739 60.1 <2e-16\nGenotypew1118 -0.0741     0.1054 -0.7   0.48\n\nScale fixed at 1 \n\nExponential distribution\nLoglik(model)= -1946   Loglik(intercept only)= -1946.3\n    Chisq= 0.49 on 1 degrees of freedom, p= 0.48 \nNumber of Newton-Raphson Iterations: 3 \nn= 384 \n\nWeibull model\n\n\nres.weibull <- survreg(Surv(AgeD, Deaths) ~ Genotype, data = Data, dist = c(\"weibull\", \"exponential\", \"gaussian\", \"logistic\", \n    \"lognormal\", \"loglogistic\")[1])\nsummary(res.weibull)\n\n\n\nCall:\nsurvreg(formula = Surv(AgeD, Deaths) ~ Genotype, data = Data, \n    dist = c(\"weibull\", \"exponential\", \"gaussian\", \"logistic\", \n        \"lognormal\", \"loglogistic\")[1])\n                 Value Std. Error      z       p\n(Intercept)    4.42498    0.00664 666.32 < 2e-16\nGenotypew1118 -0.05837    0.00936  -6.23 4.6e-10\nLog(scale)    -2.42127    0.04453 -54.37 < 2e-16\n\nScale= 0.0888 \n\nWeibull distribution\nLoglik(model)= -1309.8   Loglik(intercept only)= -1327.7\n    Chisq= 35.81 on 1 degrees of freedom, p= 2.2e-09 \nNumber of Newton-Raphson Iterations: 7 \nn= 384 \n\nCox proportional hazards model\n\n\n# genotype as fixed effect\nfit.fixed<-coxph(Surv(AgeD,Deaths)~Genotype, data=Data)\nsummary(fit.fixed)\n\n\nCall:\ncoxph(formula = Surv(AgeD, Deaths) ~ Genotype, data = Data)\n\n  n= 384, number of events= 360 \n\n                coef exp(coef) se(coef)     z Pr(>|z|)    \nGenotypew1118 0.8501    2.3399   0.1155 7.361 1.82e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n              exp(coef) exp(-coef) lower .95 upper .95\nGenotypew1118      2.34     0.4274     1.866     2.934\n\nConcordance= 0.595  (se = 0.015 )\nLikelihood ratio test= 54.08  on 1 df,   p=2e-13\nWald test            = 54.18  on 1 df,   p=2e-13\nScore (logrank) test = 56.77  on 1 df,   p=5e-14\n\n# genotype as random effect\nlibrary(coxme)\nfit.random1<-coxme(Surv(AgeD,Deaths)~(1|Genotype), data=Data)\nfit.random1\n\n\nCox mixed-effects model fit by maximum likelihood\n  Data: Data\n  events, n = 360, 384\n  Iterations= 5 23 \n                    NULL Integrated    Fitted\nLog-likelihood -1792.535  -1767.993 -1765.505\n\n                  Chisq   df          p   AIC   BIC\nIntegrated loglik 49.09 1.00 2.4506e-12 47.09 43.20\n Penalized loglik 54.06 0.98 1.8519e-13 52.10 48.28\n\nModel:  Surv(AgeD, Deaths) ~ (1 | Genotype) \n\nRandom effects\n Group    Variable  Std Dev   Variance \n Genotype Intercept 0.5992301 0.3590767\n\nfit.random2<-coxme(Surv(AgeD,Deaths)~(1|Chamber), data=Data)\nfit.random2\n\n\nCox mixed-effects model fit by maximum likelihood\n  Data: Data\n  events, n = 360, 384\n  Iterations= 8 36 \n                    NULL Integrated    Fitted\nLog-likelihood -1792.535  -1773.514 -1753.343\n\n                  Chisq    df          p   AIC   BIC\nIntegrated loglik 38.04  1.00 6.9181e-10 36.04 32.16\n Penalized loglik 78.38 12.62 1.5416e-11 53.14  4.10\n\nModel:  Surv(AgeD, Deaths) ~ (1 | Chamber) \n\nRandom effects\n Group   Variable  Std Dev   Variance \n Chamber Intercept 0.4940680 0.2441032\n\nfit.nested<-coxme(Surv(AgeD,Deaths)~Genotype+(1|Chamber), data=Data)\nfit.nested\n\n\nCox mixed-effects model fit by maximum likelihood\n  Data: Data\n  events, n = 360, 384\n  Iterations= 15 63 \n                    NULL Integrated    Fitted\nLog-likelihood -1792.535  -1764.189 -1756.415\n\n                  Chisq   df          p   AIC   BIC\nIntegrated loglik 56.69 2.00 4.8905e-13 52.69 44.92\n Penalized loglik 72.24 7.26 7.2320e-13 57.71 29.48\n\nModel:  Surv(AgeD, Deaths) ~ Genotype + (1 | Chamber) \nFixed coefficients\n                  coef exp(coef)  se(coef)    z       p\nGenotypew1118 0.877299  2.404397 0.1509112 5.81 6.1e-09\n\nRandom effects\n Group   Variable  Std Dev    Variance  \n Chamber Intercept 0.19180284 0.03678833\n\nres.cox <- coxph(Surv(AgeD, Deaths) ~ Genotype, data = Data)\nsummary(res.cox)\n\n\nCall:\ncoxph(formula = Surv(AgeD, Deaths) ~ Genotype, data = Data)\n\n  n= 384, number of events= 360 \n\n                coef exp(coef) se(coef)     z Pr(>|z|)    \nGenotypew1118 0.8501    2.3399   0.1155 7.361 1.82e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n              exp(coef) exp(-coef) lower .95 upper .95\nGenotypew1118      2.34     0.4274     1.866     2.934\n\nConcordance= 0.595  (se = 0.015 )\nLikelihood ratio test= 54.08  on 1 df,   p=2e-13\nWald test            = 54.18  on 1 df,   p=2e-13\nScore (logrank) test = 56.77  on 1 df,   p=5e-14\n\nGompertz model\n\n\n# use library(flexsurv) for fitting gompertz and estimating parameters\nlibrary(flexsurv)\n# one sample\nunique(Data$Genotype)\n\n\n[1] \"ON4R\"  \"w1118\"\n\nsubData<-Data[Genotype==\"w1118\"]\nfs1<-flexsurvreg(Surv(AgeD,Deaths)~1, data=subData, dist=\"gompertz\")\nfs1$coefficients\n\n\n     shape       rate \n  0.155868 -14.189923 \n\n# prepare a matrix for storing fitting Gompertz results\nGompertz<-matrix(NA, nrow=length(levels(as.factor(Data$Genotype))), ncol=2)\nrownames(Gompertz)<-levels(as.factor(Data$Genotype))\ncolnames(Gompertz)<-c(\"shape\",\"rate\")\n\nfor (i in 1:length(levels(as.factor(Data$Genotype)))) {\n  subData<-Data[Genotype==levels(as.factor(Data$Genotype))[i]]\n  fs<-flexsurvreg(Surv(AgeD,Deaths)~1, data=subData, dist=\"gompertz\")\n  Gompertz[i,]<-fs$coefficients ##Extract alpha (\"rate\") and beta (\"shape\") from the model fit\n}\n\nGompertz #every genotype has a shape and a rate estimated values\n\n\n          shape      rate\nON4R  0.1488948 -14.38919\nw1118 0.1558680 -14.18992\n\nres.gompertz <- flexsurvreg(Surv(AgeD, Deaths) ~ Genotype, data = Data, dist = c(\"gompertz\"))\nres.gompertz\n\n\nCall:\nflexsurvreg(formula = Surv(AgeD, Deaths) ~ Genotype, data = Data, \n    dist = c(\"gompertz\"))\n\nEstimates: \n               data mean  est       L95%      U95%      se      \nshape                NA   1.52e-01  1.39e-01  1.65e-01  6.62e-03\nrate                 NA   4.31e-07  1.52e-07  1.22e-06  2.28e-07\nGenotypew1118  4.87e-01   7.35e-01  5.20e-01  9.51e-01  1.10e-01\n               exp(est)  L95%      U95%    \nshape                NA        NA        NA\nrate                 NA        NA        NA\nGenotypew1118  2.09e+00  1.68e+00  2.59e+00\n\nN = 384,  Events: 360,  Censored: 24\nTotal time at risk: 29509.92\nLog-likelihood = -1287.661, df = 3\nAIC = 2581.322\n\nplot fitting curves\n\n\n#http://www.stat.columbia.edu/~madigan/W2025/notes/survival.pdf\n## Define a function to plot survreg prediction by gender\nsurvreg.curves <- function(model, col = \"black\", values = c(\"ON4R\",\"w1118\"),seq.quantiles = seq(0.00, 1.00, 0.01)) {\n  \n  plyr::l_ply(values, function(X) {\n    if(X=='tau'){type=1}else{type=2}\n    lines(x = predict(model,                    # survreg object to use\n                      newdata=data.frame(Genotype = X), # Dataset to perform prediction for\n                      type = \"quantile\",                # Predict survival time (X-axis values) given event quantile\n                      p = seq.quantiles),               # Vector of quantiles (Y-axis values)\n          y = (1 - seq.quantiles),              # Change to survival quantile (proportion remaining)\n          col = col, lty = type)               # COLor and Line TYpe\n  })\n}\n\n## plot KM curves\npar(lwd = 2)\nplot(fit, lty = 1:2, conf.int = F, , main = \"nsyb, male\", xlab = \"Days\", ylab = \"Survival\")\nlegend(\"topright\", c(\"ON4R\", \"w1118\"), lty = 1:2)\n## plot Cox prediction\nlines(survfit(res.cox, newdata = data.frame(Genotype = c(\"ON4R\", \"w1118\"))), col = \"green\", lty = 1:2, mark.time = FALSE)\n## Plot exponential model prediction\nsurvreg.curves(res.exp, \"purple\")\n## Plot Weibull model prediction\nsurvreg.curves(res.weibull, \"blue\")\n\n## Plot Gompertz model prediction\nout = summary(res.gompertz)\nlines(out$`Genotype=w1118`[, 1], out$`Genotype=w1118`[, 2], col = \"red\", lty = 2)\nlines(out$`Genotype=ON4R`[, 1], out$`Genotype=ON4R`[, 2], col = \"red\", lty = 1)\n\nres.gompertz$res\n\n\n                       est         L95%         U95%           se\nshape         1.522862e-01 1.393077e-01 1.652648e-01 6.621819e-03\nrate          4.307675e-07 1.523110e-07 1.218301e-06 2.284965e-07\nGenotypew1118 7.351499e-01 5.195817e-01 9.507180e-01 1.099858e-01\n\n## Add legends\nlegend(x = \"bottomleft\", legend = c(\"Kaplan-Meier\", \"Cox\", \"Exponential\", \"Weibull\", \"Gompertz\"), lwd = 2, bty = \"n\", col = c(\"black\", \n    \"green\", \"purple\", \"blue\", \"red\"))\n\n\n\n\nMore abnout Gompertz distribution\n * The Gompertz distribution with shape parameter a and rate parameter b has + PDF, probability density function: f(x|a,b) = b exp(ax) exp(-b/a (exp(ax) - 1))\n+ hazard function: h(x|a,b) = b exp(ax)\n+ CDF: F(x|a,b) = 1 - exp( -b/a (exp(at)-1))\n+ mortality function m(t), log of h(t): m(t) = log(b) + a*x\nb: rate  a: shape\nFit Tau and Control flies separately and get the coeff estimates\n\n\n## Gompertz model\ncontrol=subset(Data,Genotype=='w1118')\nres.gompertz1 <- flexsurvreg(Surv(AgeD,Deaths)~1,data=control,\n                                dist= c(\"gompertz\"))\nres.gompertz1\n\n\nCall:\nflexsurvreg(formula = Surv(AgeD, Deaths) ~ 1, data = control, \n    dist = c(\"gompertz\"))\n\nEstimates: \n       est       L95%      U95%      se      \nshape  1.56e-01  1.37e-01  1.75e-01  9.60e-03\nrate   6.88e-07  1.67e-07  2.83e-06  4.97e-07\n\nN = 187,  Events: 177,  Censored: 10\nTotal time at risk: 13962.98\nLog-likelihood = -625.5946, df = 2\nAIC = 1255.189\n\ntau=subset(Data,Genotype=='ON4R')\nres.gompertz2 <- flexsurvreg(Surv(AgeD,Deaths)~1,data=tau,\n                                dist= c(\"gompertz\"))\nres.gompertz2\n\n\nCall:\nflexsurvreg(formula = Surv(AgeD, Deaths) ~ 1, data = tau, dist = c(\"gompertz\"))\n\nEstimates: \n       est       L95%      U95%      se      \nshape  1.49e-01  1.31e-01  1.67e-01  9.14e-03\nrate   5.63e-07  1.36e-07  2.34e-06  4.09e-07\n\nN = 197,  Events: 183,  Censored: 14\nTotal time at risk: 15546.94\nLog-likelihood = -661.9273, df = 2\nAIC = 1327.855\n\na=res.gompertz1$res[1];\nb=res.gompertz1$res[2];\n\nt=seq(1,100,1);\ny=1-exp(-b/a*(exp(a*t)-1)) #F(t)\nplot(t,1-y,xlab=\"time\",ylab=\"survival\",col=\"blue\",ylim=c(0,1))\n\na=res.gompertz2$res[1]; #shape <=> slope for motality func\nb=res.gompertz2$res[2]; #rate <=> log(rate)=intercept for motality func\n\nt=seq(1,100,1);\ny=1-exp(-b/a*(exp(a*t)-1)) #S(t)\npoints(t,1-y,col=\"red\")\nlegend(x = \"bottomleft\",\n           legend = c(\"w1118\",\"Tau\"),\n           lwd = 2, bty = \"n\",\n           col = c(\"blue\",\"red\"))\n\n\n\nplot(x=-20:20,y=-20:20,type=\"n\",ylab=\"mortality (log of h(t))\")\nabline(a=res.gompertz1$res.t[2,1],b=res.gompertz1$res.t[1,1],col=\"blue\") #a=intercept;b=slope\nabline(a=res.gompertz2$res.t[2,1],b=res.gompertz2$res.t[1,1],col=\"red\")\n\n\n\nplot(x=0:100,y=-50:50,type=\"n\",ylab=\"mortality (log of h(t))\")\nabline(a=res.gompertz1$res.t[2,1],b=res.gompertz1$res.t[1,1],col=\"blue\") #a=intercept;b=slope\nabline(a=res.gompertz2$res.t[2,1],b=res.gompertz2$res.t[1,1],col=\"red\")\n\n\n\nx=data.frame(rbind(res.gompertz1$res.t[,1],res.gompertz2$res.t[,1]));\ncolnames(x)=c(\"slope\",'intercept');\nrownames(x)=c(\"w1118\",\"tau\");\nx\n\n\n          slope intercept\nw1118 0.1558680 -14.18992\ntau   0.1488948 -14.38919\n\n\n\ndevtools::session_info()\n\n\n─ Session info ─────────────────────────────────────────────────────\n setting  value                       \n version  R version 4.1.0 (2021-05-18)\n os       macOS Mojave 10.14.5        \n system   x86_64, darwin17.0          \n ui       X11                         \n language (EN)                        \n collate  en_US.UTF-8                 \n ctype    en_US.UTF-8                 \n tz       America/Los_Angeles         \n date     2022-01-03                  \n\n─ Packages ─────────────────────────────────────────────────────────\n package         * version    date       lib source        \n assertthat        0.2.1      2019-03-21 [1] CRAN (R 4.1.0)\n bdsmatrix       * 1.3-4      2020-01-13 [1] CRAN (R 4.1.0)\n bslib             0.2.5.1    2021-05-18 [1] CRAN (R 4.1.0)\n cachem            1.0.5      2021-05-15 [1] CRAN (R 4.1.0)\n callr             3.7.0      2021-04-20 [1] CRAN (R 4.1.0)\n cellranger        1.1.0      2016-07-27 [1] CRAN (R 4.1.0)\n cli               3.0.1      2021-07-17 [1] CRAN (R 4.1.0)\n colorspace        2.0-2      2021-06-24 [1] CRAN (R 4.1.0)\n coxme           * 2.2-16     2020-01-14 [1] CRAN (R 4.1.0)\n crayon            1.4.1      2021-02-08 [1] CRAN (R 4.1.0)\n data.table      * 1.14.3     2021-12-17 [1] local         \n DBI               1.1.1      2021-01-15 [1] CRAN (R 4.1.0)\n desc              1.3.0      2021-03-05 [1] CRAN (R 4.1.0)\n deSolve           1.30       2021-10-07 [1] CRAN (R 4.1.0)\n devtools          2.4.1      2021-05-05 [1] CRAN (R 4.1.0)\n digest            0.6.27     2020-10-24 [1] CRAN (R 4.1.0)\n distill           1.3        2021-10-13 [1] CRAN (R 4.1.0)\n downlit           0.4.0      2021-10-29 [1] CRAN (R 4.1.0)\n dplyr             1.0.7      2021-06-18 [1] CRAN (R 4.1.0)\n ellipsis          0.3.2      2021-04-29 [1] CRAN (R 4.1.0)\n evaluate          0.14       2019-05-28 [1] CRAN (R 4.1.0)\n fansi             0.5.0      2021-05-25 [1] CRAN (R 4.1.0)\n farver            2.1.0      2021-02-28 [1] CRAN (R 4.1.0)\n fastmap           1.1.0      2021-01-25 [1] CRAN (R 4.1.0)\n flexsurv        * 2.0        2021-02-22 [1] CRAN (R 4.1.0)\n fs                1.5.0      2020-07-31 [1] CRAN (R 4.1.0)\n generics          0.1.0      2020-10-31 [1] CRAN (R 4.1.0)\n ggfortify       * 0.4.11     2020-10-02 [1] CRAN (R 4.1.0)\n ggplot2         * 3.3.5      2021-06-25 [1] CRAN (R 4.1.0)\n glue              1.4.2      2020-08-27 [1] CRAN (R 4.1.0)\n gridExtra         2.3        2017-09-09 [1] CRAN (R 4.1.0)\n gtable            0.3.0      2019-03-25 [1] CRAN (R 4.1.0)\n highr             0.9        2021-04-16 [1] CRAN (R 4.1.0)\n htmltools         0.5.1.1    2021-01-22 [1] CRAN (R 4.1.0)\n jquerylib         0.1.4      2021-04-26 [1] CRAN (R 4.1.0)\n jsonlite          1.7.2      2020-12-09 [1] CRAN (R 4.1.0)\n knitr             1.33       2021-04-24 [1] CRAN (R 4.1.0)\n labeling          0.4.2      2020-10-20 [1] CRAN (R 4.1.0)\n lattice           0.20-44    2021-05-02 [1] CRAN (R 4.1.0)\n lifecycle         1.0.0      2021-02-15 [1] CRAN (R 4.1.0)\n magrittr          2.0.1      2020-11-17 [1] CRAN (R 4.1.0)\n Matrix            1.3-3      2021-05-04 [1] CRAN (R 4.1.0)\n memoise           2.0.0      2021-01-26 [1] CRAN (R 4.1.0)\n mstate            0.3.1      2020-12-17 [1] CRAN (R 4.1.0)\n muhaz             1.2.6.4    2021-04-21 [1] CRAN (R 4.1.0)\n munsell           0.5.0      2018-06-12 [1] CRAN (R 4.1.0)\n mvtnorm           1.1-2      2021-06-07 [1] CRAN (R 4.1.0)\n nlme              3.1-152    2021-02-04 [1] CRAN (R 4.1.0)\n numDeriv          2016.8-1.1 2019-06-06 [1] CRAN (R 4.1.0)\n pillar            1.6.2      2021-07-29 [1] CRAN (R 4.1.0)\n pkgbuild          1.2.0      2020-12-15 [1] CRAN (R 4.1.0)\n pkgconfig         2.0.3      2019-09-22 [1] CRAN (R 4.1.0)\n pkgload           1.2.1      2021-04-06 [1] CRAN (R 4.1.0)\n plyr              1.8.6      2020-03-03 [1] CRAN (R 4.1.0)\n prettyunits       1.1.1      2020-01-24 [1] CRAN (R 4.1.0)\n processx          3.5.2      2021-04-30 [1] CRAN (R 4.1.0)\n ps                1.6.0      2021-02-28 [1] CRAN (R 4.1.0)\n purrr             0.3.4      2020-04-17 [1] CRAN (R 4.1.0)\n quadprog          1.5-8      2019-11-20 [1] CRAN (R 4.1.0)\n R6                2.5.0      2020-10-28 [1] CRAN (R 4.1.0)\n RColorBrewer      1.1-2      2014-12-07 [1] CRAN (R 4.1.0)\n Rcpp              1.0.7      2021-07-07 [1] CRAN (R 4.1.0)\n readxl            1.3.1      2019-03-13 [1] CRAN (R 4.1.0)\n remotes           2.4.0      2021-06-02 [1] CRAN (R 4.1.0)\n rlang             0.4.11     2021-04-30 [1] CRAN (R 4.1.0)\n rmarkdown         2.11       2021-09-14 [1] CRAN (R 4.1.0)\n rprojroot         2.0.2      2020-11-15 [1] CRAN (R 4.1.0)\n rstudioapi        0.13       2020-11-12 [1] CRAN (R 4.1.0)\n sass              0.4.0      2021-05-12 [1] CRAN (R 4.1.0)\n scales            1.1.1      2020-05-11 [1] CRAN (R 4.1.0)\n sessioninfo       1.1.1      2018-11-05 [1] CRAN (R 4.1.0)\n splitstackshape * 1.4.8      2019-04-21 [1] CRAN (R 4.1.0)\n stringi           1.7.3      2021-07-16 [1] CRAN (R 4.1.0)\n stringr           1.4.0      2019-02-10 [1] CRAN (R 4.1.0)\n survival        * 3.2-11     2021-04-26 [1] CRAN (R 4.1.0)\n testthat          3.0.4      2021-07-01 [1] CRAN (R 4.1.0)\n tibble            3.1.3      2021-07-23 [1] CRAN (R 4.1.0)\n tidyr             1.1.3      2021-03-03 [1] CRAN (R 4.1.0)\n tidyselect        1.1.1      2021-04-30 [1] CRAN (R 4.1.0)\n usethis           2.0.1      2021-02-10 [1] CRAN (R 4.1.0)\n utf8              1.2.2      2021-07-24 [1] CRAN (R 4.1.0)\n vctrs             0.3.8      2021-04-29 [1] CRAN (R 4.1.0)\n withr             2.4.2      2021-04-18 [1] CRAN (R 4.1.0)\n xfun              0.24       2021-06-15 [1] CRAN (R 4.1.0)\n yaml              2.2.1      2020-02-01 [1] CRAN (R 4.1.0)\n\n[1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library\n\n\n\n\n",
    "preview": "posts/2022-01-03-survivalanalysis/distill-preview.png",
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2022-01-01-heatmappick-a-palette/",
    "title": "Heatmap: Pick a Palette",
    "description": "Pick color palettes in heatmaps",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2022-01-01",
    "categories": [],
    "contents": "\n\nContents\nThe slow way: Handpick\nThe efficient way: R Color PalettesYellow-Purple Gradient Color Scheme\nGreen or Blue color panel\nRed color panel\n\n\nThe slow way: Handpick\nFor example, handpick a Yellow-Purple Gradient Color Scheme.\nThe Yellow-Purple Gradient Color Scheme palette has 6 colors, which are Metallic Yellow (#FFD014), American Gold (#DFB12F), Aztec Gold (#BF914A), Blast-Off Bronze (#A07265), Razzmic Berry (#805280) and Rebecca Purple (#60339B).\n\n\nYellow2Purple=c('#FFD014','#DFB12F','#BF914A','#A07265', '#805280' ,'#60339B');\nbarplot(1:length(Yellow2Purple),col=Yellow2Purple)\n\n\n\nN=7\nmat=matrix(runif(N^2),N,N)\nimage(mat,col=Yellow2Purple)\n\n\n\n\nThe efficient way: R Color Palettes\nColors are generated in R following certain rules.\nTaking advatnage of these rules would make the color pallette process easy peasy.\nYellow-Purple Gradient Color Scheme\n\n\ny2p.pal<-colorRampPalette(c(\"#FFD014\",\"white\",'#60339B'))\ny2p=y2p.pal(7)\nbarplot(1:length(y2p),col=y2p)\n\n\n\nimage(mat,col=y2p,axes=FALSE,ylab=\"\", xlab=\"\")\nmat=as.matrix(Matrix::forceSymmetric(mat))\n\n\n\naxis.tick=0:N\nx=0:nrow(mat) \ny=0:ncol(mat)\nimage(x,y,mat, axes=FALSE, col=y2p,ylab=\"\", xlab=\"\")\nfor(i in 1:length(axis.tick)){\n  segments(axis.tick[i],min(y),axis.tick[i],max(y))#vertical\n  segments(min(x),axis.tick[i],max(x),axis.tick[i])#horizental\n}\nbox()\n\n\n\n\nGreen or Blue color panel\n\n\nmy.col1=RColorBrewer::brewer.pal(7,'Greens')\nbarplot(1:length(my.col1),col=my.col1)\n\n\n\nmy.col2=RColorBrewer::brewer.pal(7,'Blues')\nbarplot(1:length(my.col2),col=my.col2)\n\n\n\nN=7\nfor(i in 1:2){\n  if(i==1){my.col=my.col1}else{my.col=my.col2}\n  mat=Matrix::Matrix(runif(N^2),N,N)\n  mat=as.matrix(Matrix::forceSymmetric(mat))\n  axis.tick=0:N\n  x=0:nrow(mat) \n  y=0:ncol(mat) #x and y should be 1 unit longer than dim(mat)\n  mat1 <- apply(mat, 2, rev);\n  image(y,x,mat1, axes=FALSE, col=my.col,ylab=\"\", xlab=\"\")\n  for(i in 1:length(axis.tick)){\n    segments(axis.tick[i],min(y),axis.tick[i],max(y))#vertical\n    segments(min(x),axis.tick[i],max(x),axis.tick[i])#horizental\n  }\n  box()\n}\n\n\n\n\nRed color panel\n\n\nmy.col=RColorBrewer::brewer.pal(7,'Reds')\nbarplot(1:length(my.col),col=my.col)\n\n\n\nmy.col[1]='white'\nN=20;M=4;\nset.seed(123456)\nmat=as.matrix(Matrix::Matrix(rexp(N*M),N,M))\nmat=mat/10\nmat=t(mat)\nmat1=t(apply(mat,1,function(i){\n  x=abs((i-mean(i))/sd(i))\n  x[x<1.3]=0\n  x\n}))\naxis.tick=0:N\nx=0:ncol(mat1) \ny=0:nrow(mat1) #x and y should be 1 unit longer than dim(mat)\n\nimage(y,x,mat, axes=FALSE, col=my.col,ylab=\"\", xlab=\"\")\nfor(i in 1:length(axis.tick)){\n  segments(axis.tick[i],min(x),axis.tick[i],max(x))#vertical\n  #segments(min(x),axis.tick[i],max(x),axis.tick[i])#horizental\n}\nbox()\n\n\n\nimage(y,x,mat1, axes=FALSE, col=my.col,ylab=\"\", xlab=\"\")\n\nfor(i in 1:length(axis.tick)){\n  segments(axis.tick[i],min(x),axis.tick[i],max(x))#vertical\n  #segments(min(x),axis.tick[i],max(x),axis.tick[i])#horizental\n}\nbox()\n\n\n\nN=400;M=5;\nset.seed(123456)\nmat=as.matrix(Matrix::Matrix(runif(N*M),N,M))\nmat1=apply(mat,2,function(i){\n  x=abs((i-mean(i))/sd(i))\n  x[x<1]=0\n  x[x>=1]=1\n  x\n})\nprint (pheatmap::pheatmap(mat1,col=c('grey90',\"#99000D\"),\n                   treeheight_row = 0, treeheight_col = 0)\n)\n\n\n\n\n\n\ndevtools::session_info()\n\n\n─ Session info ─────────────────────────────────────────────────────\n setting  value                       \n version  R version 4.1.0 (2021-05-18)\n os       macOS Mojave 10.14.5        \n system   x86_64, darwin17.0          \n ui       X11                         \n language (EN)                        \n collate  en_US.UTF-8                 \n ctype    en_US.UTF-8                 \n tz       America/Los_Angeles         \n date     2022-01-01                  \n\n─ Packages ─────────────────────────────────────────────────────────\n package      * version date       lib source        \n bslib          0.2.5.1 2021-05-18 [1] CRAN (R 4.1.0)\n cachem         1.0.5   2021-05-15 [1] CRAN (R 4.1.0)\n callr          3.7.0   2021-04-20 [1] CRAN (R 4.1.0)\n cli            3.0.1   2021-07-17 [1] CRAN (R 4.1.0)\n colorspace     2.0-2   2021-06-24 [1] CRAN (R 4.1.0)\n crayon         1.4.1   2021-02-08 [1] CRAN (R 4.1.0)\n desc           1.3.0   2021-03-05 [1] CRAN (R 4.1.0)\n devtools       2.4.1   2021-05-05 [1] CRAN (R 4.1.0)\n digest         0.6.27  2020-10-24 [1] CRAN (R 4.1.0)\n distill        1.3     2021-10-13 [1] CRAN (R 4.1.0)\n downlit        0.4.0   2021-10-29 [1] CRAN (R 4.1.0)\n ellipsis       0.3.2   2021-04-29 [1] CRAN (R 4.1.0)\n evaluate       0.14    2019-05-28 [1] CRAN (R 4.1.0)\n fansi          0.5.0   2021-05-25 [1] CRAN (R 4.1.0)\n fastmap        1.1.0   2021-01-25 [1] CRAN (R 4.1.0)\n fs             1.5.0   2020-07-31 [1] CRAN (R 4.1.0)\n glue           1.4.2   2020-08-27 [1] CRAN (R 4.1.0)\n gtable         0.3.0   2019-03-25 [1] CRAN (R 4.1.0)\n highr          0.9     2021-04-16 [1] CRAN (R 4.1.0)\n htmltools      0.5.1.1 2021-01-22 [1] CRAN (R 4.1.0)\n jquerylib      0.1.4   2021-04-26 [1] CRAN (R 4.1.0)\n jsonlite       1.7.2   2020-12-09 [1] CRAN (R 4.1.0)\n knitr          1.33    2021-04-24 [1] CRAN (R 4.1.0)\n lattice        0.20-44 2021-05-02 [1] CRAN (R 4.1.0)\n lifecycle      1.0.0   2021-02-15 [1] CRAN (R 4.1.0)\n magrittr       2.0.1   2020-11-17 [1] CRAN (R 4.1.0)\n Matrix         1.3-3   2021-05-04 [1] CRAN (R 4.1.0)\n memoise        2.0.0   2021-01-26 [1] CRAN (R 4.1.0)\n munsell        0.5.0   2018-06-12 [1] CRAN (R 4.1.0)\n pheatmap       1.0.12  2019-01-04 [1] CRAN (R 4.1.0)\n pkgbuild       1.2.0   2020-12-15 [1] CRAN (R 4.1.0)\n pkgload        1.2.1   2021-04-06 [1] CRAN (R 4.1.0)\n prettyunits    1.1.1   2020-01-24 [1] CRAN (R 4.1.0)\n processx       3.5.2   2021-04-30 [1] CRAN (R 4.1.0)\n ps             1.6.0   2021-02-28 [1] CRAN (R 4.1.0)\n purrr          0.3.4   2020-04-17 [1] CRAN (R 4.1.0)\n R6             2.5.0   2020-10-28 [1] CRAN (R 4.1.0)\n RColorBrewer   1.1-2   2014-12-07 [1] CRAN (R 4.1.0)\n remotes        2.4.0   2021-06-02 [1] CRAN (R 4.1.0)\n rlang          0.4.11  2021-04-30 [1] CRAN (R 4.1.0)\n rmarkdown      2.11    2021-09-14 [1] CRAN (R 4.1.0)\n rprojroot      2.0.2   2020-11-15 [1] CRAN (R 4.1.0)\n rstudioapi     0.13    2020-11-12 [1] CRAN (R 4.1.0)\n sass           0.4.0   2021-05-12 [1] CRAN (R 4.1.0)\n scales         1.1.1   2020-05-11 [1] CRAN (R 4.1.0)\n sessioninfo    1.1.1   2018-11-05 [1] CRAN (R 4.1.0)\n stringi        1.7.3   2021-07-16 [1] CRAN (R 4.1.0)\n stringr        1.4.0   2019-02-10 [1] CRAN (R 4.1.0)\n testthat       3.0.4   2021-07-01 [1] CRAN (R 4.1.0)\n usethis        2.0.1   2021-02-10 [1] CRAN (R 4.1.0)\n vctrs          0.3.8   2021-04-29 [1] CRAN (R 4.1.0)\n withr          2.4.2   2021-04-18 [1] CRAN (R 4.1.0)\n xfun           0.24    2021-06-15 [1] CRAN (R 4.1.0)\n yaml           2.2.1   2020-02-01 [1] CRAN (R 4.1.0)\n\n[1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library\n\n\n\n\n",
    "preview": "posts/2022-01-01-heatmappick-a-palette/distill-preview.png",
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-12-17-technote-enable-openmp-on-macos-mojave/",
    "title": "TechNote: Enable OpenMP on macOS Mojave",
    "description": "Parallel Computing in R",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-12-14",
    "categories": [],
    "contents": "\n\nContents\nSetup: openMP realization on mac\nValidation: openMP installationUsing data.table with OpenMP support\nRcpp sleep test\n\nA detour: benchmark code performance\nRcpp application: large matrix multiplication\n\nSetup: openMP realization on mac\nWhen I was running sourceCpp in Rstudio in my mac laptop, it showed that OpenMP was not detected in R .\nFor example, a piece of Rcpp code from hogsvd.cpp\n\n#https://github.com/barkasn/hogsvdR/blob/master/src/hogsvd.cpp\n#include <RcppArmadillo.h>\n#include <vector>\n\n#ifdef _OPENMP\n#include <omp.h>\n#endif\n\n// [[Rcpp::plugins(openmp)]]\n\nusing namespace Rcpp;\n\n// [[Rcpp::depends(RcppArmadillo)]]\n\nIf directly use sourceCpp('hogsvd.cpp'), there would be a error message like \"couldn’t find openMP.\nI did some serach, turned out this is a ‘universal’ problem for Apple and could be solved by some system configuraitons.\nKnowledge borrowed from stackoverflow:\nInstall xcode (if you have xcode, skip this step)\n\n# To delete an existing command line tools installation:\nsudo rm -rf /Library/Developer/CommandLineTools\n# To install the command line tools\nsudo xcode-select --install\n# check your xcode-select version\nxcode-select --version\n# xcode-select version 2354.\n\nInstall gcc via Homebrew (if you have gcc, skip this step)\n\nbrew install gcc\n# check your gcc version\ngcc --version\n\nConfigured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/c++/4.2.1\nApple LLVM version 10.0.1 (clang-1001.0.46.4)\nTarget: x86_64-apple-darwin18.6.0\nThread model: posix\nInstalledDir: /Library/Developer/CommandLineTools/usr/bin\n\nlink some headers into /usr/local/include\n\nsudo ln -s /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/* /usr/local/include/\n\ncheck your gfortran version and edit ~/.R/Makevars file.\nI follow this answer to modify my Makevars file\n\nLOC = /usr/local/gfortran\nCC=$(LOC)/bin/gcc -fopenmp\nCXX=$(LOC)/bin/g++ -fopenmp\nCXX11 = $(LOC)/bin/g++ -fopenmp\n\nCFLAGS=-g -O3 -Wall -pedantic -std=gnu99 -mtune=native -pipe\nCXXFLAGS=-g -O3 -Wall -pedantic -std=c++11 -mtune=native -pipe\nLDFLAGS=-L$(LOC)/lib -Wl,-rpath,$(LOC)/lib\n# find your SDK path via '$xcrun -show-sdk-path' \n# https://firas.io/post/data.table_openmp/\nCPPFLAGS=-I$(LOC)/include -I/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include\n#CPPFLAGS=-I$(LOC)/include -I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include\n\n# (check that the version of gfortran - in this case 10.2.0 - matches the version specified in FLIBS)\nFLIBS=-L/usr/local/gfortran/lib/gcc/x86_64-apple-darwin18/8.2.0 -L/usr/local/gfortran/lib -lgfortran -lquadmath -lm \n#FLIBS=-L/usr/local/gfortran/lib/gcc/x86_64-apple-darwin19/10.2.0 -L/usr/local/gfortran/lib -lgfortran -lquadmath -lm\nCXX1X=/usr/local/gfortran/bin/g++\nCXX98=/usr/local/gfortran/bin/g++\nCXX11=/usr/local/gfortran/bin/g++\nCXX14=/usr/local/gfortran/bin/g++\nCXX17=/usr/local/gfortran/bin/g++\n\nThen, open you Rstudio, check if openMP is now enabled.\nValidation: openMP installation\nUsing data.table with OpenMP support\nMy previous installed data.table R package was not compiled in presnce of OpenMP. Thus, whenever I library(data.table), message like\n\nThis installation of data.table has not detected OpenMP support. It should still work but in single-threaded mode. would show up.\n\nNow I’d re-install data.table to enable OpenMP capacity.\n\n\nremove.packages(\"data.table\")\ninstall.packages(\"data.table\", type = \"source\",\n    repos = \"https://Rdatatable.gitlab.io/data.table\")\n\n\n\nTo check if data.table was successfully compiled with OpenMP support, load the library:\n\n\nlibrary(data.table)\n# data.table 1.14.0 using 4 threads (see ?getDTthreads).  Latest news: r-datatable.com\n\n\n\nRcpp sleep test\nAn alternative to test OpenMP is to use the sleep function.\nserial sleep\n\n\nlibrary(Rcpp)\nsourceCpp(code = '\n#include <unistd.h>\n#include <Rcpp.h>\n\n// [[Rcpp::export(wait_a_second)]]\nbool wait_a_second(int sec)\n{\n for(size_t ii = 0; ii < sec; ii++)\n { \n  sleep(1);\n }\n return 1;\n}\n')\n\nsystem.time( wait_a_second(2) )[3]\n\n\nelapsed \n  2.003 \n\nparallel sleep\n\n\nsourceCpp(code = '\n#include <unistd.h>\n#include <Rcpp.h>\n\n// [[Rcpp::plugins(openmp)]]\n\n// [[Rcpp::export(wait_a_second_omp)]]\nbool wait_a_second_omp(int sec, int ncores)\n{\n\n #if defined(_OPENMP)\n  #pragma omp parallel num_threads(ncores)\n  #pragma omp for\n #endif\n for(size_t ii = 0; ii < sec; ii++)\n { \n  sleep(1);\n }\n \n return 1;\n\n }\n')\n#para1: sleep seconds, para2: n.core used\nsystem.time(wait_a_second_omp(4, 1))\n\n\n   user  system elapsed \n  0.000   0.000   4.009 \n\nsystem.time(wait_a_second_omp(4, 4))\n\n\n   user  system elapsed \n  0.018   0.001   1.019 \n\nsystem.time(wait_a_second_omp(16, 16))\n\n\n   user  system elapsed \n  0.000   0.000   1.004 \n\nA detour: benchmark code performance\nIt’s a routine task to benchmark code running time on samll dataset before applying it to big project.\nHere is a simple example with R base function system.time to if mclapply is doing parallel computation as we expect.\n\n\nsolve.quad.eq <- function(a, b, c) {\n  if(abs(a) < 1e-8 && abs(b) < 1e-8) return(c(NA, NA) )\n  if(abs(a) < 1e-8 && abs(b) > 1e-8) return(c(-c/b, NA))\n  if(b*b - 4*a*c < 0) return(c(NA,NA))\n  x.delta <- sqrt(b*b - 4*a*c)\n  x1 <- (-b + x.delta)/(2*a)\n  x2 <- (-b - x.delta)/(2*a)\n  return(c(x1, x2))\n}\n\nlibrary(parallel)\n\n# Generate data \nlen <- 1e6\na <- runif(len, -10, 10)\na[sample(len, 100,replace=TRUE)] <- 0\nb <- runif(len, -10, 10)\nc <- runif(len, -10, 10)\n# serial code\nsystem.time(\n  res1.s <- lapply(1:len, FUN = function(x) { solve.quad.eq(a[x], b[x], c[x])})\n)\n\n\n   user  system elapsed \n  2.994   0.059   3.159 \n\n# multicores on Linux or Mac\nsystem.time(\n  res1.p <- mclapply(1:len, FUN = function(x) { solve.quad.eq(a[x], b[x], c[x])}, mc.cores = 2)\n)\n\n\n   user  system elapsed \n  3.874   0.558   2.525 \n\nRcpp application: large matrix multiplication\nI saw this example on stackoverflow and copied it here showing the power of Rcpp.\n\n\nlibrary(Rcpp)\nsourceCpp(code ='\n// [[Rcpp::depends(RcppArmadillo, RcppEigen)]]\n\n#include <RcppArmadillo.h>\n#include <RcppEigen.h>\n\n// [[Rcpp::export]]\nSEXP armaMatMult(arma::mat A, arma::mat B){\n    arma::mat C = A * B;\n\n    return Rcpp::wrap(C);\n}\n\n// [[Rcpp::export]]\nSEXP eigenMatMult(Eigen::MatrixXd A, Eigen::MatrixXd B){\n    Eigen::MatrixXd C = A * B;\n\n    return Rcpp::wrap(C);\n}\n\n// [[Rcpp::export]]\nSEXP eigenMapMatMult(const Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::MatrixXd> B){\n    Eigen::MatrixXd C = A * B;\n\n    return Rcpp::wrap(C);\n}\n')\n\n\nA <- matrix(rnorm(10000), 100, 100)\nB <- matrix(rnorm(10000), 100, 100)\n\nlibrary(microbenchmark)\nmicrobenchmark(A%*%B, armaMatMult(A, B), eigenMatMult(A, B), eigenMapMatMult(A, B))\n\n\nUnit: microseconds\n                  expr     min       lq      mean   median       uq\n               A %*% B 560.514 563.2385  643.9351 595.7315 685.2210\n     armaMatMult(A, B) 594.923 630.5270  733.6635 676.2810 754.3800\n    eigenMatMult(A, B) 161.589 216.5890 1216.5186 268.0035 972.6935\n eigenMapMatMult(A, B) 121.676 173.8035  835.5803 202.4840 932.6985\n       max neval cld\n  1465.850   100   a\n  1587.897   100   a\n 31194.959   100   a\n  6466.976   100   a\n\nYou can see the different running speed of differemt implementations of matrix multiplication, A%*%B is the slowest and eigenMapMatMult(A, B) is the fastest.\nReferences\nhttps://mac.r-project.org/openmp/\nhttps://github.com/barkasn/hogsvdR/blob/master/src/hogsvd.cpp\nhttps://stackoverflow.com/questions/65251887/clang-7-error-linker-command-failed-with-exit-code-1-for-macos-big-sur/65334247#65334247\nhttps://stackoverflow.com/questions/68263165/installing-r-on-osx-big-sur-edit-and-apple-m1-for-use-with-rcpp-and-openmp\nhttps://firas.io/post/data.table_openmp/\nhttps://mfasiolo.github.io/sc2-2019/rcpp_advanced_iii/1_openmp/\nhttps://cosx.org/2016/09/r-and-parallel-computing/\nhttps://stackoverflow.com/questions/35923787/fast-large-matrix-multiplication-in-r\n\n\nsessionInfo()\n\n\nR version 4.1.0 (2021-05-18)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Mojave 10.14.5\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] parallel  stats     graphics  grDevices utils     datasets \n[7] methods   base     \n\nother attached packages:\n[1] microbenchmark_1.4-7 Rcpp_1.0.7          \n\nloaded via a namespace (and not attached):\n [1] bslib_0.2.5.1            compiler_4.1.0          \n [3] jquerylib_0.1.4          tools_4.1.0             \n [5] digest_0.6.27            downlit_0.4.0           \n [7] jsonlite_1.7.2           evaluate_0.14           \n [9] memoise_2.0.0            lattice_0.20-44         \n[11] rlang_0.4.11             Matrix_1.3-3            \n[13] distill_1.3              yaml_2.2.1              \n[15] mvtnorm_1.1-2            xfun_0.24               \n[17] RcppArmadillo_0.10.6.0.0 fastmap_1.1.0           \n[19] stringr_1.4.0            knitr_1.33              \n[21] vctrs_0.3.8              sass_0.4.0              \n[23] grid_4.1.0               data.table_1.14.3       \n[25] R6_2.5.0                 fansi_0.5.0             \n[27] survival_3.2-11          rmarkdown_2.11          \n[29] multcomp_1.4-17          TH.data_1.1-0           \n[31] magrittr_2.0.1           codetools_0.2-18        \n[33] MASS_7.3-54              htmltools_0.5.1.1       \n[35] splines_4.1.0            sandwich_3.0-1          \n[37] stringi_1.7.3            cachem_1.0.5            \n[39] RcppEigen_0.3.3.9.1      zoo_1.8-9               \n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-12-14-measuringthedistancebetweentwodistributions/",
    "title": "Metric: measruing the distance between two distributions",
    "description": "Three metrics quantifying the differnece between two distributions.",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-12-12",
    "categories": [],
    "contents": "\n\nContents\nKolmogorov–Smirnov test\nJensen–Shannon divergencethe entorpy of a distribution\nKullback-Leibler Divergence\nJensen-Shannon Divergence\n\nOptimal Transport and Wasserstein Distance\n\nIn this blog, I’d introduce three metrics measruing the distance between two distributions.\nKolmogorov–Smirnov test\nThe first metric is actually derived from a nonparametric method comparing the significant difference between two empirical distributions.\nLet’s simulate some continuous distributed data first, and have a look at their empirical density plot and cumulative distributions.\n\n\nlibrary(ggplot2)\nlibrary(tidyverse)\nset.seed(123456)\nsample1=runif(100,0,1)\nsample2=rnorm(200,0,1)\n\ndf=data.frame(sample=c(rep('sample1',100),rep('sample2',200)),\n              value=c(sample1,sample2))\nggplot(df,aes(x=value,group=sample,col=sample))+\n  geom_density()+theme_classic()\n\n\n\nggplot(df, aes(x=value,group=sample,col=sample))+\n  stat_ecdf(geom = \"step\")+theme_classic(base_size = 20)\n\n\n\nout=ks.test(sample1,sample2)\nout$statistic\n\n\n  D \n0.5 \n\nThe statistic reported by ks.test() is the largest distance between the two distributions.\nWe can explicitly visualize this statistic via code below.\n\n\n#Visualizing the Kolmogorov-Smirnov statistic in ggplot2\n## ks: https://rpubs.com/mharris/KSplot\ncdf1=ecdf(sample1)\ncdf2=ecdf(sample2)\n\n# find min and max statistics to draw line between points of greatest distance\nminMax <- seq(min(sample1, sample2), max(sample1, sample2), length.out=length(sample1)) \nD= abs(cdf1(minMax) - cdf2(minMax))\nmax(D);\n\n\n[1] 0.485\n\nout$statistic;\n\n\n  D \n0.5 \n\nx0 <- minMax[which(D== max(D))] \ny0 <- cdf1(x0) \ny1 <- cdf2(x0) \nggplot(df, aes(x = value, group = sample, color = sample))+\n  stat_ecdf(size=1) +\n  theme_bw(base_size = 12) +\n  theme(legend.position =\"top\") +\n  xlab(\"Sample\") +\n  ylab(\"ECDF\") +\n  geom_segment(aes(x = x0[1], y = y0[1], xend = x0[1], yend = y1[1]),\n               linetype = \"dashed\", color = \"black\",lwd=0.5) +\n  geom_point(aes(x = x0[1] , y= y0[1]), color=\"black\", size=2) +\n  geom_point(aes(x = x0[1] , y= y1[1]), color=\"black\", size=2) +\n  ggtitle(\"K-S Test: Sample 1 / Sample 2\") +\n  theme(legend.title=element_blank())\n\n\n\n\nJensen–Shannon divergence\nThis Jensen–Shannon divergence is actually derived from Kullback-Leibler Divergence.\nthe entorpy of a distribution\nThe core concept involved in this metric is the entorpy of a distribution.\nThe definition of Entropy for a probability distribution is:\n\\[H=-\\sum_{i=1}^{N} p(x_i)*log(p(x_i))\\] If we use \\(log2\\) in the above calculation, it can be interpreted as ‘the minimal number of bits to encode the information’.\nA simplest example, if we have a coin with head probability 0.5 and tail probability 0.5, then \\(H = -1*{(0.5*log2(0.5) + 0.5*log2(0.5)}=1\\), which means we need 1 bit to encode the fairness of this coin.\nSuppose, this coin is unfair, with head = 0.8 and tail = 0.2. Then \\(H = -1*{(0.8*log2(0.8) + 0.2*log2(0.2)}=0.7219\\).\nEntropy can be interpreted as the uncertainty of a distribution. It’s more difficult or it invovoles more uncertainty to predict what the next outcome would be with a fair coin than with a unfair coin. Thus, a fair coin requires more bit to encode its information.\nKullback-Leibler Divergence\nThe KL divergence formula is:\n\\[D_{KL}(p||q)=\\sum_{i=1}^N p(x_i)*(log p(x_i) - log q(x_i))\\]\nor \\[D_{KL}(p||q)=E[log p(x_i) - log q(x_i)]\\] or \\[D_{KL}(p||q)=\\sum_{i=1}^N p(x_i) * log\\frac{p(x_i)}{q(x_i)}\\] We can use functions from R package philentropy to do the calculation.\n\n\nset.seed(123456)\nsample1=rbinom(100,20,0.2)\nsample2=rpois(200,8)\ndf=data.frame(sample=c(rep('sample1',100),rep('sample2',200)),\n              value=c(sample1,sample2))\n\nggplot(df, aes(x=value,group=sample,col=sample))+\n  geom_density()+theme_classic()\n\n\n\nf1=prop.table(table(sample1))\nf2=prop.table(table(sample2))\nbins=sort(as.numeric(unique(c(names(f1),names(f2)))))\ntmp=rep(0,length(bins))\nnames(tmp)=bins\ns1=tmp\ns1[names(f1)]=f1;\ns2=tmp\ns2[names(f2)]=f2;\nrbind(s1,s2)\n\n\n      0    1    2    3    4     5    6     7     8    9    10    11\ns1 0.02 0.03 0.25 0.17 0.16 0.130 0.18 0.040 0.010 0.01 0.000 0.000\ns2 0.00 0.00 0.01 0.03 0.06 0.065 0.15 0.145 0.145 0.13 0.095 0.065\n     12    13   14\ns1 0.00 0.000 0.00\ns2 0.05 0.035 0.02\n\n# unsymmetric\nphilentropy::KL(rbind(s1,s2),unit = 'log2')\n\n\nkullback-leibler \n        2.406076 \n\nphilentropy::KL(rbind(s2,s1),unit = 'log2')\n\n\nkullback-leibler \n        4.323369 \n\nAs you may have notice, one thing with KL divergence is, it’s not symmetric. So, here comes Jensen-Shannon Divergence.\nJensen-Shannon Divergence\nJSD is defined as:\n\\[JSD(P||Q) = 0.5 * (KL(P||R)+KL(Q||R))\\]\n\\(R = 0.5 * (P+Q)\\)\nWe can use JSD function to do the calculation.\n\n\nR = 0.5*(s1+s2)\n0.5*(philentropy::KL(rbind(s1,R),unit = 'log2')+\n  philentropy::KL(rbind(s2,R),unit = 'log2'))\n\n\nkullback-leibler \n       0.4394997 \n\nphilentropy::JSD(rbind(s2,s1),unit='log2')\n\n\njensen-shannon \n     0.4394997 \n\nphilentropy::JSD(rbind(s1,s2),unit='log2')\n\n\njensen-shannon \n     0.4394997 \n\nOptimal Transport and Wasserstein Distance\nWasserstein Distance has a nickname of Earth mover’s distance, i.e., what’s the minimal effort you have to do to move a pile of sand from region A to region B.\nWhile there are more math involved for this metric, it is very popular in single-cell data methodology development.\nI would only show the function used in R to calculate this metric.\n\n\nset.seed(123456)\nsample1=runif(100,0,1)\nsample2=rnorm(200,0,1)\n\ntransport::wasserstein1d(sample1,sample2)\n\n\n[1] 0.6560769\n\nset.seed(123456)\nsample1=rbinom(100,20,0.2)\nsample2=rpois(200,8)\ntransport::wasserstein1d(sample1,sample2)\n\n\n[1] 4.06\n\nHave fun~\n\n\ndevtools::session_info()\n\n\n─ Session info ─────────────────────────────────────────────────────\n setting  value                       \n version  R version 4.1.0 (2021-05-18)\n os       macOS High Sierra 10.13.6   \n system   x86_64, darwin17.0          \n ui       X11                         \n language (EN)                        \n collate  en_US.UTF-8                 \n ctype    en_US.UTF-8                 \n tz       America/Los_Angeles         \n date     2021-12-14                  \n\n─ Packages ─────────────────────────────────────────────────────────\n package     * version date       lib source        \n assertthat    0.2.1   2019-03-21 [1] CRAN (R 4.1.0)\n backports     1.2.1   2020-12-09 [1] CRAN (R 4.1.0)\n broom         0.7.8   2021-06-24 [1] CRAN (R 4.1.0)\n bslib         0.2.5.1 2021-05-18 [1] CRAN (R 4.1.0)\n cachem        1.0.5   2021-05-15 [1] CRAN (R 4.1.0)\n callr         3.7.0   2021-04-20 [1] CRAN (R 4.1.0)\n cellranger    1.1.0   2016-07-27 [1] CRAN (R 4.1.0)\n cli           3.0.1   2021-07-17 [1] CRAN (R 4.1.0)\n colorspace    2.0-2   2021-06-24 [1] CRAN (R 4.1.0)\n crayon        1.4.1   2021-02-08 [1] CRAN (R 4.1.0)\n data.table    1.14.0  2021-02-21 [1] CRAN (R 4.1.0)\n DBI           1.1.1   2021-01-15 [1] CRAN (R 4.1.0)\n dbplyr        2.1.1   2021-04-06 [1] CRAN (R 4.1.0)\n desc          1.3.0   2021-03-05 [1] CRAN (R 4.1.0)\n devtools      2.4.2   2021-06-07 [1] CRAN (R 4.1.0)\n digest        0.6.27  2020-10-24 [1] CRAN (R 4.1.0)\n distill       1.3     2021-10-13 [1] CRAN (R 4.1.0)\n downlit       0.4.0   2021-10-29 [1] CRAN (R 4.1.0)\n dplyr       * 1.0.7   2021-06-18 [1] CRAN (R 4.1.0)\n ellipsis      0.3.2   2021-04-29 [1] CRAN (R 4.1.0)\n evaluate      0.14    2019-05-28 [1] CRAN (R 4.1.0)\n fansi         0.5.0   2021-05-25 [1] CRAN (R 4.1.0)\n farver        2.1.0   2021-02-28 [1] CRAN (R 4.1.0)\n fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.1.0)\n forcats     * 0.5.1   2021-01-27 [1] CRAN (R 4.1.0)\n fs            1.5.0   2020-07-31 [1] CRAN (R 4.1.0)\n generics      0.1.0   2020-10-31 [1] CRAN (R 4.1.0)\n ggplot2     * 3.3.5   2021-06-25 [1] CRAN (R 4.1.0)\n glue          1.4.2   2020-08-27 [1] CRAN (R 4.1.0)\n gtable        0.3.0   2019-03-25 [1] CRAN (R 4.1.0)\n haven         2.4.1   2021-04-23 [1] CRAN (R 4.1.0)\n highr         0.9     2021-04-16 [1] CRAN (R 4.1.0)\n hms           1.1.0   2021-05-17 [1] CRAN (R 4.1.0)\n htmltools     0.5.1.1 2021-01-22 [1] CRAN (R 4.1.0)\n httr          1.4.2   2020-07-20 [1] CRAN (R 4.1.0)\n jquerylib     0.1.4   2021-04-26 [1] CRAN (R 4.1.0)\n jsonlite      1.7.2   2020-12-09 [1] CRAN (R 4.1.0)\n knitr         1.33    2021-04-24 [1] CRAN (R 4.1.0)\n labeling      0.4.2   2020-10-20 [1] CRAN (R 4.1.0)\n lifecycle     1.0.0   2021-02-15 [1] CRAN (R 4.1.0)\n lubridate     1.7.10  2021-02-26 [1] CRAN (R 4.1.0)\n magrittr      2.0.1   2020-11-17 [1] CRAN (R 4.1.0)\n memoise       2.0.0   2021-01-26 [1] CRAN (R 4.1.0)\n modelr        0.1.8   2020-05-19 [1] CRAN (R 4.1.0)\n munsell       0.5.0   2018-06-12 [1] CRAN (R 4.1.0)\n philentropy   0.5.0   2021-05-12 [1] CRAN (R 4.1.0)\n pillar        1.6.2   2021-07-29 [1] CRAN (R 4.1.0)\n pkgbuild      1.2.0   2020-12-15 [1] CRAN (R 4.1.0)\n pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.1.0)\n pkgload       1.2.1   2021-04-06 [1] CRAN (R 4.1.0)\n prettyunits   1.1.1   2020-01-24 [1] CRAN (R 4.1.0)\n processx      3.5.2   2021-04-30 [1] CRAN (R 4.1.0)\n ps            1.6.0   2021-02-28 [1] CRAN (R 4.1.0)\n purrr       * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)\n R6            2.5.0   2020-10-28 [1] CRAN (R 4.1.0)\n Rcpp          1.0.7   2021-07-07 [1] CRAN (R 4.1.0)\n readr       * 1.4.0   2020-10-05 [1] CRAN (R 4.1.0)\n readxl        1.3.1   2019-03-13 [1] CRAN (R 4.1.0)\n remotes       2.4.0   2021-06-02 [1] CRAN (R 4.1.0)\n reprex        2.0.0   2021-04-02 [1] CRAN (R 4.1.0)\n rlang         0.4.11  2021-04-30 [1] CRAN (R 4.1.0)\n rmarkdown     2.11    2021-09-14 [1] CRAN (R 4.1.0)\n rprojroot     2.0.2   2020-11-15 [1] CRAN (R 4.1.0)\n rstudioapi    0.13    2020-11-12 [1] CRAN (R 4.1.0)\n rvest         1.0.0   2021-03-09 [1] CRAN (R 4.1.0)\n sass          0.4.0   2021-05-12 [1] CRAN (R 4.1.0)\n scales        1.1.1   2020-05-11 [1] CRAN (R 4.1.0)\n sessioninfo   1.1.1   2018-11-05 [1] CRAN (R 4.1.0)\n stringi       1.7.3   2021-07-16 [1] CRAN (R 4.1.0)\n stringr     * 1.4.0   2019-02-10 [1] CRAN (R 4.1.0)\n testthat      3.0.4   2021-07-01 [1] CRAN (R 4.1.0)\n tibble      * 3.1.3   2021-07-23 [1] CRAN (R 4.1.0)\n tidyr       * 1.1.3   2021-03-03 [1] CRAN (R 4.1.0)\n tidyselect    1.1.1   2021-04-30 [1] CRAN (R 4.1.0)\n tidyverse   * 1.3.1   2021-04-15 [1] CRAN (R 4.1.0)\n transport     0.12-2  2020-03-11 [1] CRAN (R 4.1.0)\n usethis       2.0.1   2021-02-10 [1] CRAN (R 4.1.0)\n utf8          1.2.2   2021-07-24 [1] CRAN (R 4.1.0)\n vctrs         0.3.8   2021-04-29 [1] CRAN (R 4.1.0)\n withr         2.4.2   2021-04-18 [1] CRAN (R 4.1.0)\n xfun          0.24    2021-06-15 [1] CRAN (R 4.1.0)\n xml2          1.3.2   2020-04-23 [1] CRAN (R 4.1.0)\n yaml          2.2.1   2020-02-01 [1] CRAN (R 4.1.0)\n\n[1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library\n\n\n\n\n",
    "preview": "posts/2021-12-14-measuringthedistancebetweentwodistributions/distill-preview.png",
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-12-11-ggplot-customize-enrichment-heatmap/",
    "title": "ggplot: Customize enrichment heatmap ",
    "description": "Customize enrichment heatmap in R with ggplot2",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-12-11",
    "categories": [],
    "contents": "\nWhen I was reading a network analysis paper titled Function, dynamics and evolution of network motif modules in integrated gene regulatory networks of worm and plant, I ran into this plot:\nFigure 8 from the above paperIf we focus on one panel of the above figure, it shows a enrichment result, number in each cell is Z-score and each cell is colored by the significance level, with green meaning under-represented and red over-represented.\nI wonder if I could make similar plots with some pseudo data in R.\nHere we go~\nFirst, let’s generate some pseudo data.\nWe need two sets of data, one set is Z-score, and the other it Z-score associated p.values.\nI used runif function to generate 100 numbers from uniform distribution within range [-5,5] as Z-scores.\nAnd then used pnorm to calcualte the probabilites for each z-score following a Normal distribution N(0,1).\n\n\nlibrary(ggplot2)\nlibrary(gridExtra)\noptions(stringsAsFactors = F)\n\n## prepare z-score and pvalue matrix\nset.seed(123)\ndat=runif(100,min=-5,max=5)\ndat.p=pnorm(dat)\nplot(dat,dat.p,xlab='Z-score',ylab='cumulative probability');\n\n\n\nmat.zscore=matrix(dat,ncol=10)\nmat.pvalue=matrix(dat.p,ncol=10)\nrownames(mat.zscore)=colnames(mat.zscore)=paste('node',1:10)\nrownames(mat.pvalue)=colnames(mat.pvalue)=paste('node',1:10)\n\n\n\nAs I’m gonna use ggplot to draw heatmaps, ggplot handles data frame. I change matrix into data.frame and make a ‘naive’ plot.\n\n\ndf.zscore=reshape2::melt(mat.zscore)\ndf.pvalue=reshape2::melt(mat.pvalue)\np1<-ggplot(df.zscore,aes(x=Var1,y=Var2,fill=value))+\n  geom_tile()+geom_text(label=round(df.zscore$value,3))+theme_bw()+ggtitle('zscore')\np2<-ggplot(df.pvalue,aes(x=Var1,y=Var2,fill=value))+\n  geom_tile()+geom_text(label=round(df.zscore$value,3))+theme_bw()+ggtitle('pvalue')\ngrid.arrange(p1,p2,ncol=2)\n\n\n\n\nAs you can see above, the default color scheme in ggplot is pretty boring. Next, I combine the two data frames.\nWhen combining data, it’s important to take care of their orders, like, should row 1 in dataset 1 be combined with row 6 or row 9 in dataset 2?\nTo add a little twist, I intentionally shuffle the 2nd dataset, and then re-order it based on row information in dataset 1 before combining.\n\n\n## combine the two data.frame, jsut for demonstration, I shuffled df.pvalue\ndf.zscore$edge=paste(df.zscore$Var1,df.zscore$Var2)\ndf.pvalue$edge=paste(df.pvalue$Var1,df.pvalue$Var2)\ndf=df.zscore;\n\ndf.pvalue=df.pvalue[sample(1:nrow(df.pvalue),nrow(df.pvalue),replace = F),]\ni=match(df.zscore$edge,df.pvalue$edge)\n## make sure row order matches\nsum(df.pvalue[i,]$edge==df.zscore$edge)\n\n\n[1] 100\n\ndf.pvalue=df.pvalue[i,]\ndf$pvalue=df.pvalue$value\n\n\n\nThe goal is to show Z-score as text inside each cell, and color each cell based on p.value significance value.\nThus, we need to decide what is significant and how many significant levels we’d like to show.\nI random select some cells and change them into NA. Then select three significant levels for both over-representation and under-represntation.\nWith cut function in R, it’s easy to map continuous pvalues into exclusive, discrete significant level groups.\nEach p.value corresponds to one and only one significant group, and this significant group information is added as one new column to the orginical data frame.\nThen I select some discrete colors for each significant group and use ggplot scale_fill_manual() function to customize aesthetic colors.\n\n\nset.seed(123)\ni=sample(1:nrow(df),10,replace = F)\ndf[i,]$value=NA;df[i,]$pvalue=NA;\n# sig.level: right tail area, over-represented: 0.95,0.99,0.999\n# sig.level: left tail area, under-represented: 0.95,0.99,0.999\nsig.cutoff=c(0.95,0.99,0.999) \nsig.cutoff=sort(unique(c(1-sig.cutoff,sig.cutoff)))\nif(min(sig.cutoff!=0)){sig.cutoff=c(-10,sig.cutoff)} #you will see why in the below cut behavior\nif(max(sig.cutoff!=1)){sig.cutoff=c(sig.cutoff,10)}\nsig.cutoff\n\n\n[1] -10.000   0.001   0.010   0.050   0.950   0.990   0.999  10.000\n\n# default cut behavior: (,]\n# you can use include.lowest to force [,]\n# or use right = F, to force (,)\ndf$pvalue.group=\n  cut(df$pvalue,breaks=sig.cutoff,right=T,include.lowest=T)\nsum(table(df$pvalue.group))==sum(!is.na(df$pvalue)) #make sure, besides NA, no data.point is left out\n\n\n[1] TRUE\n\ntable(df$pvalue.group)\n\n\n\n [-10,0.001] (0.001,0.01]  (0.01,0.05]  (0.05,0.95]  (0.95,0.99] \n          18            8            6           28            7 \n(0.99,0.999]   (0.999,10] \n           8           15 \n\n## assign labels to these sig.levels\nlevels(df$pvalue.group)\n\n\n[1] \"[-10,0.001]\"  \"(0.001,0.01]\" \"(0.01,0.05]\"  \"(0.05,0.95]\" \n[5] \"(0.95,0.99]\"  \"(0.99,0.999]\" \"(0.999,10]\"  \n\nmy.direct=c(rep('under',3),'',rep('over',3));\nmy.sig=c('<0.001','<0.01','<0.05','Not sig','<0.05','<0.01','<0.001')\nmy.label=paste(my.direct,my.sig)\nmy.label\n\n\n[1] \"under <0.001\" \"under <0.01\"  \"under <0.05\"  \" Not sig\"    \n[5] \"over <0.05\"   \"over <0.01\"   \"over <0.001\" \n\nlevels(df$pvalue.group)=my.label\n\nggplot(df,aes(x=Var1,y=Var2,fill=pvalue.group))+\n  geom_tile()+geom_text(label=round(df$value,3))+\n  theme_bw()\n\n\n\n## select proper cell colors related to pvalues\nlibrary(\"RColorBrewer\")\n#display all colour schemes\ndisplay.brewer.all()\n\n\n\nmycols=rev(brewer.pal(11,\"RdYlGn\"))\nbarplot(rep(1,length(mycols)),col=mycols)\n\n\n\nmycol=c(mycols[c(1,3,5)],'grey90',mycols[c(7,9,11)])\nbarplot(rep(1,length(mycol)),col=mycol)\n\n\n\np1 = ggplot(df,aes(x=Var1,y=Var2,fill=pvalue.group))+\n  geom_tile()+geom_text(label=round(df$value,3))+\n  theme_bw()+\n  scale_fill_manual(name='Enrichment p-value',values = mycol)\nmy_theme=theme( \n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.border = element_blank(),\n        panel.background = element_blank(),\n        axis.ticks = element_blank(),\n        axis.line = element_blank(),\n        axis.text.x=element_text(size=14,angle=45,hjust=1),\n        axis.text.y=element_text(size=14),\n        axis.title=element_text(size=14,face=\"bold\"),\n        legend.title=element_text(size=14,face=\"bold\"),\n        legend.text=element_text(size=14));\np1+my_theme\n\n\n\np2 = ggplot(df,aes(x=Var1,y=Var2,fill=pvalue.group))+\n  geom_tile()+geom_text(label=round(df$value,3))+\n  theme_bw()+\n  scale_fill_manual(name='Enrichment p-value',\n                    labels = my.sig,\n                    values = mycol)\np2+my_theme\n\n\n\n\nNicely done~\n\n\ndevtools::session_info()\n\n\n─ Session info ─────────────────────────────────────────────────────\n setting  value                       \n version  R version 4.1.0 (2021-05-18)\n os       macOS High Sierra 10.13.6   \n system   x86_64, darwin17.0          \n ui       X11                         \n language (EN)                        \n collate  en_US.UTF-8                 \n ctype    en_US.UTF-8                 \n tz       America/Los_Angeles         \n date     2021-12-11                  \n\n─ Packages ─────────────────────────────────────────────────────────\n package      * version date       lib source        \n assertthat     0.2.1   2019-03-21 [1] CRAN (R 4.1.0)\n bslib          0.2.5.1 2021-05-18 [1] CRAN (R 4.1.0)\n cachem         1.0.5   2021-05-15 [1] CRAN (R 4.1.0)\n callr          3.7.0   2021-04-20 [1] CRAN (R 4.1.0)\n cli            3.0.1   2021-07-17 [1] CRAN (R 4.1.0)\n colorspace     2.0-2   2021-06-24 [1] CRAN (R 4.1.0)\n crayon         1.4.1   2021-02-08 [1] CRAN (R 4.1.0)\n DBI            1.1.1   2021-01-15 [1] CRAN (R 4.1.0)\n desc           1.3.0   2021-03-05 [1] CRAN (R 4.1.0)\n devtools       2.4.2   2021-06-07 [1] CRAN (R 4.1.0)\n digest         0.6.27  2020-10-24 [1] CRAN (R 4.1.0)\n distill        1.3     2021-10-13 [1] CRAN (R 4.1.0)\n downlit        0.4.0   2021-10-29 [1] CRAN (R 4.1.0)\n dplyr          1.0.7   2021-06-18 [1] CRAN (R 4.1.0)\n ellipsis       0.3.2   2021-04-29 [1] CRAN (R 4.1.0)\n evaluate       0.14    2019-05-28 [1] CRAN (R 4.1.0)\n fansi          0.5.0   2021-05-25 [1] CRAN (R 4.1.0)\n farver         2.1.0   2021-02-28 [1] CRAN (R 4.1.0)\n fastmap        1.1.0   2021-01-25 [1] CRAN (R 4.1.0)\n fs             1.5.0   2020-07-31 [1] CRAN (R 4.1.0)\n generics       0.1.0   2020-10-31 [1] CRAN (R 4.1.0)\n ggplot2      * 3.3.5   2021-06-25 [1] CRAN (R 4.1.0)\n glue           1.4.2   2020-08-27 [1] CRAN (R 4.1.0)\n gridExtra    * 2.3     2017-09-09 [1] CRAN (R 4.1.0)\n gtable         0.3.0   2019-03-25 [1] CRAN (R 4.1.0)\n highr          0.9     2021-04-16 [1] CRAN (R 4.1.0)\n htmltools      0.5.1.1 2021-01-22 [1] CRAN (R 4.1.0)\n jquerylib      0.1.4   2021-04-26 [1] CRAN (R 4.1.0)\n jsonlite       1.7.2   2020-12-09 [1] CRAN (R 4.1.0)\n knitr          1.33    2021-04-24 [1] CRAN (R 4.1.0)\n labeling       0.4.2   2020-10-20 [1] CRAN (R 4.1.0)\n lifecycle      1.0.0   2021-02-15 [1] CRAN (R 4.1.0)\n magrittr       2.0.1   2020-11-17 [1] CRAN (R 4.1.0)\n memoise        2.0.0   2021-01-26 [1] CRAN (R 4.1.0)\n munsell        0.5.0   2018-06-12 [1] CRAN (R 4.1.0)\n pillar         1.6.2   2021-07-29 [1] CRAN (R 4.1.0)\n pkgbuild       1.2.0   2020-12-15 [1] CRAN (R 4.1.0)\n pkgconfig      2.0.3   2019-09-22 [1] CRAN (R 4.1.0)\n pkgload        1.2.1   2021-04-06 [1] CRAN (R 4.1.0)\n plyr           1.8.6   2020-03-03 [1] CRAN (R 4.1.0)\n prettyunits    1.1.1   2020-01-24 [1] CRAN (R 4.1.0)\n processx       3.5.2   2021-04-30 [1] CRAN (R 4.1.0)\n ps             1.6.0   2021-02-28 [1] CRAN (R 4.1.0)\n purrr          0.3.4   2020-04-17 [1] CRAN (R 4.1.0)\n R6             2.5.0   2020-10-28 [1] CRAN (R 4.1.0)\n RColorBrewer * 1.1-2   2014-12-07 [1] CRAN (R 4.1.0)\n Rcpp           1.0.7   2021-07-07 [1] CRAN (R 4.1.0)\n remotes        2.4.0   2021-06-02 [1] CRAN (R 4.1.0)\n reshape2       1.4.4   2020-04-09 [1] CRAN (R 4.1.0)\n rlang          0.4.11  2021-04-30 [1] CRAN (R 4.1.0)\n rmarkdown      2.11    2021-09-14 [1] CRAN (R 4.1.0)\n rprojroot      2.0.2   2020-11-15 [1] CRAN (R 4.1.0)\n rstudioapi     0.13    2020-11-12 [1] CRAN (R 4.1.0)\n sass           0.4.0   2021-05-12 [1] CRAN (R 4.1.0)\n scales         1.1.1   2020-05-11 [1] CRAN (R 4.1.0)\n sessioninfo    1.1.1   2018-11-05 [1] CRAN (R 4.1.0)\n stringi        1.7.3   2021-07-16 [1] CRAN (R 4.1.0)\n stringr        1.4.0   2019-02-10 [1] CRAN (R 4.1.0)\n testthat       3.0.4   2021-07-01 [1] CRAN (R 4.1.0)\n tibble         3.1.3   2021-07-23 [1] CRAN (R 4.1.0)\n tidyselect     1.1.1   2021-04-30 [1] CRAN (R 4.1.0)\n usethis        2.0.1   2021-02-10 [1] CRAN (R 4.1.0)\n utf8           1.2.2   2021-07-24 [1] CRAN (R 4.1.0)\n vctrs          0.3.8   2021-04-29 [1] CRAN (R 4.1.0)\n withr          2.4.2   2021-04-18 [1] CRAN (R 4.1.0)\n xfun           0.24    2021-06-15 [1] CRAN (R 4.1.0)\n yaml           2.2.1   2020-02-01 [1] CRAN (R 4.1.0)\n\n[1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library\n\n\n\n\n",
    "preview": "posts/2021-12-11-ggplot-customize-enrichment-heatmap/distill-preview.png",
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-12-11-bioinformatics-use-cases-of-r-package-biomart/",
    "title": "Bioinformatics: biomaRt",
    "description": "Use cases of R package: biomaRt",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-12-09",
    "categories": [],
    "contents": "\nbiomaRt Manual: https://www.bioconductor.org/packages/devel/bioc/vignettes/biomaRt/inst/doc/biomaRt.html\n\n\nlibrary(AnnotationDbi)\nlibrary(org.Dm.eg.db,verbose=F,quietly=T)\n\nlibrary(\"biomaRt\")\nlistMarts()\n\n\n               biomart                version\n1 ENSEMBL_MART_ENSEMBL      Ensembl Genes 105\n2   ENSEMBL_MART_MOUSE      Mouse strains 105\n3     ENSEMBL_MART_SNP  Ensembl Variation 105\n4 ENSEMBL_MART_FUNCGEN Ensembl Regulation 105\n\nensembl <- useMart(\"ensembl\")\n\n## Selecting a BioMart database and dataset\ndatasets <- listDatasets(ensembl)\ndim(datasets)\n\n\n[1] 214   3\n\nhead(datasets)\n\n\n                       dataset                           description\n1 abrachyrhynchus_gene_ensembl Pink-footed goose genes (ASM259213v1)\n2     acalliptera_gene_ensembl      Eastern happy genes (fAstCal1.2)\n3   acarolinensis_gene_ensembl       Green anole genes (AnoCar2.0v2)\n4    acchrysaetos_gene_ensembl       Golden eagle genes (bAquChr1.2)\n5    acitrinellus_gene_ensembl        Midas cichlid genes (Midas_v5)\n6    amelanoleuca_gene_ensembl       Giant panda genes (ASM200744v2)\n      version\n1 ASM259213v1\n2  fAstCal1.2\n3 AnoCar2.0v2\n4  bAquChr1.2\n5    Midas_v5\n6 ASM200744v2\n\ngrep('dmel',datasets$dataset)\n\n\n[1] 55\n\ndatasets[grep('dmel',datasets$dataset),]\n\n\n                      dataset\n55 dmelanogaster_gene_ensembl\n                                description  version\n55 Drosophila melanogaster genes (BDGP6.32) BDGP6.32\n\nensembl = useDataset(\"dmelanogaster_gene_ensembl\",mart=ensembl)\n\n# or in one step:\nensembl = useMart(\"ensembl\",dataset=\"dmelanogaster_gene_ensembl\")\n\n# build a biomaRt query: filters, attributes and values.\n# Filters define a restriction on the query. \nfilters = listFilters(ensembl)\ndim(filters)\n\n\n[1] 327   2\n\nfilters[1:5,]\n\n\n                name                            description\n1    chromosome_name               Chromosome/scaffold name\n2              start                                  Start\n3                end                                    End\n4             strand                                 Strand\n5 chromosomal_region e.g. 1:100:10000:-1, 1:100000:200000:1\n\ngrep('gene',filters$name)\n\n\n [1]  10  11  25  39  43  50  51  66  67 297 316\n\nfilters[grep('gene',filters$name),]\n\n\n                     name\n10   with_flybase_gene_id\n11  with_flybasename_gene\n25        with_entrezgene\n39        ensembl_gene_id\n43     external_gene_name\n50        flybase_gene_id\n51       flybasename_gene\n66   entrezgene_accession\n67          entrezgene_id\n297           with_gene3d\n316                gene3d\n                                                     description\n10                                       With FlyBase gene ID(s)\n11                                  With FlyBase gene name ID(s)\n25                    With NCBI gene (formerly Entrezgene) ID(s)\n39                          Gene stable ID(s) [e.g. FBgn0000003]\n43                                       Gene Name(s) [e.g. drl]\n50                         FlyBase gene ID(s) [e.g. FBgn0000003]\n51                    FlyBase gene name ID(s) [e.g. FBgn0000003]\n66  NCBI gene (formerly Entrezgene) accession(s) [e.g. 10178776]\n67         NCBI gene (formerly Entrezgene) ID(s) [e.g. 10178776]\n297                                            With Gene3D ID(s)\n316                               Gene3D ID(s) [e.g. 1.10.10.10]\n\n# Attributes define the values we are interested in to retrieve\nattributes = listAttributes(ensembl)\ndim(attributes)\n\n\n[1] 2628    3\n\nattributes[1:5,]\n\n\n                   name          description         page\n1       ensembl_gene_id       Gene stable ID feature_page\n2 ensembl_transcript_id Transcript stable ID feature_page\n3    ensembl_peptide_id    Protein stable ID feature_page\n4       ensembl_exon_id       Exon stable ID feature_page\n5           description     Gene description feature_page\n\ngrep('flybase',attributes$name)\n\n\n[1] 37 38 39 40 41 42 43\n\nattributes[grep('flybase',attributes$name),]\n\n\n                      name                 description         page\n37   flybase_annotation_id       FlyBase annotation ID feature_page\n38         flybase_gene_id             FlyBase gene ID feature_page\n39        flybasename_gene        FlyBase gene name ID feature_page\n40   flybase_transcript_id       FlyBase transcript ID feature_page\n41  flybasename_transcript  FlyBase transcript name ID feature_page\n42  flybase_translation_id      FlyBase translation ID feature_page\n43 flybasename_translation FlyBase translation name ID feature_page\n\ngrep('Interpro ID',attributes$description)\n\n\n[1] 109\n\ngrep('PANTHER ID',attributes$description)\n\n\n[1] 79\n\ngrep('Pfam ID',attributes$description)\n\n\n[1] 82\n\ndb<-c('Family','CDD ID','Gene3D ID','HAMAP ID','Interpro ID',\n      'PANTHER ID','Pfam ID','SMART ID','TIGRFAM ID');\nlength(db)\n\n\n[1] 9\n\nlapply(db,function(x){\n  attributes[grep(x,attributes$description),]})\n\n\n[[1]]\n[1] name        description page       \n<0 rows> (or 0-length row.names)\n\n[[2]]\n   name description         page\n70  cdd      CDD ID feature_page\n\n[[3]]\n     name description         page\n73 gene3d   Gene3D ID feature_page\n\n[[4]]\n    name description         page\n76 hamap    HAMAP ID feature_page\n\n[[5]]\n        name description         page\n109 interpro Interpro ID feature_page\n\n[[6]]\n         name description         page\n79 hmmpanther  PANTHER ID feature_page\n\n[[7]]\n   name description         page\n82 pfam     Pfam ID feature_page\n\n[[8]]\n     name description         page\n100 smart    SMART ID feature_page\n\n[[9]]\n       name description         page\n106 tigrfam  TIGRFAM ID feature_page\n\n# The getBM() function is the main query function in biomaRt, which requires four main arguments:\n## attributes: is a vector of attributes that one wants to retrieve (= the output of the query).\n## filters: is a vector of filters that one wil use as input to the query.\n## values: a vector of values for the filters. In case multple filters are in use, the values argument requires a list of values where each position in the list corresponds to the position of the filters in the filters argument (see examples below).\n## mart: is an object of class Mart, which is created by the useMart() function. \n\n## sample some genes from 'org.Dm.eg.db'\n# which kinds of data are retrievable via `select`\ncolumns(org.Dm.eg.db)\n\n\n [1] \"ACCNUM\"       \"ALIAS\"        \"ENSEMBL\"      \"ENSEMBLPROT\" \n [5] \"ENSEMBLTRANS\" \"ENTREZID\"     \"ENZYME\"       \"EVIDENCE\"    \n [9] \"EVIDENCEALL\"  \"FLYBASE\"      \"FLYBASECG\"    \"FLYBASEPROT\" \n[13] \"GENENAME\"     \"GENETYPE\"     \"GO\"           \"GOALL\"       \n[17] \"MAP\"          \"ONTOLOGY\"     \"ONTOLOGYALL\"  \"PATH\"        \n[21] \"PMID\"         \"REFSEQ\"       \"SYMBOL\"       \"UNIPROT\"     \n\n# use keys as query to extract other column information\nset.seed(123)\n(k=sample(keys(org.Dm.eg.db,keytype='ENTREZID'),5))\n\n\n[1] \"3772662\" \"3772719\" \"34651\"   \"33247\"   \"35110\"  \n\ngene.df <- AnnotationDbi::select(org.Dm.eg.db, keys=k, \n                                 keytype = \"ENTREZID\",\n                                 c(\"SYMBOL\",\"FLYBASE\",\"GENENAME\",\"UNIPROT\"))\nhead(gene.df)\n\n\n  ENTREZID  SYMBOL     FLYBASE\n1  3772662  CG7215 FBgn0038571\n2  3772719 CG33964 FBgn0053964\n3    34651    Pkd2 FBgn0041195\n4    33247   Eaat2 FBgn0026438\n5    33247   Eaat2 FBgn0026438\n6    35110    amos FBgn0003270\n                                  GENENAME UNIPROT\n1                  uncharacterized protein  Q9VEC8\n2                  uncharacterized protein  Q86NX3\n3              Polycystic kidney disease 2  Q9VK95\n4      Excitatory amino acid transporter 2  E1JHQ6\n5      Excitatory amino acid transporter 2  Q9VPS6\n6 absent MD neurons and olfactory sensilla  Q9Y0A7\n\nout<-getBM(attributes=c('entrezgene_id','flybase_gene_id','flybasename_gene',\n                        'pfam', 'interpro','hmmpanther'), \n      filters = 'entrezgene_id', \n      values = gene.df$ENTREZID, \n      mart = ensembl)\nhead(out)\n\n\n  entrezgene_id flybase_gene_id flybasename_gene    pfam  interpro\n1         35110     FBgn0003270      FBgn0003270 PF00010 IPR011598\n2         35110     FBgn0003270      FBgn0003270 PF00010 IPR036638\n3         35110     FBgn0003270      FBgn0003270 PF00010 IPR011598\n4         35110     FBgn0003270      FBgn0003270 PF00010 IPR036638\n5         34651     FBgn0041195      FBgn0041195 PF08016 IPR013122\n6         34651     FBgn0041195      FBgn0041195 PF08016 IPR013122\n       hmmpanther\n1       PTHR19290\n2       PTHR19290\n3 PTHR19290:SF151\n4 PTHR19290:SF151\n5 PTHR10877:SF114\n6       PTHR10877\n\n## Searching for datasets, filters and attributes\nsearchDatasets(mart = ensembl, pattern = \"dmel\")\n\n\n                      dataset\n55 dmelanogaster_gene_ensembl\n                                description  version\n55 Drosophila melanogaster genes (BDGP6.32) BDGP6.32\n\nsearchAttributes(mart = ensembl, pattern = \"dmel\")\n\n\n                                                   name\n2564                 dmelanogaster_paralog_ensembl_gene\n2565         dmelanogaster_paralog_associated_gene_name\n2566              dmelanogaster_paralog_ensembl_peptide\n2567                   dmelanogaster_paralog_chromosome\n2568                  dmelanogaster_paralog_chrom_start\n2569                    dmelanogaster_paralog_chrom_end\n2570 dmelanogaster_paralog_canonical_transcript_protein\n2571                      dmelanogaster_paralog_subtype\n2572               dmelanogaster_paralog_orthology_type\n2573                      dmelanogaster_paralog_perc_id\n2574                   dmelanogaster_paralog_perc_id_r1\n                                                                    description\n2564                           Drosophila melanogaster paralogue gene stable ID\n2565                     Drosophila melanogaster paralogue associated gene name\n2566                 Drosophila melanogaster paralogue protein or transcript ID\n2567                 Drosophila melanogaster paralogue chromosome/scaffold name\n2568           Drosophila melanogaster paralogue chromosome/scaffold start (bp)\n2569             Drosophila melanogaster paralogue chromosome/scaffold end (bp)\n2570                                   Paralogue query protein or transcript ID\n2571                Paralogue last common ancestor with Drosophila melanogaster\n2572                            Drosophila melanogaster paralogue homology type\n2573 Paralogue %id. target Drosophila melanogaster gene identical to query gene\n2574 Paralogue %id. query gene identical to target Drosophila melanogaster gene\n         page\n2564 homologs\n2565 homologs\n2566 homologs\n2567 homologs\n2568 homologs\n2569 homologs\n2570 homologs\n2571 homologs\n2572 homologs\n2573 homologs\n2574 homologs\n\nsearchFilters(mart = ensembl, pattern = \"ensembl.*id\")\n\n\n                    name\n39       ensembl_gene_id\n40 ensembl_transcript_id\n41    ensembl_peptide_id\n42       ensembl_exon_id\n                                        description\n39             Gene stable ID(s) [e.g. FBgn0000003]\n40 Transcript stable ID(s) [e.g. FBgn0013687_df_pt]\n41          Protein stable ID(s) [e.g. FBpp0070000]\n42           Exon ID(s) [e.g. FBgn0013687_df_pt-E1]\n\n## Attribute Pages\npages = attributePages(ensembl)\npages\n\n\n[1] \"feature_page\" \"structure\"    \"homologs\"     \"sequences\"   \n\nhead(listAttributes(ensembl, page=\"feature_page\"))\n\n\n                   name              description         page\n1       ensembl_gene_id           Gene stable ID feature_page\n2 ensembl_transcript_id     Transcript stable ID feature_page\n3    ensembl_peptide_id        Protein stable ID feature_page\n4       ensembl_exon_id           Exon stable ID feature_page\n5           description         Gene description feature_page\n6       chromosome_name Chromosome/scaffold name feature_page\n\n\n\ndevtools::session_info()\n\n\n─ Session info ─────────────────────────────────────────────────────\n setting  value                       \n version  R version 4.1.0 (2021-05-18)\n os       macOS High Sierra 10.13.6   \n system   x86_64, darwin17.0          \n ui       X11                         \n language (EN)                        \n collate  en_US.UTF-8                 \n ctype    en_US.UTF-8                 \n tz       America/Los_Angeles         \n date     2021-12-11                  \n\n─ Packages ─────────────────────────────────────────────────────────\n package          * version  date       lib source        \n AnnotationDbi    * 1.54.1   2021-06-08 [1] Bioconductor  \n assertthat         0.2.1    2019-03-21 [1] CRAN (R 4.1.0)\n Biobase          * 2.52.0   2021-05-19 [1] Bioconductor  \n BiocFileCache      2.0.0    2021-05-19 [1] Bioconductor  \n BiocGenerics     * 0.38.0   2021-05-19 [1] Bioconductor  \n biomaRt          * 2.48.2   2021-07-01 [1] Bioconductor  \n Biostrings         2.60.1   2021-06-06 [1] Bioconductor  \n bit                4.0.4    2020-08-04 [1] CRAN (R 4.1.0)\n bit64              4.0.5    2020-08-30 [1] CRAN (R 4.1.0)\n bitops             1.0-7    2021-04-24 [1] CRAN (R 4.1.0)\n blob               1.2.1    2020-01-20 [1] CRAN (R 4.1.0)\n bslib              0.2.5.1  2021-05-18 [1] CRAN (R 4.1.0)\n cachem             1.0.5    2021-05-15 [1] CRAN (R 4.1.0)\n callr              3.7.0    2021-04-20 [1] CRAN (R 4.1.0)\n cli                3.0.1    2021-07-17 [1] CRAN (R 4.1.0)\n crayon             1.4.1    2021-02-08 [1] CRAN (R 4.1.0)\n curl               4.3.2    2021-06-23 [1] CRAN (R 4.1.0)\n DBI                1.1.1    2021-01-15 [1] CRAN (R 4.1.0)\n dbplyr             2.1.1    2021-04-06 [1] CRAN (R 4.1.0)\n desc               1.3.0    2021-03-05 [1] CRAN (R 4.1.0)\n devtools           2.4.2    2021-06-07 [1] CRAN (R 4.1.0)\n digest             0.6.27   2020-10-24 [1] CRAN (R 4.1.0)\n distill            1.3      2021-10-13 [1] CRAN (R 4.1.0)\n downlit            0.4.0    2021-10-29 [1] CRAN (R 4.1.0)\n dplyr              1.0.7    2021-06-18 [1] CRAN (R 4.1.0)\n ellipsis           0.3.2    2021-04-29 [1] CRAN (R 4.1.0)\n evaluate           0.14     2019-05-28 [1] CRAN (R 4.1.0)\n fansi              0.5.0    2021-05-25 [1] CRAN (R 4.1.0)\n fastmap            1.1.0    2021-01-25 [1] CRAN (R 4.1.0)\n filelock           1.0.2    2018-10-05 [1] CRAN (R 4.1.0)\n fs                 1.5.0    2020-07-31 [1] CRAN (R 4.1.0)\n generics           0.1.0    2020-10-31 [1] CRAN (R 4.1.0)\n GenomeInfoDb       1.28.1   2021-07-01 [1] Bioconductor  \n GenomeInfoDbData   1.2.6    2021-07-11 [1] Bioconductor  \n glue               1.4.2    2020-08-27 [1] CRAN (R 4.1.0)\n hms                1.1.0    2021-05-17 [1] CRAN (R 4.1.0)\n htmltools          0.5.1.1  2021-01-22 [1] CRAN (R 4.1.0)\n httr               1.4.2    2020-07-20 [1] CRAN (R 4.1.0)\n IRanges          * 2.26.0   2021-05-19 [1] Bioconductor  \n jquerylib          0.1.4    2021-04-26 [1] CRAN (R 4.1.0)\n jsonlite           1.7.2    2020-12-09 [1] CRAN (R 4.1.0)\n KEGGREST           1.32.0   2021-05-19 [1] Bioconductor  \n knitr              1.33     2021-04-24 [1] CRAN (R 4.1.0)\n lifecycle          1.0.0    2021-02-15 [1] CRAN (R 4.1.0)\n magrittr           2.0.1    2020-11-17 [1] CRAN (R 4.1.0)\n memoise            2.0.0    2021-01-26 [1] CRAN (R 4.1.0)\n org.Dm.eg.db     * 3.13.0   2021-07-11 [1] Bioconductor  \n pillar             1.6.2    2021-07-29 [1] CRAN (R 4.1.0)\n pkgbuild           1.2.0    2020-12-15 [1] CRAN (R 4.1.0)\n pkgconfig          2.0.3    2019-09-22 [1] CRAN (R 4.1.0)\n pkgload            1.2.1    2021-04-06 [1] CRAN (R 4.1.0)\n png                0.1-7    2013-12-03 [1] CRAN (R 4.1.0)\n prettyunits        1.1.1    2020-01-24 [1] CRAN (R 4.1.0)\n processx           3.5.2    2021-04-30 [1] CRAN (R 4.1.0)\n progress           1.2.2    2019-05-16 [1] CRAN (R 4.1.0)\n ps                 1.6.0    2021-02-28 [1] CRAN (R 4.1.0)\n purrr              0.3.4    2020-04-17 [1] CRAN (R 4.1.0)\n R6                 2.5.0    2020-10-28 [1] CRAN (R 4.1.0)\n rappdirs           0.3.3    2021-01-31 [1] CRAN (R 4.1.0)\n Rcpp               1.0.7    2021-07-07 [1] CRAN (R 4.1.0)\n RCurl              1.98-1.3 2021-03-16 [1] CRAN (R 4.1.0)\n remotes            2.4.0    2021-06-02 [1] CRAN (R 4.1.0)\n rlang              0.4.11   2021-04-30 [1] CRAN (R 4.1.0)\n rmarkdown          2.11     2021-09-14 [1] CRAN (R 4.1.0)\n rprojroot          2.0.2    2020-11-15 [1] CRAN (R 4.1.0)\n RSQLite            2.2.7    2021-04-22 [1] CRAN (R 4.1.0)\n rstudioapi         0.13     2020-11-12 [1] CRAN (R 4.1.0)\n S4Vectors        * 0.30.0   2021-05-19 [1] Bioconductor  \n sass               0.4.0    2021-05-12 [1] CRAN (R 4.1.0)\n sessioninfo        1.1.1    2018-11-05 [1] CRAN (R 4.1.0)\n stringi            1.7.3    2021-07-16 [1] CRAN (R 4.1.0)\n stringr            1.4.0    2019-02-10 [1] CRAN (R 4.1.0)\n testthat           3.0.4    2021-07-01 [1] CRAN (R 4.1.0)\n tibble             3.1.3    2021-07-23 [1] CRAN (R 4.1.0)\n tidyselect         1.1.1    2021-04-30 [1] CRAN (R 4.1.0)\n usethis            2.0.1    2021-02-10 [1] CRAN (R 4.1.0)\n utf8               1.2.2    2021-07-24 [1] CRAN (R 4.1.0)\n vctrs              0.3.8    2021-04-29 [1] CRAN (R 4.1.0)\n withr              2.4.2    2021-04-18 [1] CRAN (R 4.1.0)\n xfun               0.24     2021-06-15 [1] CRAN (R 4.1.0)\n XML                3.99-0.6 2021-03-16 [1] CRAN (R 4.1.0)\n xml2               1.3.2    2020-04-23 [1] CRAN (R 4.1.0)\n XVector            0.32.0   2021-05-19 [1] Bioconductor  \n yaml               2.2.1    2020-02-01 [1] CRAN (R 4.1.0)\n zlibbioc           1.38.0   2021-05-19 [1] Bioconductor  \n\n[1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-12-11-bioinformatics-use-cases-of-r-packages-godb-annotationdbi-and-clusterprofiler/",
    "title": "Bioinformatics: GO.db, AnnotationDbi, and clusterProfiler",
    "description": "Use cases of R packages: GO.db, AnnotationDbi, and clusterProfiler",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-12-08",
    "categories": [],
    "contents": "\n\nContents\nfly gene ID mapping via the ‘select’ function\nextracting all fly genes and their annotated GO terms\nretrieve GO term full descriptions\nGO enrichment analysis and visualization\n\n\n\n# load libraries\nlibrary(GO.db);\nlibrary(AnnotationDbi);\nlibrary(clusterProfiler);\nlibrary(org.Dm.eg.db,verbose=F,quietly=T);\nlibrary(ggplot2)\n\n\n\nfly gene ID mapping via the ‘select’ function\n\n\n# which kinds of data are retrievable via `select`\ncolumns(org.Dm.eg.db)\n\n\n [1] \"ACCNUM\"       \"ALIAS\"        \"ENSEMBL\"      \"ENSEMBLPROT\" \n [5] \"ENSEMBLTRANS\" \"ENTREZID\"     \"ENZYME\"       \"EVIDENCE\"    \n [9] \"EVIDENCEALL\"  \"FLYBASE\"      \"FLYBASECG\"    \"FLYBASEPROT\" \n[13] \"GENENAME\"     \"GENETYPE\"     \"GO\"           \"GOALL\"       \n[17] \"MAP\"          \"ONTOLOGY\"     \"ONTOLOGYALL\"  \"PATH\"        \n[21] \"PMID\"         \"REFSEQ\"       \"SYMBOL\"       \"UNIPROT\"     \n\n# use keys as query to extract other column information\nset.seed(123)\n(k=sample(keys(org.Dm.eg.db,keytype='SYMBOL'),5))\n\n\n[1] \"CG7215\"  \"CG33964\" \"Pkd2\"    \"Eaat2\"   \"amos\"   \n\nAnnotationDbi::select(org.Dm.eg.db,keys=k,keytype=\"SYMBOL\",c(\"FLYBASE\",\"GENENAME\"))\n\n\n   SYMBOL     FLYBASE                                 GENENAME\n1  CG7215 FBgn0038571                  uncharacterized protein\n2 CG33964 FBgn0053964                  uncharacterized protein\n3    Pkd2 FBgn0041195              Polycystic kidney disease 2\n4   Eaat2 FBgn0026438      Excitatory amino acid transporter 2\n5    amos FBgn0003270 absent MD neurons and olfactory sensilla\n\nextracting all fly genes and their annotated GO terms\n\n\nall.fly.genes<-keys(org.Dm.eg.db,\"FLYBASE\")\nlength(all.fly.genes)\n\n\n[1] 25097\n\nfb2go=AnnotationDbi::select(org.Dm.eg.db,keys=all.fly.genes,keytype = 'FLYBASE',\n             columns = c('GO'))\nhead(fb2go)\n\n\n      FLYBASE         GO EVIDENCE ONTOLOGY\n1 FBgn0040373 GO:0005794      IBA       CC\n2 FBgn0040373 GO:0006486      IBA       BP\n3 FBgn0040373 GO:0008375      IBA       MF\n4 FBgn0040373 GO:0008376      IBA       MF\n5 FBgn0040373 GO:0008378      IEA       MF\n6 FBgn0040373 GO:0016020      IEA       CC\n\nx<-split(fb2go$GO,f=fb2go$FLYBASE)\nx[c(1,2,3)]\n\n\n$FBgn0000001\n[1] NA\n\n$FBgn0000003\n[1] \"GO:0005786\" \"GO:0006614\"\n\n$FBgn0000008\n[1] \"GO:0003674\" \"GO:0005912\" \"GO:0016324\" \"GO:0048749\"\n\nhist(sapply(x,length),xlab='#GO term per gene')\n\n\n\ngo2fb <- split( fb2go$FLYBASE,f=as.factor( fb2go$GO) )\nstr(go2fb[1:3], vec.len=3)\n\n\nList of 3\n $ GO:0000001: chr [1:4] \"FBgn0029891\" \"FBgn0004406\" \"FBgn0033690\" ...\n $ GO:0000002: chr [1:6] \"FBgn0032154\" \"FBgn0040268\" \"FBgn0010438\" ...\n $ GO:0000003: chr [1:4] \"FBgn0023509\" \"FBgn0003742\" \"FBgn0003742\" ...\n\nretrieve GO term full descriptions\n\n\n# GO.db usaage info: https://www.bioconductor.org/packages/release/bioc/vignettes/annotate/inst/doc/GOusage.pdf\n# which can be used by `select`\ncolumns(GO.db)\n\n\n[1] \"DEFINITION\" \"GOID\"       \"ONTOLOGY\"   \"TERM\"      \n\nset.seed(111)\ngo.id<-sample(keys(GO.db,keytype = 'GOID'),5);\nAnnotationDbi::select(GO.db,keys=go.id,keytype ='GOID',\n                        columns=c(\"DEFINITION\",\"ONTOLOGY\",\"TERM\"));\n\n\n        GOID\n1 GO:0098908\n2 GO:0060731\n3 GO:0102745\n4 GO:0009112\n5 GO:1902360\n                                                                                                                                                                                                                          DEFINITION\n1   Any process that modulates the frequency, rate or extent of action potential creation, propagation or termination in a neuron. This typically occurs via modulation of the activity or expression of voltage-gated ion channels.\n2                   Any process the increases the rate, frequency or extent of intestinal epithelial structure maintenance, a tissue homeostatic process required for the maintenance of the structure of the intestinal epithelium.\n3                                                                                                                             Catalysis of the reaction: H+ + dihydrogeranylgeranyl-PP + NADPH = tetrahydrogeranylgeranyl-PP + NADP.\n4 The chemical reactions and pathways involving a nucleobase, a nitrogenous base that is a constituent of a nucleic acid, e.g. the purines: adenine, guanine, hypoxanthine, xanthine and the pyrimidines: cytosine, uracil, thymine.\n5                                                                                                                                                                                                                               <NA>\n  ONTOLOGY\n1       BP\n2       BP\n3       MF\n4       BP\n5       BP\n                                                                             TERM\n1                                         regulation of neuronal action potential\n2              positive regulation of intestinal epithelial structure maintenance\n3                                     dihydrogeranylgeranyl-PP reductase activity\n4                                                    nucleobase metabolic process\n5 conversion of ds siRNA to ss siRNA involved in chromatin silencing by small RNA\n\nGO enrichment analysis and visualization\n\n\ntest.genes=c(\"ATPsynC\",\"ATPsyngamma\",\"blw\",\"COX6B\",\"COX7A\",\"Cyt-c-p\",\"porin\",\"sesB\");\ngene.df <- clusterProfiler::bitr(test.genes, fromType = \"SYMBOL\",\n                                 toType = c(\"ENTREZID\",\"FLYBASE\",\"GENENAME\"),\n                                 OrgDb = org.Dm.eg.db)\nego <- enrichGO(gene          = gene.df$ENTREZID,\n                OrgDb         = org.Dm.eg.db,\n                #keyType  = 'SYMBOL',\n                ont           = \"BP\",\n                #ont           = \"MF\", \n                #ont           = \"CC\", \n                pAdjustMethod = \"BH\",\n                pvalueCutoff  = 0.05,\n                qvalueCutoff  = 0.05,\n                readable      = TRUE)\n\n#use simplify to remove redudant GO terms, a larger cutoff leads to a smaller number of returned GO terms\n#ref: https://guangchuangyu.github.io/2015/10/use-simplify-to-remove-redundancy-of-enriched-go-terms/\nx<-simplify(ego, cutoff=0.7, by=\"p.adjust\", select_fun=min)\nresult<-x@result[order(x@result$p.adjust),]\n\nx1=result;\nx1$GeneRatio1=x1$GeneRatio\nx1$GeneRatio=sapply(x1$GeneRatio,function(x){\n  p=as.numeric(unlist(strsplit(x,'/')))\n  p[1]/p[2]\n})\nsummary(x1$GeneRatio)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.1250  0.1250  0.2500  0.2847  0.5000  0.7500 \n\nx1=x1[order(x1$p.adjust),]\nx1$desp=factor(x1$Description,levels=rev(x1$Description))\n\nggplot(subset(x1,Count>=3),aes(x=GeneRatio,y=desp,size=Count,col=p.adjust))+\n  geom_point()+theme_bw(base_size=10)+\n  scale_color_gradient(low=\"blue\", high=\"red\")+\n  scale_size(range = c(1,4))+\n  ylab('Biological Process GO enrichment analysis ')+\n  ggtitle('GO enrichment')+\n  theme(\n    plot.title =element_text(size=9, face='bold'),\n    panel.grid = element_blank(),\n    axis.text=element_text(size=9),\n    axis.title=element_text(size=9),\n    axis.text.x=element_text(size=9,angle=45, hjust=1),\n    axis.text.y=element_text(size=9,angle=0, hjust=1),\n    axis.ticks.y = element_blank())\n\n\n\n\n\n\np.adj.cutoff=0.001;\np.line = -1*log(p.adj.cutoff,base=10)\nx1$log.p.adjust = -1*log(x1$p.adjust,base=10)\n\nggplot(x1,aes(x=desp,y=log.p.adjust,col=log.p.adjust))+\n      geom_bar(aes(fill=log.p.adjust),stat='identity',width = 0.1)+\n      theme_bw(base_size=10)+ylab('-log10(p.adjust)')+xlab('')+\n      scale_color_distiller(name='',palette = \"RdYlBu\")+\n      scale_fill_distiller(name='',palette = \"RdYlBu\")+\n      #scale_color_distiller(name='',palette = \"Dark2\")+\n      geom_point(size=3)+coord_flip()+\n      geom_hline(yintercept = p.line, linetype=\"dashed\", \n                 color = \"black\", size=0.3)+\n      theme(legend.position = 'none',\n            axis.title = element_text(size=9),\n            axis.text.y=element_text(size=6,face=\"bold\"),\n            axis.text.x=element_text(size=9),\n            panel.grid.major = element_blank(),\n            panel.grid.minor = element_blank())\n\n\n\n\n\n\ndevtools::session_info()\n\n\n─ Session info ─────────────────────────────────────────────────────\n setting  value                       \n version  R version 4.1.0 (2021-05-18)\n os       macOS High Sierra 10.13.6   \n system   x86_64, darwin17.0          \n ui       X11                         \n language (EN)                        \n collate  en_US.UTF-8                 \n ctype    en_US.UTF-8                 \n tz       America/Los_Angeles         \n date     2021-12-11                  \n\n─ Packages ─────────────────────────────────────────────────────────\n package          * version  date       lib source        \n AnnotationDbi    * 1.54.1   2021-06-08 [1] Bioconductor  \n ape                5.5      2021-04-25 [1] CRAN (R 4.1.0)\n aplot              0.0.6    2020-09-03 [1] CRAN (R 4.1.0)\n assertthat         0.2.1    2019-03-21 [1] CRAN (R 4.1.0)\n Biobase          * 2.52.0   2021-05-19 [1] Bioconductor  \n BiocGenerics     * 0.38.0   2021-05-19 [1] Bioconductor  \n BiocManager        1.30.16  2021-06-15 [1] CRAN (R 4.1.0)\n BiocParallel       1.26.1   2021-07-04 [1] Bioconductor  \n Biostrings         2.60.1   2021-06-06 [1] Bioconductor  \n bit                4.0.4    2020-08-04 [1] CRAN (R 4.1.0)\n bit64              4.0.5    2020-08-30 [1] CRAN (R 4.1.0)\n bitops             1.0-7    2021-04-24 [1] CRAN (R 4.1.0)\n blob               1.2.1    2020-01-20 [1] CRAN (R 4.1.0)\n bslib              0.2.5.1  2021-05-18 [1] CRAN (R 4.1.0)\n cachem             1.0.5    2021-05-15 [1] CRAN (R 4.1.0)\n callr              3.7.0    2021-04-20 [1] CRAN (R 4.1.0)\n cli                3.0.1    2021-07-17 [1] CRAN (R 4.1.0)\n clusterProfiler  * 4.0.2    2021-07-06 [1] Bioconductor  \n colorspace         2.0-2    2021-06-24 [1] CRAN (R 4.1.0)\n cowplot            1.1.1    2020-12-30 [1] CRAN (R 4.1.0)\n crayon             1.4.1    2021-02-08 [1] CRAN (R 4.1.0)\n data.table         1.14.0   2021-02-21 [1] CRAN (R 4.1.0)\n DBI                1.1.1    2021-01-15 [1] CRAN (R 4.1.0)\n desc               1.3.0    2021-03-05 [1] CRAN (R 4.1.0)\n devtools           2.4.2    2021-06-07 [1] CRAN (R 4.1.0)\n digest             0.6.27   2020-10-24 [1] CRAN (R 4.1.0)\n distill            1.3      2021-10-13 [1] CRAN (R 4.1.0)\n DO.db              2.9      2021-07-12 [1] Bioconductor  \n DOSE               3.18.1   2021-06-22 [1] Bioconductor  \n downlit            0.4.0    2021-10-29 [1] CRAN (R 4.1.0)\n downloader         0.4      2015-07-09 [1] CRAN (R 4.1.0)\n dplyr              1.0.7    2021-06-18 [1] CRAN (R 4.1.0)\n ellipsis           0.3.2    2021-04-29 [1] CRAN (R 4.1.0)\n enrichplot         1.12.2   2021-07-01 [1] Bioconductor  \n evaluate           0.14     2019-05-28 [1] CRAN (R 4.1.0)\n fansi              0.5.0    2021-05-25 [1] CRAN (R 4.1.0)\n farver             2.1.0    2021-02-28 [1] CRAN (R 4.1.0)\n fastmap            1.1.0    2021-01-25 [1] CRAN (R 4.1.0)\n fastmatch          1.1-0    2017-01-28 [1] CRAN (R 4.1.0)\n fgsea              1.18.0   2021-05-19 [1] Bioconductor  \n fs                 1.5.0    2020-07-31 [1] CRAN (R 4.1.0)\n generics           0.1.0    2020-10-31 [1] CRAN (R 4.1.0)\n GenomeInfoDb       1.28.1   2021-07-01 [1] Bioconductor  \n GenomeInfoDbData   1.2.6    2021-07-11 [1] Bioconductor  \n ggforce            0.3.3    2021-03-05 [1] CRAN (R 4.1.0)\n ggplot2          * 3.3.5    2021-06-25 [1] CRAN (R 4.1.0)\n ggraph             2.0.5    2021-02-23 [1] CRAN (R 4.1.0)\n ggrepel            0.9.1    2021-01-15 [1] CRAN (R 4.1.0)\n ggtree             3.0.2    2021-06-01 [1] Bioconductor  \n glue               1.4.2    2020-08-27 [1] CRAN (R 4.1.0)\n GO.db            * 3.13.0   2021-07-11 [1] Bioconductor  \n GOSemSim           2.18.0   2021-05-19 [1] Bioconductor  \n graphlayouts       0.7.1    2020-10-26 [1] CRAN (R 4.1.0)\n gridExtra          2.3      2017-09-09 [1] CRAN (R 4.1.0)\n gtable             0.3.0    2019-03-25 [1] CRAN (R 4.1.0)\n highr              0.9      2021-04-16 [1] CRAN (R 4.1.0)\n htmltools          0.5.1.1  2021-01-22 [1] CRAN (R 4.1.0)\n httr               1.4.2    2020-07-20 [1] CRAN (R 4.1.0)\n igraph             1.2.6    2020-10-06 [1] CRAN (R 4.1.0)\n IRanges          * 2.26.0   2021-05-19 [1] Bioconductor  \n jquerylib          0.1.4    2021-04-26 [1] CRAN (R 4.1.0)\n jsonlite           1.7.2    2020-12-09 [1] CRAN (R 4.1.0)\n KEGGREST           1.32.0   2021-05-19 [1] Bioconductor  \n knitr              1.33     2021-04-24 [1] CRAN (R 4.1.0)\n labeling           0.4.2    2020-10-20 [1] CRAN (R 4.1.0)\n lattice            0.20-44  2021-05-02 [1] CRAN (R 4.1.0)\n lazyeval           0.2.2    2019-03-15 [1] CRAN (R 4.1.0)\n lifecycle          1.0.0    2021-02-15 [1] CRAN (R 4.1.0)\n magrittr           2.0.1    2020-11-17 [1] CRAN (R 4.1.0)\n MASS               7.3-54   2021-05-03 [1] CRAN (R 4.1.0)\n Matrix             1.3-4    2021-06-01 [1] CRAN (R 4.1.0)\n memoise            2.0.0    2021-01-26 [1] CRAN (R 4.1.0)\n munsell            0.5.0    2018-06-12 [1] CRAN (R 4.1.0)\n nlme               3.1-152  2021-02-04 [1] CRAN (R 4.1.0)\n org.Dm.eg.db     * 3.13.0   2021-07-11 [1] Bioconductor  \n patchwork          1.1.1    2020-12-17 [1] CRAN (R 4.1.0)\n pillar             1.6.2    2021-07-29 [1] CRAN (R 4.1.0)\n pkgbuild           1.2.0    2020-12-15 [1] CRAN (R 4.1.0)\n pkgconfig          2.0.3    2019-09-22 [1] CRAN (R 4.1.0)\n pkgload            1.2.1    2021-04-06 [1] CRAN (R 4.1.0)\n plyr               1.8.6    2020-03-03 [1] CRAN (R 4.1.0)\n png                0.1-7    2013-12-03 [1] CRAN (R 4.1.0)\n polyclip           1.10-0   2019-03-14 [1] CRAN (R 4.1.0)\n prettyunits        1.1.1    2020-01-24 [1] CRAN (R 4.1.0)\n processx           3.5.2    2021-04-30 [1] CRAN (R 4.1.0)\n ps                 1.6.0    2021-02-28 [1] CRAN (R 4.1.0)\n purrr              0.3.4    2020-04-17 [1] CRAN (R 4.1.0)\n qvalue             2.24.0   2021-05-19 [1] Bioconductor  \n R6                 2.5.0    2020-10-28 [1] CRAN (R 4.1.0)\n RColorBrewer       1.1-2    2014-12-07 [1] CRAN (R 4.1.0)\n Rcpp               1.0.7    2021-07-07 [1] CRAN (R 4.1.0)\n RCurl              1.98-1.3 2021-03-16 [1] CRAN (R 4.1.0)\n remotes            2.4.0    2021-06-02 [1] CRAN (R 4.1.0)\n reshape2           1.4.4    2020-04-09 [1] CRAN (R 4.1.0)\n rlang              0.4.11   2021-04-30 [1] CRAN (R 4.1.0)\n rmarkdown          2.11     2021-09-14 [1] CRAN (R 4.1.0)\n rprojroot          2.0.2    2020-11-15 [1] CRAN (R 4.1.0)\n RSQLite            2.2.7    2021-04-22 [1] CRAN (R 4.1.0)\n rstudioapi         0.13     2020-11-12 [1] CRAN (R 4.1.0)\n rvcheck            0.1.8    2020-03-01 [1] CRAN (R 4.1.0)\n S4Vectors        * 0.30.0   2021-05-19 [1] Bioconductor  \n sass               0.4.0    2021-05-12 [1] CRAN (R 4.1.0)\n scales             1.1.1    2020-05-11 [1] CRAN (R 4.1.0)\n scatterpie         0.1.6    2021-04-23 [1] CRAN (R 4.1.0)\n sessioninfo        1.1.1    2018-11-05 [1] CRAN (R 4.1.0)\n shadowtext         0.0.8    2021-04-23 [1] CRAN (R 4.1.0)\n stringi            1.7.3    2021-07-16 [1] CRAN (R 4.1.0)\n stringr            1.4.0    2019-02-10 [1] CRAN (R 4.1.0)\n testthat           3.0.4    2021-07-01 [1] CRAN (R 4.1.0)\n tibble             3.1.3    2021-07-23 [1] CRAN (R 4.1.0)\n tidygraph          1.2.0    2020-05-12 [1] CRAN (R 4.1.0)\n tidyr              1.1.3    2021-03-03 [1] CRAN (R 4.1.0)\n tidyselect         1.1.1    2021-04-30 [1] CRAN (R 4.1.0)\n tidytree           0.3.4    2021-05-22 [1] CRAN (R 4.1.0)\n treeio             1.16.1   2021-05-23 [1] Bioconductor  \n tweenr             1.0.2    2021-03-23 [1] CRAN (R 4.1.0)\n usethis            2.0.1    2021-02-10 [1] CRAN (R 4.1.0)\n utf8               1.2.2    2021-07-24 [1] CRAN (R 4.1.0)\n vctrs              0.3.8    2021-04-29 [1] CRAN (R 4.1.0)\n viridis            0.6.1    2021-05-11 [1] CRAN (R 4.1.0)\n viridisLite        0.4.0    2021-04-13 [1] CRAN (R 4.1.0)\n withr              2.4.2    2021-04-18 [1] CRAN (R 4.1.0)\n xfun               0.24     2021-06-15 [1] CRAN (R 4.1.0)\n XVector            0.32.0   2021-05-19 [1] Bioconductor  \n yaml               2.2.1    2020-02-01 [1] CRAN (R 4.1.0)\n zlibbioc           1.38.0   2021-05-19 [1] Bioconductor  \n\n[1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library\n\n\n\n\n",
    "preview": "posts/2021-12-11-bioinformatics-use-cases-of-r-packages-godb-annotationdbi-and-clusterprofiler/distill-preview.png",
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-12-11-image-analysis-measuring-fly-eye-size-using-r/",
    "title": "Image analysis: Measuring fly eye size using R",
    "description": "Use R to extract image features",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-12-04",
    "categories": [],
    "contents": "\nI’ve gained some image processing experience while doing a project using fly to study human Alzheimer’s disease.\nIn that project, we contructed transgenic flies and used the ‘GAL4/UAS system’ to express human pathogenic proteins, Abeta and Tau, in fly eyes. We found, the fly eye degeneration manifested at different levels depending partly on the fly genetic background.\nWe hypothesized that different genetic backgrounds play a role in ‘disease manifestation’ and further performed GWAS to identify candidate modifier genes, which could serve as a potential target genes for tranlational medicine to aid human Alzheimer research.\n(Project Github link: https://github.com/mingwhy/AD_fly_eye/tree/main/00_fly.eye.pat)\nWhile in that project, I’ve implemented a different approch to analyze those degenerative fly eye images, several things actully came along.\nOne interesting analysis is how to measurure fly eye size/area in a automatic way.\nIn this post, I’d showed my code fulfilling this goal.\nImage files, R code and R markdown file could be assessed on my github: https://github.com/mingwhy/bioinfo_homemade_tools/tree/main/measure.fly.eye.size\nLet the party begin~\n\n\nlibrary(lattice);library(ggplot2);\nlibrary(sp) #for points.in.polygon\nlibrary(raster) #for pointDistance\nlibrary(tiff);library(EBImage);library(Gmedian);\nlibrary(ggplot2);library(gridExtra)\n\n\n\n\n\n\n\n\n# source supporting functions and input, output folder path\nsource(\"./local-image-segmentation-func.R\")\npath.in=\"./6figs-for-test/\";\npath.out=\"./6figs-for-test-out/\";\n\n\n\n\n\n# collect images\nimages <- list.files(path=path.in,pattern=\"*jpg$\", full.name=F)\nprint(images);\n\n\n[1] \"fig101.jpg\" \"fig102.jpg\" \"fig103.jpg\" \"fig104.jpg\" \"fig105.jpg\"\n[6] \"fig106.jpg\"\n\nn.images=length(images);\n\n# read in images\ntiffFiles=paste(path.in,images,sep='/');\ntiffList <- lapply(tiffFiles, readImage)\n\n# Resize to fit memory\ntiffRes <- lapply(tiffList, resFunc)\nrm(tiffList); invisible(gc()) # free memory space\n\n# quick check for image objects dimensions\nlapply(tiffRes, function(x){ dim(x)} )\n\n\n[[1]]\n[1] 640 480   3\n\n[[2]]\n[1] 640 480   3\n\n[[3]]\n[1] 640 480   3\n\n[[4]]\n[1] 640 480   3\n\n[[5]]\n[1] 640 480   3\n\n[[6]]\n[1] 640 480   3\n\n# Assign resized images RGB channels to data frames\ntiffOri <- lapply(tiffRes, RGBintoDF)\n\n# White TopHat morphological transform\ntiffTop <- lapply(tiffRes, function(x) wTopHat(x,y=5,z='diamond'))\n# select different channels\ntiffGreen<- lapply(tiffRes, function(x) channel(x, \"green\"))\ntiffRed<- lapply(tiffRes, function(x) channel(x, \"red\"))\n\n# display example images and select the proper transformation or channel\npar(mfcol=c(2,3))\ninvisible(lapply(tiffRes[1:n.images], dispImg)) #original images\n\n\n\ninvisible(lapply(tiffTop[1:n.images], function(x) dispImgT(x, 0.99)))\n\n\n\ninvisible(lapply(tiffRes[1:n.images], function(x) dispImgT(x, 0.2)))\n\n\n\ninvisible(lapply(tiffRes[1:n.images], function(x) dispImgT(x, 0.15)))\n\n\n\ninvisible(lapply(tiffRed[1:n.images], function(x) dispImgT(x, 0.2)))\n\n\n\ninvisible(lapply(tiffRed[1:n.images], function(x) dispImgT(x, 0.15)))\n\n\n\npar(mfcol=c(2,3))\ninvisible(lapply(tiffGreen[1:n.images], function(x) dispImgT(x, 0.2)))\n\n\n\ninvisible(lapply(tiffGreen[1:n.images], function(x) dispImgT(x, 0.15)))\n\n\n\ninvisible(lapply(tiffGreen[1:n.images], function(x) dispImgT(x, 0.10)))\n\n\n\n################################################################################\n# choose green channel as it captures the most intact eye shape\n# test code on one image\npic=tiffGreen[[1]]\n\n# apply differnet cutoffs to select pixels\nx=quantile(pic,0.10)\nx2=quantile(pic,0.50)\npic1=pic>x\npic2=pic>x2; #default black. then value add whitex\nsum(pic1); \n\n\n[1] 276440\n\nsum(pic2)\n\n\n[1] 153573\n\nz = abind(pic,pic1,pic2, along=1) # combine images horizontally, along=1 by row, 2 by col\ndisplay(z,title=\"before vs after quantile=0.1\",method=\"raster\")\n\n# choose pic1, then `equalize`` the image\ny = equalize(pic1) #hist(y);grid()\ndisplay(y, title='Equalized Grayscale Image',method=\"raster\")\ngrayimage<-channel(y,\"grey\")\ndisplay(grayimage)\n\n# choose thresh\nnmask1 = thresh(grayimage, w=1, h=1, offset=0.05); \nnmask2 = thresh(grayimage, w=5, h=5, offset=0.05); \nnmask3 = thresh(grayimage, w=10, h=10, offset=0.5); \nz = abind(nmask1,nmask2,nmask3, along=1)\ndisplay(z,title=\"nmask 1-3\")\nnmask=nmask2; \n\n# choose brush\nnmask1 = opening(nmask, makeBrush(3, shape='box')); \nnmask2 = opening(nmask, makeBrush(3, shape='disc')); \nnmask3 = opening(nmask, makeBrush(3, shape='diamond')); \nnmask4 = opening(nmask, makeBrush(3, shape='Gaussian')); \nnmask5 = opening(nmask, makeBrush(3, shape='line')); \nz = abind(nmask1,nmask2,nmask3,nmask4,nmask5, along=1)\ndisplay(z)\nnmask=nmask3;\n\nnmask = fillHull(nmask); \ndisplay(nmask,title=\"after filling\")\n\n\n\nnmask.ori=nmask;\nnmask = bwlabel(nmask); \ndisplay(nmask); #label each pixel.cluster\n\ncat(\"Number of detected pixel.cluster=\",max(nmask),\"\\n\");\n\n\nNumber of detected pixel.cluster= 15 \n\nmax(imageData(nmask));\n\n\n[1] 15\n\nfts = computeFeatures.moment(nmask)\ndim(fts); #m.cx     m.cy m.majoraxis m.eccentricity    m.theta\n\n\n[1] 15  5\n\npar(mfrow=c(1,2));\n\n\n\ndisplay(abind(pic,nmask, along=1),title=\"before vs after\",method='raster');\ndisplay(nmask,method='raster');\ntext(fts[,\"m.cx\"], fts[,\"m.cy\"], \n     labels=seq_len(nrow(fts)), col=\"red\", cex=0.8)\n\n\n\nfts2 <- computeFeatures.shape(nmask) #s.area s.perimeter s.radius.mean s.radius.sd s.radius.min s.radius.max\n\n#fts2[1:3,]\nlabel=seq(1,nrow(fts2));\nfts2=cbind(label,fts2);\nsize=c(images[1],fts2[which.max(fts2[,2]),]);\nsize\n\n\n                                label             s.area \n      \"fig101.jpg\"                \"2\"            \"34734\" \n       s.perimeter      s.radius.mean        s.radius.sd \n             \"650\" \"106.531040795298\" \"16.9574142648529\" \n      s.radius.min       s.radius.max \n\"78.9300785168402\" \"137.866703971283\" \n\nBased on the above tested image, you could choose your parameters values and then batch processing multiple images.\n\n\n# based on the selected parameters, process all images\nsize.all=as.numeric(); #store image size result\nfor(i in 1:n.images){\n  pic=tiffGreen[[i]]\n  x=quantile(pic,0.10)\n  #x2=quantile(pic,0.50)\n  pic1=pic>x\n  #pic2=pic>x2; #default black. then value add whitex\n  #sum(pic1); \n  #sum(pic2)\n  \n  ## combine images horizontally, along=1 by row, 2 by col\n  #z = abind(pic,pic1,pic2, along=1) \n  #display(z,title=\"before vs after quantile=0.1\",method=\"raster\")\n  \n  y = equalize(pic1)\n  #hist(y)\n  #grid()\n  #display(y, title='Equalized Grayscale Image',method=\"raster\")\n  \n  grayimage<-channel(y,\"grey\")\n  ##display(grayimage)\n  \n  #nmask1 = thresh(grayimage, w=1, h=1, offset=0.05); \n  nmask2 = thresh(grayimage, w=5, h=5, offset=0.05); \n  #nmask3 = thresh(grayimage, w=10, h=10, offset=0.5); \n  #z = abind(nmask1,nmask2,nmask3, along=1)\n  #display(z,title=\"nmask 1-3,pick2\")\n  \n  nmask=nmask2;\n  \n  #nmask1 = opening(nmask, makeBrush(3, shape='box')); \n  #nmask2 = opening(nmask, makeBrush(3, shape='disc')); \n  nmask3 = opening(nmask, makeBrush(3, shape='diamond')); \n  #nmask4 = opening(nmask, makeBrush(3, shape='Gaussian')); \n  #nmask5 = opening(nmask, makeBrush(3, shape='line')); \n  #z = abind(nmask1,nmask2,nmask3,nmask4,nmask5, along=1)\n  #display(z)\n\n  nmask=nmask3;\n  \n  nmask = fillHull(nmask); \n  #display(nmask,title=\"after filling\")\n  \n  nmask.ori=nmask;\n  nmask = bwlabel(nmask); \n  #display(nmask); #label each pixel cluster\n  \n  #cat(\"Number of omma=\",max(nmask),\"\\n\");\n  max(imageData(nmask));\n  \n  fts = computeFeatures.moment(nmask)\n  dim(fts); #m.cx     m.cy m.majoraxis m.eccentricity    m.theta\n  \n  par(mfrow=c(1,2));\n  display(abind(pic,nmask, along=1),title=\"before vs after\",method='raster');\n  display(nmask,method='raster');\n  text(fts[,\"m.cx\"], fts[,\"m.cy\"], \n       labels=seq_len(nrow(fts)), col=\"red\", cex=0.8)\n  \n  fts2 <- computeFeatures.shape(nmask) #s.area s.perimeter s.radius.mean s.radius.sd s.radius.min s.radius.max\n  \n  #fts2[1:3,]\n  label=seq(1,nrow(fts2));\n  fts2=cbind(label,fts2);\n  size=c(images[i],fts2[which.max(fts2[,2]),]);\n  size.all=rbind(size.all,size);\n}\n\n\n\nsize.all\n\n\n                  label s.area  s.perimeter s.radius.mean     \nsize \"fig101.jpg\" \"2\"   \"34734\" \"650\"       \"106.531040795298\"\nsize \"fig102.jpg\" \"1\"   \"37168\" \"679\"       \"110.015581804137\"\nsize \"fig103.jpg\" \"181\" \"7665\"  \"621\"       \"49.4856982533054\"\nsize \"fig104.jpg\" \"5\"   \"36260\" \"653\"       \"108.369060460732\"\nsize \"fig105.jpg\" \"6\"   \"26547\" \"636\"       \"93.6662982519583\"\nsize \"fig106.jpg\" \"14\"  \"32403\" \"649\"       \"103.280055248442\"\n     s.radius.sd        s.radius.min       s.radius.max      \nsize \"16.9574142648529\" \"78.9300785168402\" \"137.866703971283\"\nsize \"20.3647652664543\" \"80.8667047849298\" \"146.559089789463\"\nsize \"19.2001216369784\" \"16.8621645025466\" \"86.3046931721015\"\nsize \"17.7277587449816\" \"79.1819416895688\" \"139.308081620885\"\nsize \"18.9151105977634\" \"58.7397823521172\" \"123.095544087389\"\nsize \"20.0175159328258\" \"69.6975800469778\" \"141.886032952484\"\n\nAs you can see, most images’ eye area were detected pretty nicely, but there are some ‘outliers’.\nAs all intermediate plots were generated, you could easily select those ‘outlier’ images and refine your paramter to get a more accurate measurement.\nHave fun~\n\n\ndevtools::session_info()\n\n\n─ Session info ─────────────────────────────────────────────────────\n setting  value                       \n version  R version 4.1.0 (2021-05-18)\n os       macOS High Sierra 10.13.6   \n system   x86_64, darwin17.0          \n ui       X11                         \n language (EN)                        \n collate  en_US.UTF-8                 \n ctype    en_US.UTF-8                 \n tz       America/Los_Angeles         \n date     2021-12-11                  \n\n─ Packages ─────────────────────────────────────────────────────────\n package      * version  date       lib source        \n abind          1.4-5    2016-07-21 [1] CRAN (R 4.1.0)\n assertthat     0.2.1    2019-03-21 [1] CRAN (R 4.1.0)\n BiocGenerics   0.38.0   2021-05-19 [1] Bioconductor  \n bitops         1.0-7    2021-04-24 [1] CRAN (R 4.1.0)\n bslib          0.2.5.1  2021-05-18 [1] CRAN (R 4.1.0)\n cachem         1.0.5    2021-05-15 [1] CRAN (R 4.1.0)\n callr          3.7.0    2021-04-20 [1] CRAN (R 4.1.0)\n cli            3.0.1    2021-07-17 [1] CRAN (R 4.1.0)\n codetools      0.2-18   2020-11-04 [1] CRAN (R 4.1.0)\n colorspace     2.0-2    2021-06-24 [1] CRAN (R 4.1.0)\n crayon         1.4.1    2021-02-08 [1] CRAN (R 4.1.0)\n DBI            1.1.1    2021-01-15 [1] CRAN (R 4.1.0)\n DEoptimR       1.0-9    2021-05-24 [1] CRAN (R 4.1.0)\n desc           1.3.0    2021-03-05 [1] CRAN (R 4.1.0)\n devtools       2.4.2    2021-06-07 [1] CRAN (R 4.1.0)\n digest         0.6.27   2020-10-24 [1] CRAN (R 4.1.0)\n distill        1.3      2021-10-13 [1] CRAN (R 4.1.0)\n downlit        0.4.0    2021-10-29 [1] CRAN (R 4.1.0)\n dplyr          1.0.7    2021-06-18 [1] CRAN (R 4.1.0)\n EBImage      * 4.34.0   2021-05-19 [1] Bioconductor  \n ellipsis       0.3.2    2021-04-29 [1] CRAN (R 4.1.0)\n evaluate       0.14     2019-05-28 [1] CRAN (R 4.1.0)\n fansi          0.5.0    2021-05-25 [1] CRAN (R 4.1.0)\n fastmap        1.1.0    2021-01-25 [1] CRAN (R 4.1.0)\n fftwtools      0.9-11   2021-03-01 [1] CRAN (R 4.1.0)\n fs             1.5.0    2020-07-31 [1] CRAN (R 4.1.0)\n generics       0.1.0    2020-10-31 [1] CRAN (R 4.1.0)\n ggplot2      * 3.3.5    2021-06-25 [1] CRAN (R 4.1.0)\n glue           1.4.2    2020-08-27 [1] CRAN (R 4.1.0)\n Gmedian      * 1.2.6    2021-04-07 [1] CRAN (R 4.1.0)\n gridExtra    * 2.3      2017-09-09 [1] CRAN (R 4.1.0)\n gtable         0.3.0    2019-03-25 [1] CRAN (R 4.1.0)\n highr          0.9      2021-04-16 [1] CRAN (R 4.1.0)\n htmltools      0.5.1.1  2021-01-22 [1] CRAN (R 4.1.0)\n htmlwidgets    1.5.3    2020-12-10 [1] CRAN (R 4.1.0)\n jpeg           0.1-9    2021-07-24 [1] CRAN (R 4.1.0)\n jquerylib      0.1.4    2021-04-26 [1] CRAN (R 4.1.0)\n jsonlite       1.7.2    2020-12-09 [1] CRAN (R 4.1.0)\n knitr          1.33     2021-04-24 [1] CRAN (R 4.1.0)\n lattice      * 0.20-44  2021-05-02 [1] CRAN (R 4.1.0)\n lifecycle      1.0.0    2021-02-15 [1] CRAN (R 4.1.0)\n locfit         1.5-9.4  2020-03-25 [1] CRAN (R 4.1.0)\n magrittr       2.0.1    2020-11-17 [1] CRAN (R 4.1.0)\n Matrix         1.3-4    2021-06-01 [1] CRAN (R 4.1.0)\n memoise        2.0.0    2021-01-26 [1] CRAN (R 4.1.0)\n munsell        0.5.0    2018-06-12 [1] CRAN (R 4.1.0)\n pillar         1.6.2    2021-07-29 [1] CRAN (R 4.1.0)\n pkgbuild       1.2.0    2020-12-15 [1] CRAN (R 4.1.0)\n pkgconfig      2.0.3    2019-09-22 [1] CRAN (R 4.1.0)\n pkgload        1.2.1    2021-04-06 [1] CRAN (R 4.1.0)\n png            0.1-7    2013-12-03 [1] CRAN (R 4.1.0)\n prettyunits    1.1.1    2020-01-24 [1] CRAN (R 4.1.0)\n processx       3.5.2    2021-04-30 [1] CRAN (R 4.1.0)\n ps             1.6.0    2021-02-28 [1] CRAN (R 4.1.0)\n purrr          0.3.4    2020-04-17 [1] CRAN (R 4.1.0)\n R6             2.5.0    2020-10-28 [1] CRAN (R 4.1.0)\n raster       * 3.4-13   2021-06-18 [1] CRAN (R 4.1.0)\n Rcpp           1.0.7    2021-07-07 [1] CRAN (R 4.1.0)\n RCurl          1.98-1.3 2021-03-16 [1] CRAN (R 4.1.0)\n remotes        2.4.0    2021-06-02 [1] CRAN (R 4.1.0)\n rlang          0.4.11   2021-04-30 [1] CRAN (R 4.1.0)\n rmarkdown      2.11     2021-09-14 [1] CRAN (R 4.1.0)\n robustbase     0.93-8   2021-06-02 [1] CRAN (R 4.1.0)\n rprojroot      2.0.2    2020-11-15 [1] CRAN (R 4.1.0)\n RSpectra       0.16-0   2019-12-01 [1] CRAN (R 4.1.0)\n rstudioapi     0.13     2020-11-12 [1] CRAN (R 4.1.0)\n sass           0.4.0    2021-05-12 [1] CRAN (R 4.1.0)\n scales         1.1.1    2020-05-11 [1] CRAN (R 4.1.0)\n sessioninfo    1.1.1    2018-11-05 [1] CRAN (R 4.1.0)\n sp           * 1.4-5    2021-01-10 [1] CRAN (R 4.1.0)\n stringi        1.7.3    2021-07-16 [1] CRAN (R 4.1.0)\n stringr        1.4.0    2019-02-10 [1] CRAN (R 4.1.0)\n testthat       3.0.4    2021-07-01 [1] CRAN (R 4.1.0)\n tibble         3.1.3    2021-07-23 [1] CRAN (R 4.1.0)\n tidyselect     1.1.1    2021-04-30 [1] CRAN (R 4.1.0)\n tiff         * 0.1-8    2021-03-31 [1] CRAN (R 4.1.0)\n usethis        2.0.1    2021-02-10 [1] CRAN (R 4.1.0)\n utf8           1.2.2    2021-07-24 [1] CRAN (R 4.1.0)\n vctrs          0.3.8    2021-04-29 [1] CRAN (R 4.1.0)\n withr          2.4.2    2021-04-18 [1] CRAN (R 4.1.0)\n xfun           0.24     2021-06-15 [1] CRAN (R 4.1.0)\n yaml           2.2.1    2020-02-01 [1] CRAN (R 4.1.0)\n\n[1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library\n\n\n\n\n",
    "preview": "posts/2021-12-11-image-analysis-measuring-fly-eye-size-using-r/distill-preview.png",
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-12-11-web-scraping-inquire-a-dictionary-to-get-english-sentences-in-r/",
    "title": "Web scraping: Inquire a dictionary to get english sentences in R",
    "description": "Learn english in R with web scraping",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-12-02",
    "categories": [],
    "contents": "\nThis post is about how to use R to build a efficient English learning tool.\nThe basic idea is that, I find that I learn English most efficient when putting words into contexts of a unifying theme.\nFor example, while I am reading a fiction story, I run into some new english words. During reading, I could ‘easily’ (most of the time) guess the word’s meaning based on the contexts. I don’t want to stop and look up for this new word as it would distract me from enjoying the smooth reading experience.\nBut after reading, those new words may just ‘disappeared’ from my brain, as I never put my heart into memorizing them and they rarely come up again in my verbal english.\nI’m thinking about a more efficient pipeline to make the best use of my english reading time.\nThe most direct way is I could just highlight all new english words in a PDF file while reading using a Skim PDF reader APP. Afterwards, I could easitly ‘export’ all highlighted words into a ‘text’ file and they are my new vocabulary words~\nSo, one thing remains to be done, is how to get the Chinese translation of these new words and it would be even better to have example english sentence containing those new words.\nI don’t want to google search each new word and ‘copy & paste’ translations or sentences, I’d like to make this process automatically.\nSo, first, I found some already-bulit tool in R, which interactes with an APP called ‘Youdao’, a very population ‘Chinese<->English’ dictionary. The R package is RYoudaoTranslate, some modificaitons have been made to make it more ‘readable’.\nI looked at the source code of this R package and below is a short demo showing what the package has done without installing the package and I’ve added some modifications to make it more ‘customized’.\n\n\nlibrary(bitops)\nlibrary(RCurl)\nlibrary(rjson)\nlibrary(stringr)\n\n# https://cran.r-project.org/web/packages/RYoudaoTranslate/index.html\n# http://cxy.rbind.io/post/translate/\n\n## use youdaoapi to get the chinese translation of english words\n# specify inquire word, user name and password for youdao api\nword='rover';\n\napikey = \"498375134\"\nkeyfrom = \"JustForTestYouDao\"\n\n\ncmd=paste(\"http://fanyi.youdao.com/openapi.do?keyfrom=\",keyfrom,\"&key=\",apikey,\"&type=data&doctype=json&version=1.1&q=\",\n             word,sep=\"\")\nurl=getURL(cmd)\nobj=fromJSON(url)\nobj\n\n\n$translation\n[1] \"探测器\"\n\n$basic\n$basic$`us-phonetic`\n[1] \"ˈroʊvər\"\n\n$basic$phonetic\n[1] \"ˈrəʊvə(r)\"\n\n$basic$`uk-phonetic`\n[1] \"ˈrəʊvə(r)\"\n\n$basic$explains\n[1] \"n. 漫游者；流浪者；漂泊者；巡视器\"   \n[2] \"n. (Rover)人名；(英)罗弗；(意)罗韦尔\"\n\n\n$query\n[1] \"rover\"\n\n$errorCode\n[1] 0\n\n$web\n$web[[1]]\n$web[[1]]$value\n[1] \"罗孚\"     \"英国罗孚\" \"罗佛公司\"\n\n$web[[1]]$key\n[1] \"Rover\"\n\n\n$web[[2]]\n$web[[2]]$value\n[1] \"路虎\"     \"路虎公司\"\n\n$web[[2]]$key\n[1] \"LAND ROVER\"\n\n\n$web[[3]]\n$web[[3]]$value\n[1] \"月球车\" \"登月车\"\n\n$web[[3]]$key\n[1] \"lunar rover\"\n\n# based on the output of obj, select relevant information\ndata=NULL;\nfor(i in obj$web){\n  data = c(data,paste(i$key,paste(i$value,collapse=\"\"),sep=\",\"))\n}\npaste0(c(word,obj$basic$`us-phonetic`,data),collapse = '; ')\n\n\n[1] \"rover; ˈroʊvər; Rover,罗孚英国罗孚罗佛公司; LAND ROVER,路虎路虎公司; lunar rover,月球车登月车\"\n\n# wrap them up\napikey = \"498375134\"\nkeyfrom = \"JustForTestYouDao\"\ntranslate<-function(apikey,keyfrom,word){\n  cmd=paste(\"http://fanyi.youdao.com/openapi.do?keyfrom=\",keyfrom,\"&key=\",apikey,\"&type=data&doctype=json&version=1.1&q=\",\n            word,sep=\"\")\n  url=getURL(cmd)\n  obj=fromJSON(url)\n  obj\n  # based on the output of obj, select relevant information\n  \n  data=NULL;\n  for(i in obj$web){\n    data = c(data,paste(i$key,paste(i$value,collapse=\"\"),sep=\",\"))\n  }\n  paste0(c(word,obj$basic$`us-phonetic`,data),collapse = '; ')\n}\ntranslate(apikey,keyfrom,'rover')\n\n\n[1] \"rover; ˈroʊvər; Rover,罗孚英国罗孚罗佛公司; LAND ROVER,路虎路虎公司; lunar rover,月球车登月车\"\n\nMy problem with is tool is that, it only gives me short phrases or brief Chinese translation. My dreaming tool would be more example sentences containing this word, which would make the memorization more easily.\nAs I’m using web scraping to do some bioinformatic analysis every now and then, I wonder if I could make a tool myself, customized at my needs.\nBelow I’ll first show step-by-step how to ‘talk’ with Youdao website to get english example sentences. Then, in the end of this post, there is a wrapper function which you could try it out yourself~\n\n\n## use web-scraping to get example sentences\nlibrary(rvest)\nlibrary(XML)\nword='rover';\n\n# inquire\nurl=paste0('http://dict.youdao.com/example/blng/eng/',word,'/#keyfrom=dict.main.moreblng');\n#url<-'http://dict.youdao.com/example/blng/eng/rover/#keyfrom=dict.main.moreblng'\n# parse the returned html page\nx=read_html(url)\n\n# if you want to look what above url returns, save x in a 'xx.html' file and browse it\nif(F){\n  sink(\"test.html\");\n  xmlNode(x)\n  sink()\n  browseURL('test.html')\n}\n\nresults=html_node(x,'.results-content') #use CSS selector to extract wanted contents\negs=html_nodes(results, \"ul > li\") #https://stackoverflow.com/questions/52650604/scraping-li-elements-with-rvest \n\n# egs contain all example sentences\n# look at the first example sentence\neg1=html_text(egs[[1]],trim=TRUE)\nout=eg1 %>% gsub(pattern=\"\\\\t\",replacement=\"\",.) %>% \n  strsplit(.,'\\n\\\\s+') %>% unlist(.)\nout\n\n\n[1] \"In 1986 Rover made a loss of nine hundred million dollars.\"\n[2] \"1986年，罗孚集团亏损9亿美元。\"                             \n[3] \"《柯林斯英汉双解大词典》\"                                  \n\n# extract sentences for all example sentences\neg.df=t(sapply(1:length(egs),function(i){\n  eg1=html_text(egs[[i]],trim=TRUE)\n  out=eg1 %>% gsub(pattern=\"\\\\t\",replacement=\"\",.) %>% \n    strsplit(.,'\\n\\\\s+') %>% unlist(.)\n  out}\n))\ndim(eg.df) #30 example sentences in total\n\n\n[1] 30  3\n\nhead(eg.df)  \n\n\n     [,1]                                                                                                                                                              \n[1,] \"In 1986 Rover made a loss of nine hundred million dollars.\"                                                                                                      \n[2,] \"Halim flashed his official card, and managed to get hold of a soldier to guard the Land Rover.\"                                                                  \n[3,] \"For other directors, the BMX 5 series is tops, followed by the Mercedes-Benz 200 series, Jaguar's XJ6 3.2 and the Rover 800 series.\"                             \n[4,] \"LDV, the collapsed Birmingham-based van maker, has been bought by Dr Qu Li, who controversially advised the Phoenix Four, the former owners of MG Rover.\"        \n[5,] \"The rover should have at least one Martian year, to roam the planet, during which time it will collect, grind and analyze around 70 samples of rock and soil.\"   \n[6,] \"A Land Rover approached a Chevy Tahoe estate car that had stopped at a kerb; the Land Rover pulled out and tried to pass the Tahoe just as it started off again.\"\n     [,2]                                                                                                                     \n[1,] \"1986年，罗孚集团亏损9亿美元。\"                                                                                          \n[2,] \"哈利姆亮了他的证件，并设法找来一名士兵守卫那辆路虎越野车。\"                                                             \n[3,] \"对于其他负责人来说，宝马5系列是最好的，其次是奔驰200系列、捷豹 XJ6 3.2和路虎800系列。\"                                  \n[4,] \"总部位于伯明翰的货车制造商LDV已被李曲博士收购，李曲博士曾是罗孚汽车公司（MG Rover）前东家“凤凰四董事”的顾问而备受争议。\"\n[5,] \"流浪者至少要待一个火星年，去漫步这个星球，在这期间，它将收集、研磨和分析大约70个岩石和土壤样本。\"                       \n[6,] \"一辆路虎接近一辆停在路边的雪佛兰塔赫房车；那辆路虎车加速试图在雪佛兰刚启动时超过它。\"                                   \n     [,3]                      \n[1,] \"《柯林斯英汉双解大词典》\"\n[2,] \"《柯林斯英汉双解大词典》\"\n[3,] \"精选例句\"                \n[4,] \"精选例句\"                \n[5,] \"精选例句\"                \n[6,] \"精选例句\"                \n\nBelow is a wrapper R funciton doing exactly the same task as above. Feel free to copy and paste, try it yourself~\n\n\nlibrary(rvest)\nlibrary(XML)\n\ngive_me_english_sentences<-function(word){\n  url=paste0('http://dict.youdao.com/example/blng/eng/',word,'/#keyfrom=dict.main.moreblng');\n  #url<-'http://dict.youdao.com/example/blng/eng/rover/#keyfrom=dict.main.moreblng'\n  x=read_html(url)\n  \n  results=html_node(x,'.results-content')\n  egs=html_nodes(results, \"ul > li\") #select \n  eg.df=t(sapply(1:length(egs),function(i){\n    eg1=html_text(egs[[i]],trim=TRUE)\n    out=eg1 %>% gsub(pattern=\"\\\\t\",replacement=\"\",.) %>% \n      strsplit(.,'\\n\\\\s+') %>% unlist(.)\n    out}\n  ))\n  eg.df\n}\ngive_me_english_sentences('rover')\n\n\n      [,1]                                                                                                                                                              \n [1,] \"In 1986 Rover made a loss of nine hundred million dollars.\"                                                                                                      \n [2,] \"Halim flashed his official card, and managed to get hold of a soldier to guard the Land Rover.\"                                                                  \n [3,] \"For other directors, the BMX 5 series is tops, followed by the Mercedes-Benz 200 series, Jaguar's XJ6 3.2 and the Rover 800 series.\"                             \n [4,] \"LDV, the collapsed Birmingham-based van maker, has been bought by Dr Qu Li, who controversially advised the Phoenix Four, the former owners of MG Rover.\"        \n [5,] \"The rover should have at least one Martian year, to roam the planet, during which time it will collect, grind and analyze around 70 samples of rock and soil.\"   \n [6,] \"A Land Rover approached a Chevy Tahoe estate car that had stopped at a kerb; the Land Rover pulled out and tried to pass the Tahoe just as it started off again.\"\n [7,] \"The top priority is no longer freeing the rover from the sandpit, but getting its solar panels pointed more to the sun.\"                                         \n [8,] \"Prof. GERTH: Or MG Rover.\"                                                                                                                                       \n [9,] \"Jaguar and Land Rover are ICONS.\"                                                                                                                                \n[10,] \"His ship was named the Boston rover.\"                                                                                                                            \n[11,] \"Mama's going to buy you a dog named Rover.\"                                                                                                                      \n[12,] \"The Indian of the West is a rover of the plain.\"                                                                                                                 \n[13,] \"The rover design (Montgomery design International).\"                                                                                                             \n[14,] \"My first chair [the Rover] : My children jumped on it.\"                                                                                                          \n[15,] \"You can come and pick them up with the Land Rover.\"                                                                                                              \n[16,] \"Bell was in charge of the main cameras on the rover.\"                                                                                                            \n[17,] \"Spirit may be gone, but there's still one rover left.\"                                                                                                           \n[18,] \"The photos show tire tracks from the Apollo 17 lunar rover.\"                                                                                                     \n[19,] \"When the sound is softer, the rover was moving on sand.\"                                                                                                         \n[20,] \"When the sound is louder, the rover was moving on bedrock. \"                                                                                                     \n[21,] \"By December, Jaguar and Land Rover faced their own cash crisis.\"                                                                                                 \n[22,] \"Land Rover has bounced back and is carrying it forward in style.\"                                                                                                \n[23,] \"The rover itself sits still, parked at center right (dark spot).\"                                                                                                \n[24,] \"The Sergeant commanded them to jump into the back of the Land Rover.\"                                                                                            \n[25,] \"An old police Land Rover arrived, and the Sergeant led the men outside.\"                                                                                         \n[26,] \"Rover Mascot stray from the world's most famous families - the Vikings pun.\"                                                                                     \n[27,] \"I would rather have a seat in a Land Rover or... anything other than flying.\"                                                                                    \n[28,] \"You can come and pick them up with the Land Rover. We have no vehicle in our post.\"                                                                              \n[29,] \"A radioisotope power source will provide heat and electric power to the rover.\"                                                                                  \n[30,] \"When MG Rover, another carmaker, closed down in 2005, 90% of its employees found work.\"                                                                          \n      [,2]                                                                                                                     \n [1,] \"1986年，罗孚集团亏损9亿美元。\"                                                                                          \n [2,] \"哈利姆亮了他的证件，并设法找来一名士兵守卫那辆路虎越野车。\"                                                             \n [3,] \"对于其他负责人来说，宝马5系列是最好的，其次是奔驰200系列、捷豹 XJ6 3.2和路虎800系列。\"                                  \n [4,] \"总部位于伯明翰的货车制造商LDV已被李曲博士收购，李曲博士曾是罗孚汽车公司（MG Rover）前东家“凤凰四董事”的顾问而备受争议。\"\n [5,] \"流浪者至少要待一个火星年，去漫步这个星球，在这期间，它将收集、研磨和分析大约70个岩石和土壤样本。\"                       \n [6,] \"一辆路虎接近一辆停在路边的雪佛兰塔赫房车；那辆路虎车加速试图在雪佛兰刚启动时超过它。\"                                   \n [7,] \"目前的第一要务已经不是让探测器脱离沙坑了，而是让太阳能板更偏向太阳的方向。\"                                             \n [8,] \"格斯教授：或者名爵罗孚。\"                                                                                               \n [9,] \"捷豹和陆虎是人们心中的偶像。\"                                                                                           \n[10,] \"他的船名叫“波士顿漫游者号”(the Boston Rover)。\"                                                                         \n[11,] \"妈妈会去给你买一只叫流浪者的狗。\"                                                                                       \n[12,] \"西部的印第安人在大平原上过着游牧生活。\"                                                                                 \n[13,] \"探测器设计(蒙哥马利国际设计公司)。\"                                                                                     \n[14,] \"我的第一把椅子(罗孚椅)：我的孩子会在上面跳。\"                                                                           \n[15,] \"你可以过来开那辆陆虎过来载他们。\"                                                                                       \n[16,] \"贝尔负责勇气号上的主摄像机。\"                                                                                           \n[17,] \"我们可能失去了勇气号，但我们还有另一台火星车，那就是它的兄弟——机遇号。\"                                                 \n[18,] \"有照片显示阿波罗17号释放的月球车在月球表面留下的轮胎痕迹。\"                                                             \n[19,] \"而探测器在沙地上移动时，声音就会较小。\"                                                                                 \n[20,] \"声音较大的时候，探测器正在基岩上移动；\"                                                                                 \n[21,] \"12月，捷豹和路虎都面临着现金危机。\"                                                                                     \n[22,] \"路虎品牌已经卷土重来，并前进在时尚化的道路上。\"                                                                         \n[23,] \"月球车(黑点)本身是静止的，停在中间偏右处。\"                                                                             \n[24,] \"警察命令他们走到陆虎的后车厢里。\"                                                                                       \n[25,] \"一辆旧的警用陆虎开了过来，警察把那队人领到外面。\"                                                                       \n[26,] \"RoverMascot源自世界上最著名的流浪族——维京人的双关语。\"                                                                  \n[27,] \"我宁愿坐在路虎越野车里，或者，除了乘飞机怎样都行。\"                                                                     \n[28,] \"你可以用一辆路虎把他们都接走，我们警站没有运输工具。\"                                                                   \n[29,] \"而放射性同位素能量源可以为探测器提供热量和电能。\"                                                                       \n[30,] \"当汽车制造商罗孚公司在2005年倒闭时，其90%的员工重新找到了工作。\"                                                        \n      [,3]                      \n [1,] \"《柯林斯英汉双解大词典》\"\n [2,] \"《柯林斯英汉双解大词典》\"\n [3,] \"精选例句\"                \n [4,] \"精选例句\"                \n [5,] \"精选例句\"                \n [6,] \"精选例句\"                \n [7,] \"精选例句\"                \n [8,] \"article.yeeyan.org\"      \n [9,] \"www.ecocn.org\"           \n[10,] \"article.yeeyan.org\"      \n[11,] \"eg.blueyingwu.com\"       \n[12,] \"www.tingvoa.com\"         \n[13,] \"article.yeeyan.org\"      \n[14,] \"news.iciba.com\"          \n[15,] \"article.yeeyan.org\"      \n[16,] \"article.yeeyan.org\"      \n[17,] \"article.yeeyan.org\"      \n[18,] \"www.voa365.com\"          \n[19,] \"gb.cri.cn\"               \n[20,] \"gb.cri.cn\"               \n[21,] \"article.yeeyan.org\"      \n[22,] \"article.yeeyan.org\"      \n[23,] \"article.yeeyan.org\"      \n[24,] \"article.yeeyan.org\"      \n[25,] \"article.yeeyan.org\"      \n[26,] \"article.yeeyan.org\"      \n[27,] \"article.yeeyan.org\"      \n[28,] \"article.yeeyan.org\"      \n[29,] \"article.yeeyan.org\"      \n[30,] \"www.ecocn.org\"           \n\ngive_me_english_sentences('fray')\n\n\n      [,1]                                                                                          \n [1,] \"The stitching had begun to fray at the edges.\"                                               \n [2,] \"Tempers began to fray as the two teams failed to score.\"                                     \n [3,] \"They were ready for the fray.\"                                                               \n [4,] \"As the debate went on, tempers began to fray.\"                                               \n [5,] \"At 71, he has now retired from the political fray.\"                                          \n [6,] \"It was fashionable to fray the bottoms of your jeans.\"                                       \n [7,] \"He is raring to charge into the fray and lay down the law.\"                                  \n [8,] \"He might have been called the invulnerable dwarf of the fray.\"                               \n [9,] \"Pinocchio answered with another blow, and that was the signal for the beginning of the fray.\"\n[10,] \"Others joined the fray.\"                                                                     \n[11,] \"To join the discussion, enter the Fray.\"                                                     \n[12,] \"Tempers could fray.\"                                                                         \n[13,] \"Then a company called Farimex entered the fray.\"                                             \n[14,] \"The exception appeared to be the fray in Lusaka.\"                                            \n[15,] \"Rebel groups from Darfur might even join the fray.\"                                          \n[16,] \"Once again, though, they are being dragged into the fray.\"                                   \n[17,] \"The stitching on the Chinese economy could fray and burst.\"                                  \n[18,] \"But Mr Geoghegan may not be ready to step back from the fray.\"                               \n[19,] \"The first blow makes the anger, but the second makes the fray.\"                              \n[20,] \"At some level of the brain, we think we are the guys in the fray.\"                           \n[21,] \"To discuss cosmetic surgery and psychiatric disorders, join the Fray.\"                       \n[22,] \"Equally certain is that Newt Gingrich will hurl himself into the fray.\"                      \n[23,] \"Coercion can also fray family ties and undermine the child's self-esteem.\"                   \n[24,] \"More dangerously for Groupon, big online firms have begun to enter the fray.\"                \n[25,] \"Sadly, intertwined finances can be disastrous if the relationship does fray.\"                \n[26,] \"India, Malaysia, Indonesia and South Africa have also joined the anti-piracy fray.\"          \n[27,] \"Chinese entities haven't entered the fray to shore up Wall Street firms in recent weeks.\"    \n[28,] \"Chinese entities haven't entered the fray to shore up Wall Street firms in recent weeks.\"    \n      [,2]                                                                    \n [1,] \"边缘处的针脚已经开始磨损了。\"                                          \n [2,] \"两队都没有得分，人们开始烦躁起来。\"                                    \n [3,] \"他们准备好了争斗。\"                                                    \n [4,] \"随着辩论的继续，火气就上来了。\"                                        \n [5,] \"他现年71岁，已经退出了政治角逐。\"                                      \n [6,] \"曾经时兴把牛仔裤磨毛。\"                                                \n [7,] \"他急切地想管管这场争斗，斥责他们一番。\"                                \n [8,] \"可以说，他是混战中的一个无懈可击的侏儒。\"                              \n [9,] \"皮诺乔回敬了他一下，这就是开始战斗的信号。\"                            \n[10,] \"其他人加入了这场斗争。\"                                                \n[11,] \"参加了讨论，输入弗赖。\"                                                \n[12,] \"脾气也会暴躁。\"                                                        \n[13,] \"这时，一家名为Farimex的公司加入了这场争吵。\"                           \n[14,] \"唯一的例外似乎就是卢萨卡的争斗。\"                                      \n[15,] \"而达尔福尔地区的叛军此次也可能参与这个冲突。\"                          \n[16,] \"虽然他们被再次拖入到这场纷争中。\"                                      \n[17,] \"中国经济的伤口会崩裂。\"                                                \n[18,] \"但是纪勤可能并不准备在这次斗争中后退。\"                                \n[19,] \"第一拳引起愤怒，第二拳招致争吵。\"                                      \n[20,] \"在我们大脑的某种层面，我们把我们想象成了场上的队员。\"                  \n[21,] \"讨论整容手术和精神障碍，加入弗赖。\"                                    \n[22,] \"同样可以肯定的是，纽金里奇将会倾其所有参加竞选。\"                      \n[23,] \"而刻板的强行规定也会伤害家庭关系，并伤害孩子的自尊。\"                  \n[24,] \"对团宝来说更危险的是，另一些大型网络企业已开始加入战端。\"              \n[25,] \"但可惜的是，如果两人之间开始起冲突，纠缠不清的财务可能会让人损失惨重。\"\n[26,] \"印度、马来西亚、印尼和南非都参与到了反海盗战役中。\"                    \n[27,] \"近几周来，中国企业并未加入到拯救华尔街机构的热潮中。\"                  \n[28,] \"近几周来，中国企业并未加入到拯救华尔街机构的热潮中。\"                  \n      [,3]                      \n [1,] \"《柯林斯英汉双解大词典》\"\n [2,] \"《柯林斯英汉双解大词典》\"\n [3,] \"《牛津词典》\"            \n [4,] \"《牛津词典》\"            \n [5,] \"《牛津词典》\"            \n [6,] \"《牛津词典》\"            \n [7,] \"《柯林斯英汉双解大词典》\"\n [8,] \"精选例句\"                \n [9,] \"精选例句\"                \n[10,] \"article.yeeyan.org\"      \n[11,] \"article.yeeyan.org\"      \n[12,] \"en.eol.cn\"               \n[13,] \"www.ecocn.org\"           \n[14,] \"global.cjzg.cn\"          \n[15,] \"www.ecocn.org\"           \n[16,] \"www.ecocn.org\"           \n[17,] \"news.iciba.com\"          \n[18,] \"www.ecocn.org\"           \n[19,] \"3g.en8848.com.cn\"        \n[20,] \"article.yeeyan.org\"      \n[21,] \"article.yeeyan.org\"      \n[22,] \"www.ecocn.org\"           \n[23,] \"article.yeeyan.org\"      \n[24,] \"www.ecocn.org\"           \n[25,] \"article.yeeyan.org\"      \n[26,] \"www.ecocn.org\"           \n[27,] \"bbs.enfamily.cn\"         \n[28,] \"bbs.enfamily.cn\"         \n\n\n\ndevtools::session_info()\n\n\n─ Session info ─────────────────────────────────────────────────────\n setting  value                       \n version  R version 4.1.0 (2021-05-18)\n os       macOS High Sierra 10.13.6   \n system   x86_64, darwin17.0          \n ui       X11                         \n language (EN)                        \n collate  en_US.UTF-8                 \n ctype    en_US.UTF-8                 \n tz       America/Los_Angeles         \n date     2021-12-11                  \n\n─ Packages ─────────────────────────────────────────────────────────\n package     * version  date       lib source        \n bitops      * 1.0-7    2021-04-24 [1] CRAN (R 4.1.0)\n bslib         0.2.5.1  2021-05-18 [1] CRAN (R 4.1.0)\n cachem        1.0.5    2021-05-15 [1] CRAN (R 4.1.0)\n callr         3.7.0    2021-04-20 [1] CRAN (R 4.1.0)\n cli           3.0.1    2021-07-17 [1] CRAN (R 4.1.0)\n crayon        1.4.1    2021-02-08 [1] CRAN (R 4.1.0)\n curl          4.3.2    2021-06-23 [1] CRAN (R 4.1.0)\n desc          1.3.0    2021-03-05 [1] CRAN (R 4.1.0)\n devtools      2.4.2    2021-06-07 [1] CRAN (R 4.1.0)\n digest        0.6.27   2020-10-24 [1] CRAN (R 4.1.0)\n distill       1.3      2021-10-13 [1] CRAN (R 4.1.0)\n downlit       0.4.0    2021-10-29 [1] CRAN (R 4.1.0)\n ellipsis      0.3.2    2021-04-29 [1] CRAN (R 4.1.0)\n evaluate      0.14     2019-05-28 [1] CRAN (R 4.1.0)\n fansi         0.5.0    2021-05-25 [1] CRAN (R 4.1.0)\n fastmap       1.1.0    2021-01-25 [1] CRAN (R 4.1.0)\n fs            1.5.0    2020-07-31 [1] CRAN (R 4.1.0)\n glue          1.4.2    2020-08-27 [1] CRAN (R 4.1.0)\n htmltools     0.5.1.1  2021-01-22 [1] CRAN (R 4.1.0)\n httr          1.4.2    2020-07-20 [1] CRAN (R 4.1.0)\n jquerylib     0.1.4    2021-04-26 [1] CRAN (R 4.1.0)\n jsonlite      1.7.2    2020-12-09 [1] CRAN (R 4.1.0)\n knitr         1.33     2021-04-24 [1] CRAN (R 4.1.0)\n lifecycle     1.0.0    2021-02-15 [1] CRAN (R 4.1.0)\n magrittr      2.0.1    2020-11-17 [1] CRAN (R 4.1.0)\n memoise       2.0.0    2021-01-26 [1] CRAN (R 4.1.0)\n pkgbuild      1.2.0    2020-12-15 [1] CRAN (R 4.1.0)\n pkgload       1.2.1    2021-04-06 [1] CRAN (R 4.1.0)\n prettyunits   1.1.1    2020-01-24 [1] CRAN (R 4.1.0)\n processx      3.5.2    2021-04-30 [1] CRAN (R 4.1.0)\n ps            1.6.0    2021-02-28 [1] CRAN (R 4.1.0)\n purrr         0.3.4    2020-04-17 [1] CRAN (R 4.1.0)\n R6            2.5.0    2020-10-28 [1] CRAN (R 4.1.0)\n RCurl       * 1.98-1.3 2021-03-16 [1] CRAN (R 4.1.0)\n remotes       2.4.0    2021-06-02 [1] CRAN (R 4.1.0)\n rjson       * 0.2.20   2018-06-08 [1] CRAN (R 4.1.0)\n rlang         0.4.11   2021-04-30 [1] CRAN (R 4.1.0)\n rmarkdown     2.11     2021-09-14 [1] CRAN (R 4.1.0)\n rprojroot     2.0.2    2020-11-15 [1] CRAN (R 4.1.0)\n rstudioapi    0.13     2020-11-12 [1] CRAN (R 4.1.0)\n rvest       * 1.0.0    2021-03-09 [1] CRAN (R 4.1.0)\n sass          0.4.0    2021-05-12 [1] CRAN (R 4.1.0)\n selectr       0.4-2    2019-11-20 [1] CRAN (R 4.1.0)\n sessioninfo   1.1.1    2018-11-05 [1] CRAN (R 4.1.0)\n stringi       1.7.3    2021-07-16 [1] CRAN (R 4.1.0)\n stringr     * 1.4.0    2019-02-10 [1] CRAN (R 4.1.0)\n testthat      3.0.4    2021-07-01 [1] CRAN (R 4.1.0)\n usethis       2.0.1    2021-02-10 [1] CRAN (R 4.1.0)\n vctrs         0.3.8    2021-04-29 [1] CRAN (R 4.1.0)\n withr         2.4.2    2021-04-18 [1] CRAN (R 4.1.0)\n xfun          0.24     2021-06-15 [1] CRAN (R 4.1.0)\n XML         * 3.99-0.6 2021-03-16 [1] CRAN (R 4.1.0)\n xml2          1.3.2    2020-04-23 [1] CRAN (R 4.1.0)\n yaml          2.2.1    2020-02-01 [1] CRAN (R 4.1.0)\n\n[1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-12-11-web-scraping-retrieve-human-orthologs-of-fly-genes-in-r/",
    "title": "Web scraping: Retrieve human orthologs of fly genes in R",
    "description": "Retrieve human orthologs of fly genes in R through web scraping",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-12-01",
    "categories": [],
    "contents": "\n\nContents\nHow to get human orthologs of fly genes?biomaRt\nDIOPT\n\nWeb scraping DIOPT\n\nHow to get human orthologs of fly genes?\nbiomaRt\nThere are actually several ways to do it, for example, you can use R package biomaRt.\n\n\nlibrary(biomaRt);\nlibrary(org.Dm.eg.db)\nfly.gene='FBgn0029663'; #use this gene as an example\n# as biomaRt require entrezgene_id to do serach, first find the entrezgene_id of this fly gene.\nensembl = useMart(\"ensembl\",dataset=\"dmelanogaster_gene_ensembl\")\ngene.df <- AnnotationDbi::select(org.Dm.eg.db, keys=fly.gene, \n                                 keytype = \"FLYBASE\",\n                                 c(\"SYMBOL\",\"ENTREZID\",\"GENENAME\"))\ngene.df\n\n\n      FLYBASE  SYMBOL ENTREZID                GENENAME\n1 FBgn0029663 CG10804    31317 uncharacterized protein\n\nout<-getBM(attributes=c('ensembl_gene_id','external_gene_name',\n                      'hsapiens_homolog_ensembl_gene','hsapiens_homolog_chromosome',\n                      'hsapiens_homolog_chrom_start','hsapiens_homolog_chrom_end',\n                      'hsapiens_homolog_orthology_type',\n                      'hsapiens_homolog_perc_id',\"hsapiens_homolog_perc_id_r1\",\n                      'hsapiens_homolog_orthology_confidence'), \n      filters = 'entrezgene_id', \n      values = gene.df$ENTREZID, \n      mart = ensembl)\nout\n\n\n  ensembl_gene_id external_gene_name hsapiens_homolog_ensembl_gene\n1     FBgn0029663            CG10804                            NA\n  hsapiens_homolog_chromosome hsapiens_homolog_chrom_start\n1                          NA                           NA\n  hsapiens_homolog_chrom_end hsapiens_homolog_orthology_type\n1                         NA                              NA\n  hsapiens_homolog_perc_id hsapiens_homolog_perc_id_r1\n1                       NA                          NA\n  hsapiens_homolog_orthology_confidence\n1                                    NA\n\nbiomaRt is a very handy tool, but sometimes the database it inquires is not always up-to-date.\nDIOPT\nHere is another online database, called DIOPT - DRSC Integrative Ortholog Prediction Tool which integrates multiple ortholog prediction tools and covers a more comprehensive database.\nYou could submit your inquire genes online and download the returned result in a excel file.\nBut if you have 16,000 inquire genes, this process may be too slow.\nHere I would show code how to do web scrape of this webside in R which facililates large numbers of ortholog retrieval.\nWeb scraping DIOPT\n\n\nlibrary(rvest)\n\nurl<-\"https://www.flyrnai.org/diopt\"; #the url we'd like to 'talk' to\nx=read_html(url)\nsession<-html_session(url) #set up a \"channel\" to talk\nhtml_form(session) #have a look at the configuration of this 'channel'\n\n\n[[1]]\n<form> '' (POST https://www.flyrnai.org/cgi-bin/DRSC_orthologs.pl)\n  <field> (button) : \n  <field> (button) : \n  <field> (select) input_species: 7227\n  <field> (select) output_species: 9606\n  <field> (select) search_fields: ***\n  <field> (textarea) gene_list: \n  <field> (file) gene_file: \n  <field> (submit) submit: Submit Search\n  <field> (checkbox) search_datasets: All\n  <field> (checkbox) search_datasets: Compara\n  <field> (checkbox) search_datasets: eggNOG\n  <field> (checkbox) search_datasets: HGNC\n  <field> (checkbox) search_datasets: Hieranoid\n  <field> (checkbox) search_datasets: Homologene\n  <field> (checkbox) search_datasets: Inparanoid\n  <field> (checkbox) search_datasets: Isobase\n  <field> (checkbox) search_datasets: OMA\n  <field> (checkbox) search_datasets: OrthoDB\n  <field> (checkbox) search_datasets: OrthoFinder\n  <field> (checkbox) search_datasets: OrthoInspector\n  <field> (checkbox) search_datasets: orthoMCL\n  <field> (checkbox) search_datasets: Panther\n  <field> (checkbox) search_datasets: Phylome\n  <field> (checkbox) search_datasets: RoundUp\n  <field> (checkbox) search_datasets: TreeFam\n  <field> (checkbox) search_datasets: User_Submission\n  <field> (checkbox) search_datasets: ZFIN\n  <field> (radio) additional_filter: None\n  <field> (radio) additional_filter: Best\n  <field> (radio) additional_filter: NoLow\n  <field> (radio) additional_filter: AboveTwo\n  <field> (radio) additional_filter: HighRank\n\n[[2]]\n<form> 'form' (POST https://www.flyrnai.org/diopt)\n  <field> (button) : \n  <field> (button) : \n  <field> (select) input_species: 7227\n  <field> (select) output_species: 9606\n\nform<-html_form(session)[[1]]\n\n# use one query gene to fill out the form \nform<-set_values(form, gene_list ='FBgn0029663')\nform$fields$gene_list\n\n\n<field> (textarea) gene_list: FBgn0029663\n\n# have a look at the 'Search Field', 'Search Datasets', and 'Additional Filter'\nform$fields$search_fields\n\n\n<field> (select) search_fields: ***\n\nform$fields$search_datasets\n\n\n<field> (checkbox) search_datasets: All\n\nform$fields$additional_filter\n\n\n<field> (radio) additional_filter: None\n\nif(T){\n  # for some computer, you may need to purposely check 'ALL' and uncheck others\n  # locate Search Field in the form object list\n  length(form$fields)\n  form$fields[[5]] #search_fields\n  form$fields[[6]] #gene_list\n  form$fields[[7]] #gene_file: \n  form$fields[[9]]#search_datasets: All\n  form$fields[[10]]#search_datasets: Compara\n  form$fields[[27]]#search_datasets: ZFIN\n  for(i in 10:27){\n    form$fields[[i]]$value<-'***'\n  }\n  form$fields[[28]] #additional_filter: None\n  form$fields[[29]] # additional_filter: Best\n  form$fields[[32]] # additional_filter: HighRank\n  for(i in 29:32){\n    form$fields[[i]]$value<-'***'\n  }\n}\n\n# <field> (submit) submit: Submit Search\nresult <- submit_form(session,form,submit='submit')\nx<-read_html(result)\n\n# output this xml object to local 'test.html' file and you can open this file in chrome \nif(F){\n  sink(\"test.html\");\n  XML::xmlNode(x)\n  sink()\n  browseURL('test.html')\n}\n\n## process output\nx.out=html_table(x)\nlength(x.out)\n\n\n[1] 1\n\ncolnames(x.out[[1]])\n\n\n [1] \"Input Order\"             \"Search Term\"            \n [3] \"Fly GeneID\"              \"FlyBaseID\"              \n [5] \"Fly Symbol\"              \"Species 2\"              \n [7] \"Human GeneID\"            \"Human Species Gene ID\"  \n [9] \"Human Symbol\"            \"Ensmbl ID  (link HPA)\"  \n[11] \"DIOPT Score\"             \"Weighted Score\"         \n[13] \"Rank\"                    \"Best Score\"             \n[15] \"Best Score Reverse\"      \"Prediction Derived From\"\n[17] \"Alignment & Scores\"      \"Feedback\"               \n[19] \"Gene Details\"           \n\nx.out[[1]]\n\n\n# A tibble: 19 × 19\n   `Input Order` `Search Term` `Fly GeneID` FlyBaseID   `Fly Symbol`\n           <int> <chr>                <int> <chr>       <chr>       \n 1             1 FBgn0029663          31317 FBgn0029663 CG10804     \n 2             1 FBgn0029663          31317 FBgn0029663 CG10804     \n 3             1 FBgn0029663          31317 FBgn0029663 CG10804     \n 4             1 FBgn0029663          31317 FBgn0029663 CG10804     \n 5             1 FBgn0029663          31317 FBgn0029663 CG10804     \n 6             1 FBgn0029663          31317 FBgn0029663 CG10804     \n 7             1 FBgn0029663          31317 FBgn0029663 CG10804     \n 8             1 FBgn0029663          31317 FBgn0029663 CG10804     \n 9             1 FBgn0029663          31317 FBgn0029663 CG10804     \n10             1 FBgn0029663          31317 FBgn0029663 CG10804     \n11             1 FBgn0029663          31317 FBgn0029663 CG10804     \n12             1 FBgn0029663          31317 FBgn0029663 CG10804     \n13             1 FBgn0029663          31317 FBgn0029663 CG10804     \n14             1 FBgn0029663          31317 FBgn0029663 CG10804     \n15             1 FBgn0029663          31317 FBgn0029663 CG10804     \n16             1 FBgn0029663          31317 FBgn0029663 CG10804     \n17             1 FBgn0029663          31317 FBgn0029663 CG10804     \n18             1 FBgn0029663          31317 FBgn0029663 CG10804     \n19             1 FBgn0029663          31317 FBgn0029663 CG10804     \n# … with 14 more variables: Species 2 <chr>, Human GeneID <int>,\n#   Human Species Gene ID <int>, Human Symbol <chr>,\n#   Ensmbl ID  (link HPA) <chr>, DIOPT Score <int>,\n#   Weighted Score <dbl>, Rank <chr>, Best Score <chr>,\n#   Best Score Reverse <chr>, Prediction Derived From <chr>,\n#   Alignment & Scores <lgl>, Feedback <chr>, Gene Details <chr>\n\nAs you can see, biomaRt found nothing of this fly gene in terms of human orthologs, but DIOPT gave us more interesting information.\nHave Fun~\n\n\ndevtools::session_info()\n\n\n─ Session info ─────────────────────────────────────────────────────\n setting  value                       \n version  R version 4.1.0 (2021-05-18)\n os       macOS High Sierra 10.13.6   \n system   x86_64, darwin17.0          \n ui       X11                         \n language (EN)                        \n collate  en_US.UTF-8                 \n ctype    en_US.UTF-8                 \n tz       America/Los_Angeles         \n date     2021-12-11                  \n\n─ Packages ─────────────────────────────────────────────────────────\n package          * version  date       lib source        \n AnnotationDbi    * 1.54.1   2021-06-08 [1] Bioconductor  \n assertthat         0.2.1    2019-03-21 [1] CRAN (R 4.1.0)\n Biobase          * 2.52.0   2021-05-19 [1] Bioconductor  \n BiocFileCache      2.0.0    2021-05-19 [1] Bioconductor  \n BiocGenerics     * 0.38.0   2021-05-19 [1] Bioconductor  \n biomaRt          * 2.48.2   2021-07-01 [1] Bioconductor  \n Biostrings         2.60.1   2021-06-06 [1] Bioconductor  \n bit                4.0.4    2020-08-04 [1] CRAN (R 4.1.0)\n bit64              4.0.5    2020-08-30 [1] CRAN (R 4.1.0)\n bitops             1.0-7    2021-04-24 [1] CRAN (R 4.1.0)\n blob               1.2.1    2020-01-20 [1] CRAN (R 4.1.0)\n bslib              0.2.5.1  2021-05-18 [1] CRAN (R 4.1.0)\n cachem             1.0.5    2021-05-15 [1] CRAN (R 4.1.0)\n callr              3.7.0    2021-04-20 [1] CRAN (R 4.1.0)\n cli                3.0.1    2021-07-17 [1] CRAN (R 4.1.0)\n crayon             1.4.1    2021-02-08 [1] CRAN (R 4.1.0)\n curl               4.3.2    2021-06-23 [1] CRAN (R 4.1.0)\n DBI                1.1.1    2021-01-15 [1] CRAN (R 4.1.0)\n dbplyr             2.1.1    2021-04-06 [1] CRAN (R 4.1.0)\n desc               1.3.0    2021-03-05 [1] CRAN (R 4.1.0)\n devtools           2.4.2    2021-06-07 [1] CRAN (R 4.1.0)\n digest             0.6.27   2020-10-24 [1] CRAN (R 4.1.0)\n distill            1.3      2021-10-13 [1] CRAN (R 4.1.0)\n downlit            0.4.0    2021-10-29 [1] CRAN (R 4.1.0)\n dplyr              1.0.7    2021-06-18 [1] CRAN (R 4.1.0)\n ellipsis           0.3.2    2021-04-29 [1] CRAN (R 4.1.0)\n evaluate           0.14     2019-05-28 [1] CRAN (R 4.1.0)\n fansi              0.5.0    2021-05-25 [1] CRAN (R 4.1.0)\n fastmap            1.1.0    2021-01-25 [1] CRAN (R 4.1.0)\n filelock           1.0.2    2018-10-05 [1] CRAN (R 4.1.0)\n fs                 1.5.0    2020-07-31 [1] CRAN (R 4.1.0)\n generics           0.1.0    2020-10-31 [1] CRAN (R 4.1.0)\n GenomeInfoDb       1.28.1   2021-07-01 [1] Bioconductor  \n GenomeInfoDbData   1.2.6    2021-07-11 [1] Bioconductor  \n glue               1.4.2    2020-08-27 [1] CRAN (R 4.1.0)\n hms                1.1.0    2021-05-17 [1] CRAN (R 4.1.0)\n htmltools          0.5.1.1  2021-01-22 [1] CRAN (R 4.1.0)\n httr               1.4.2    2020-07-20 [1] CRAN (R 4.1.0)\n IRanges          * 2.26.0   2021-05-19 [1] Bioconductor  \n jquerylib          0.1.4    2021-04-26 [1] CRAN (R 4.1.0)\n jsonlite           1.7.2    2020-12-09 [1] CRAN (R 4.1.0)\n KEGGREST           1.32.0   2021-05-19 [1] Bioconductor  \n knitr              1.33     2021-04-24 [1] CRAN (R 4.1.0)\n lifecycle          1.0.0    2021-02-15 [1] CRAN (R 4.1.0)\n magrittr           2.0.1    2020-11-17 [1] CRAN (R 4.1.0)\n memoise            2.0.0    2021-01-26 [1] CRAN (R 4.1.0)\n org.Dm.eg.db     * 3.13.0   2021-07-11 [1] Bioconductor  \n pillar             1.6.2    2021-07-29 [1] CRAN (R 4.1.0)\n pkgbuild           1.2.0    2020-12-15 [1] CRAN (R 4.1.0)\n pkgconfig          2.0.3    2019-09-22 [1] CRAN (R 4.1.0)\n pkgload            1.2.1    2021-04-06 [1] CRAN (R 4.1.0)\n png                0.1-7    2013-12-03 [1] CRAN (R 4.1.0)\n prettyunits        1.1.1    2020-01-24 [1] CRAN (R 4.1.0)\n processx           3.5.2    2021-04-30 [1] CRAN (R 4.1.0)\n progress           1.2.2    2019-05-16 [1] CRAN (R 4.1.0)\n ps                 1.6.0    2021-02-28 [1] CRAN (R 4.1.0)\n purrr              0.3.4    2020-04-17 [1] CRAN (R 4.1.0)\n R6                 2.5.0    2020-10-28 [1] CRAN (R 4.1.0)\n rappdirs           0.3.3    2021-01-31 [1] CRAN (R 4.1.0)\n Rcpp               1.0.7    2021-07-07 [1] CRAN (R 4.1.0)\n RCurl              1.98-1.3 2021-03-16 [1] CRAN (R 4.1.0)\n remotes            2.4.0    2021-06-02 [1] CRAN (R 4.1.0)\n rlang              0.4.11   2021-04-30 [1] CRAN (R 4.1.0)\n rmarkdown          2.11     2021-09-14 [1] CRAN (R 4.1.0)\n rprojroot          2.0.2    2020-11-15 [1] CRAN (R 4.1.0)\n RSQLite            2.2.7    2021-04-22 [1] CRAN (R 4.1.0)\n rstudioapi         0.13     2020-11-12 [1] CRAN (R 4.1.0)\n rvest            * 1.0.0    2021-03-09 [1] CRAN (R 4.1.0)\n S4Vectors        * 0.30.0   2021-05-19 [1] Bioconductor  \n sass               0.4.0    2021-05-12 [1] CRAN (R 4.1.0)\n selectr            0.4-2    2019-11-20 [1] CRAN (R 4.1.0)\n sessioninfo        1.1.1    2018-11-05 [1] CRAN (R 4.1.0)\n stringi            1.7.3    2021-07-16 [1] CRAN (R 4.1.0)\n stringr            1.4.0    2019-02-10 [1] CRAN (R 4.1.0)\n testthat           3.0.4    2021-07-01 [1] CRAN (R 4.1.0)\n tibble             3.1.3    2021-07-23 [1] CRAN (R 4.1.0)\n tidyselect         1.1.1    2021-04-30 [1] CRAN (R 4.1.0)\n usethis            2.0.1    2021-02-10 [1] CRAN (R 4.1.0)\n utf8               1.2.2    2021-07-24 [1] CRAN (R 4.1.0)\n vctrs              0.3.8    2021-04-29 [1] CRAN (R 4.1.0)\n withr              2.4.2    2021-04-18 [1] CRAN (R 4.1.0)\n xfun               0.24     2021-06-15 [1] CRAN (R 4.1.0)\n XML                3.99-0.6 2021-03-16 [1] CRAN (R 4.1.0)\n xml2               1.3.2    2020-04-23 [1] CRAN (R 4.1.0)\n XVector            0.32.0   2021-05-19 [1] Bioconductor  \n yaml               2.2.1    2020-02-01 [1] CRAN (R 4.1.0)\n zlibbioc           1.38.0   2021-05-19 [1] Bioconductor  \n\n[1] /Library/Frameworks/R.framework/Versions/4.1/Resources/library\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-12-11-a-r-interface-to-id-validator-in-flybase/",
    "title": "Web scraping: A R interface to 'ID Validator' in FlyBase",
    "description": "Performe fly gene ID validation inside R through web scraper",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-11-30",
    "categories": [],
    "contents": "\n\nContents\nMotivation\nWeb scraper implementation\n\nMotivation\nWhen I was analyzing single cell transcriptome data in fly, I noticed datasets from different studies sometimes refer to the same fly gene with different gene names.\nFor example, in fly embryo scRNA-seq dataset dataset, there is one gene named 4EHP, and in fly whole brain scRNA-seq dataset, this gene is referred to as eIF4EHP.\nAt first, I used R package AnnotationDbi to extract more information about these two genes, see if it would be enough to make an connection between these two genes.\n\n\nlibrary(AnnotationDbi)\nlibrary(org.Dm.eg.db,verbose=F,quietly=T)\nAnnotationDbi::select(org.Dm.eg.db,\n            keys=c('4EHP','eIF4EHP'),keytype=\"SYMBOL\",c(\"FLYBASE\",\"GENENAME\"))\n\n\n   SYMBOL     FLYBASE\n1    4EHP        <NA>\n2 eIF4EHP FBgn0053100\n                                                        GENENAME\n1                                                           <NA>\n2 eukaryotic translation initiation factor 4E homologous protein\n\nThe returned data frame showed no available matching for gene 4EHP.\nThen I went to FlyBase website and searched gene 4EHP. It showed clearly that 4EHP is exactly eIF4EHP. (check out the Also Known As row) \nAs I was comparing some gene properties across studies, this gene name inconsistency may bias my result in some way.\nTo cope with this problem, I turned to a tool offered by FlyBase called ID Validator. This tool maps any input fly gene name into its the current, stable version.\nThere is a wiki page for this tool: https://wiki.flybase.org/wiki/FlyBase:ID_Validator\nWith this online tool, it’s possible to validate all gene names across datasets before any further data processing, replacing old and out-dated gene names with new ones, making sure all gene names are up to date.\nA easy workflow is:\ngo to FlyBase -> ID Validator\npaste gene names or upload a file containing input gene names\ndownload the output file and check the results\nEasy as it is, I wondered if I could make this workflow more “smooth”, like, implementing all above steps inside R.\nInstead of changing working window to chrome -> upload file -> download file -> read in R and continue the analysis.\nI’d like to ‘talk’ with FlyBase directly inside R\nThis requires some skills as connecting to a website and parsing a html file. With convenient functions from R package rvest and XML, things were made much easier to implement~\nWeb scraper implementation\nHere is how I make it happen:\n\n\nlibrary(rvest)\n\nurl<-\"http://flybase.org/convert/id\"; #the url we'd like to 'talk' to\nx=read_html(url)\nsession<-html_session(url) #set up a \"channel\" to talk\nhtml_form(session) #have a look at the configuration of this 'channel'\n\n\n[[1]]\n<form> 'j2g_search_form' (POST http://flybase.org/cgi-bin/uniquery.pl)\n  <field> (hidden) caller: genejump\n  <field> (hidden) species: Dmel\n  <field> (hidden) query: \n  <field> (button) : \n  <field> (text) context: \n  <field> (button) : \n\n[[2]]\n<form> 'converter' (POST http://flybase.org/cgi-bin/export2batch.pl)\n  <field> (hidden) mode: validate\n  <field> (textarea) ids: \n  <field> (file) idfile: \n  <field> (text) idfile_shown: \n  <field> (checkbox) nondmel: \n  <field> (checkbox) synonyms: \n  <field> (submit) .submit: Submit Query\n  <field> (hidden) caller: IDC\n  <field> (button) .reset: Reset\n\nSome explanations about above functions:\nread_html: input a url and it outputs the html content\nhtml_session: set up a session inside R, begin to talk with FlyBase.\nhtml_form: this function extracts boxes you see on the website that need user’s input and give you some ‘forms’. These ‘forms’ need to be filled and then submitted back to the website.\nThe tricky thing is: there are two input boxes on ID Validator website.\nidThe first J2G input box one is useful if you want to search a specific gene and get detailed information about that gene.\nThe second Enter IDs or Symbols input box accpets gene names to be validated.\nLet’s to try both! We are gonna name the 1st box as form1 and the 2nd box as form2. Then we feed one gene to form1 and two genes to form2.\n\n\nform1<-html_form(session)[[1]]\nform2<-html_form(session)[[2]]\nform1\n\n\n<form> 'j2g_search_form' (POST http://flybase.org/cgi-bin/uniquery.pl)\n  <field> (hidden) caller: genejump\n  <field> (hidden) species: Dmel\n  <field> (hidden) query: \n  <field> (button) : \n  <field> (text) context: \n  <field> (button) : \n\nform2\n\n\n<form> 'converter' (POST http://flybase.org/cgi-bin/export2batch.pl)\n  <field> (hidden) mode: validate\n  <field> (textarea) ids: \n  <field> (file) idfile: \n  <field> (text) idfile_shown: \n  <field> (checkbox) nondmel: \n  <field> (checkbox) synonyms: \n  <field> (submit) .submit: Submit Query\n  <field> (hidden) caller: IDC\n  <field> (button) .reset: Reset\n\nform1<-set_values(form1, context =c('4EHP'))\nform2<-set_values(form2, ids =c('4EHP A2bp1'))\nform2<-set_values(form2, synonyms='checked')\n\n\n\nAs on the website, we’d like to check the box named ‘Match synonyms’ to match as many gene names as possible. We would just do the same inside R. The above code form2<-set_values(form2, synonyms='checked'), correponds to Match synonyms checkbox on the website.\nNow we can submit the forms and see what we get back.\n\n\nresult1 <- submit_form(session,form1)\nresult2 <- submit_form(session,form2,submit='.submit')\n\n\n\nTo ‘see’ the results, we need tools to read and parse xml file inside R. You could also save the returned R object result1 or result2 into a local html file and browse it locally.\n\n\nx1<-read_html(result1)\nclass(x1)\nxml2::xml_name(x1)\nxml2::xml_children(x1)\n#xmlNode(x1)\n\n## output this xml object to local 'test.html' file\nsink(\"test.html\");\nxmlNode(x1)\nsink()\n\nbrowseURL('test.html')\n\n\n\nAs we only need gene ID validation information, it would be convenient to directly extract mapping table from the returned object result2. So we use function read_html to ‘read’ the returned html page first, then use function html_table to get the table.\n\n\nx2<-read_html(result2)\nx2.out<-html_table(x2)\nx2.out\n\n\n[[1]]\n# A tibble: 3 × 4\n  `Validation repo… `Validation rep… `Validation rep… `Validation rep…\n  <chr>             <chr>            <chr>            <chr>           \n1 \"Export\"          Submitted Item   Validated ID     Related record  \n2 \"\"                4EHP             FBgn0053100      eIF4EHP         \n3 \"\"                A2bp1            FBgn0052062      Rbfox1          \n\ndf<-x2.out[[1]][-1,]\ndf\n\n\n# A tibble: 2 × 4\n  `Validation repo… `Validation rep… `Validation rep… `Validation rep…\n  <chr>             <chr>            <chr>            <chr>           \n1 \"\"                4EHP             FBgn0053100      eIF4EHP         \n2 \"\"                A2bp1            FBgn0052062      Rbfox1          \n\ndf[,2]\n\n\n# A tibble: 2 × 1\n  `Validation report`\n  <chr>              \n1 4EHP               \n2 A2bp1              \n\ndf[,3]\n\n\n# A tibble: 2 × 1\n  `Validation report`\n  <chr>              \n1 FBgn0053100        \n2 FBgn0052062        \n\nNicely done!\n\n\nsessionInfo()\n\n\nR version 4.1.0 (2021-05-18)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS High Sierra 10.13.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] parallel  stats4    stats     graphics  grDevices utils    \n[7] datasets  methods   base     \n\nother attached packages:\n[1] rvest_1.0.0          org.Dm.eg.db_3.13.0  AnnotationDbi_1.54.1\n[4] IRanges_2.26.0       S4Vectors_0.30.0     Biobase_2.52.0      \n[7] BiocGenerics_0.38.0 \n\nloaded via a namespace (and not attached):\n [1] KEGGREST_1.32.0        xfun_0.24             \n [3] bslib_0.2.5.1          vctrs_0.3.8           \n [5] htmltools_0.5.1.1      yaml_2.2.1            \n [7] utf8_1.2.2             blob_1.2.1            \n [9] rlang_0.4.11           jquerylib_0.1.4       \n[11] pillar_1.6.2           glue_1.4.2            \n[13] DBI_1.1.1              selectr_0.4-2         \n[15] bit64_4.0.5            GenomeInfoDbData_1.2.6\n[17] lifecycle_1.0.0        stringr_1.4.0         \n[19] zlibbioc_1.38.0        Biostrings_2.60.1     \n[21] memoise_2.0.0          evaluate_0.14         \n[23] knitr_1.33             fastmap_1.1.0         \n[25] GenomeInfoDb_1.28.1    curl_4.3.2            \n[27] fansi_0.5.0            Rcpp_1.0.7            \n[29] cachem_1.0.5           jsonlite_1.7.2        \n[31] XVector_0.32.0         bit_4.0.4             \n[33] distill_1.3            png_0.1-7             \n[35] digest_0.6.27          stringi_1.7.3         \n[37] cli_3.0.1              tools_4.1.0           \n[39] bitops_1.0-7           magrittr_2.0.1        \n[41] sass_0.4.0             RCurl_1.98-1.3        \n[43] RSQLite_2.2.7          tibble_3.1.3          \n[45] crayon_1.4.1           pkgconfig_2.0.3       \n[47] downlit_0.4.0          ellipsis_0.3.2        \n[49] xml2_1.3.2             rstudioapi_0.13       \n[51] rmarkdown_2.11         httr_1.4.2            \n[53] R6_2.5.0               compiler_4.1.0        \n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-11-23-scrnageneexpr05/",
    "title": "05.scRNA-seq: fit a Gamma-Normal mixture model with real single cell data",
    "description": "Fit a Gamma-Normal mixture model to single cell data and estimate parameters",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-11-25",
    "categories": [],
    "contents": "\n\nContents\nSimulate data following gamma-normal mixture model\nfit model and estimate parametersusing code from scSEGIndex.R\nusing code from scLink\n\nfit mixture model using single cell data in fly\n\nA Mixture model with two components: Gamma and Gaussian\nmix_GGImage source:\nLin, Yingxin, et al. “Evaluating stably expressed genes in single cells.” GigaScience 8.9 (2019): giz106.\nWei Vivian Li, Yangzeng Li, “scLink: Inferring Sparse Gene Co-expression Networks from Single-cell Expression Data”. Genomics, Proteomics & Bioinformatics, 2021\nIn this post, I’m gonna fit single cell data with a Gamma-Normal mixture model.\nsimulate data following gamma-normal mixture model\nfit model and estimate parameters using code of scSEGIndex.R from the scMerge package\nfit model and estimate parameters using code from the scLink package\nSimulate data following gamma-normal mixture model\n\n\n## simulate from a gamma-normal mixture model and use the provide function to fit\n#https://stats.stackexchange.com/questions/52344/sampling-from-the-normal-gamma-distribution-in-r\nxg <- seq(0.001, 50, length.out = 300)\npi=0.7; #proportion of gamma distribution part\nrho_iter=1-pi; #proportion of normal distribution part\nmu_iter=10;sig2_iter=1;\nalpha_iter=1; beta_iter=1;\n\nc1g <- rho_iter * stats::dnorm(xg, mu_iter, sqrt(sig2_iter))\nc2g <- (1-rho_iter) * stats::dgamma(xg, shape = alpha_iter, rate = beta_iter)\nfg <- rho_iter * stats::dnorm(xg, mu_iter, sqrt(sig2_iter)) +\n       (1-rho_iter)* stats::dgamma(xg, shape = alpha_iter,rate = beta_iter)\n\npar(mfrow=c(1,1))\nplot(xg,type='n',xlim=c(min(xg),max(xg)),ylim=c(0,max(fg)))\ngraphics::lines(xg, c1g, col = scales::alpha(\"red\", 0.6), lwd = 2)  #Normal Lines\ngraphics::lines(xg, c2g, col = scales::alpha(\"blue\", 0.6), lwd = 2)  #Gamma lines\ngraphics::lines(xg, fg, col = scales::alpha(\"black\", 0.6), lwd = 2)  #Mixture model line\n\n\n\n\nA random generator function following gamma-normal mixture model.\nNote: I use pi to denote the proportion of Gamma distribution and (1-pi) for the Normal part.\n\n\n#simulation scheme: param.est.pnb.R function from https://github.com/anlingUA/scDoc \n#f(y) = pi*Gamma(y;alpha,beta) +(1-pi)*Normal(y;mu,sigma)\nr_gamma_normal <- function(n, pi, mu, sigma2, alpha, beta) {\n  if (length(n) > 1) n <- length(n)\n  u <- runif(n) \n  y <- apply(as.matrix(u), 1, function(x) \n    ifelse(x<=pi, rgamma(1, shape=alpha, rate=beta),\n           rnorm(1, mu,sd=sqrt(sigma2)) ) )\n     \n  #y1 <- rnorm(floor(n*pi), mu, sd=sqrt(sigma2))\n  #y2 <- rgamma(n-length(y1), shape=alpha, rate=beta)\n  #y=c(y1,y2)\n  return(y)\n}\ny=r_gamma_normal(n=2000,pi=0.3,mu=10,sigma2=1,alpha=1,beta=1)\n# gamma: shape=k,scale=theta\n# alpha = k, beta=1/theta\nhist(y)\n\n\n\n\nfit model and estimate parameters\nusing code from scSEGIndex.R\nsource code: https://github.com/SydneyBioX/scMerge/blob/master/R/scSEGIndex.R\n\n\n#code copied from: https://github.com/SydneyBioX/scMerge/blob/master/R/scSEGIndex.R\n\ngammaNormMix <- function(data, thresh = 1e-07, maxiter = 10000, \n                         removeZeroes = TRUE, plot = TRUE, hist = TRUE, hist_col = \"light cyan\", \n                         verbose = FALSE, forceExponential = FALSE, calculateAreaDifference = FALSE, \n                         minDataPoints = 5, onlyAddCurves = FALSE, addContextData = FALSE, \n                         contextData = NULL) {\n  \n  \n  # fitting a 2 component normal and gamma mixture model\n  \n  # add other data to fit the model with as well, but only\n  # return the classification for those we're interested in\n  \n  if (addContextData) {\n    nOriginal = length(data)\n    data <- c(data, contextData)\n  }\n  \n  # assume all values exactly zero already belong to the gamma\n  # comp and remove them from the EM algorithm\n  \n  if (removeZeroes) {\n    nonZeroInd = which(data > 0)\n    x = data[nonZeroInd]\n  } else {\n    x = data\n  }\n  \n  if (length(x) < minDataPoints) {\n    if (verbose) \n      cat(\"Not enough data points to fit mixture model!\")\n    return(NA)\n  }\n  \n  # initiate\n  n = length(x)\n  z = stats::rbinom(n, 1, 0.5)\n  if(sum(z) == 0){z[1] = 1} ## Break out of a sequence of zeroes error\n  z_iter = z\n  mu = -100\n  mu_iter = 10\n  sig2 = -100\n  sig2_iter = 0\n  alpha = -100\n  alpha_iter = 1\n  beta = -100\n  beta_iter = 1\n  rho = -100\n  rho_iter = 0.5\n  niter = 0\n  \n  while (any(c(abs(mu - mu_iter) > thresh, abs(sig2 - sig2_iter) > \n               thresh, abs(alpha - alpha_iter) > thresh, \n               abs(beta - beta_iter) > thresh, \n               abs(rho - rho_iter) > thresh)) & \n         (niter < maxiter)) {\n    \n    # save old parameters\n    mu = mu_iter\n    sig2 = sig2_iter\n    alpha = alpha_iter\n    beta = beta_iter\n    rho = rho_iter\n    if (forceExponential) \n      alpha_iter = 1\n    \n    niter = niter + 1\n    \n    # M step\n    mu_iter = sum(z_iter * x)/sum(z_iter)\n    sig2_iter = sum(z_iter * (x - mu_iter) * (x - mu_iter))/sum(z_iter)\n    if (sig2_iter <= 0 | is.na(sig2_iter)) \n      sig2_iter = 1e-11\n    beta_iter = alpha_iter * sum(1 - z_iter)/sum((1 - z_iter) * \n                                                   x)\n    if (beta_iter <= 0 | is.na(beta_iter)) \n      beta_iter = 3\n    if (!forceExponential) {\n      alpha_iter = distr::igamma(sum((log(beta_iter) + \n                                        log(x)) * (1 - z_iter))/sum(1 - z_iter))\n    }\n    if (alpha_iter > 150 | is.na(alpha_iter)) \n      alpha_iter = 150\n    rho_iter = sum(z_iter)/n\n    \n    \n    # E step\n    eta_iter = -0.5 * log(2 * pi * sig2_iter) - ((x - mu_iter) * \n                                                   (x - mu_iter))/(2 * sig2_iter) - alpha_iter * log(beta_iter) + \n      log(gamma(alpha_iter)) - (alpha_iter - 1) * log(x) + \n      beta_iter * x + log(rho_iter/(1 - rho_iter))\n    z_iter = 1/(1 + exp(-eta_iter))\n    \n    if (verbose) \n      cat(niter, mu_iter, sqrt(sig2_iter), alpha_iter, \n          beta_iter, rho_iter, \"\\n\")\n  }\n  \n  \n  ll <- sum(log(rho_iter * stats::dnorm(x, mu_iter, sqrt(sig2_iter)) + \n                  (1 - rho_iter) * stats::dgamma(x, shape = alpha_iter, \n                                                 rate = beta_iter)))\n  \n  \n  xg <- seq(0, max(x) + 1, length.out = 300)\n  c1g <- rho_iter * stats::dnorm(xg, mu_iter, sqrt(sig2_iter))\n  \n  c2g <- (1 - rho_iter) * stats::dgamma(xg, shape = alpha_iter, \n                                        rate = beta_iter)\n  fg <- rho_iter * stats::dnorm(xg, mu_iter, sqrt(sig2_iter)) + \n    (1 - rho_iter) * stats::dgamma(xg, shape = alpha_iter, \n                                   rate = beta_iter)\n  \n  if (plot) {\n    if (hist) {\n      hist(x, probability = TRUE, col = hist_col, breaks = 50, \n           main = NA, xlab = NA, ylab = \"Density (zeroes removed)\", \n           ylim = c(0, 0.6), xlim = c(0, 20))\n    }\n    if (!onlyAddCurves) {\n      graphics::lines(stats::density(x, from = 0), lty = 2, \n                      lwd = 2, col = scales::alpha(\"darkgrey\", 0.6))\n    }\n    graphics::lines(xg, c1g, col = scales::alpha(\"red\", 0.6), lwd = 2)  #Normal Lines\n    graphics::lines(xg, c2g, col = scales::alpha(\"blue\", 0.6), lwd = 2)  #Gamma lines\n    graphics::lines(xg, fg, col = scales::alpha(\"black\", 0.6), lwd = 2)  #Mixture model line\n    \n    if (onlyAddCurves) \n      return(list(xg = xg, c1g = c1g, c2g = c2g, fg = fg))\n  }\n  if (calculateAreaDifference) {\n    f1 <- stats::approxfun(xg, (stats::approxfun(stats::density(x, \n                                                                from = 0)))(xg) - fg)\n    # piecewise linear function\n    f2 <- function(x) abs(f1(x))\n    # take the positive value\n    AreaDifference = stats::integrate(f2, min(x[x != 0]), \n                                      max(x))$value\n  } else {\n    AreaDifference = NULL\n  }\n  \n  if (removeZeroes) {\n    z = rep(0, length(data))\n    z[nonZeroInd] <- z_iter\n  } else {\n    z = z_iter\n  }\n  \n  # force prob expression values above the max to stay the same\n  # value\n  maxdata = data[which.max(z)]\n  z[which(data > maxdata)] <- max(z)\n  \n  \n  \n  if (addContextData) {\n    z <- z[seq_len(nOriginal)]\n  }\n  if (plot) {\n    if (addContextData) {\n      graphics::points(data[seq_len(nOriginal)], z * 0, \n                       pch = \"|\", cex = 1, col = scales::alpha(grDevices::rgb(z, \n                                                                              0, 1 - z), 0.4))\n    } else {\n      graphics::points(data, z * 0, pch = \"|\", cex = 1, \n                       col = scales::alpha(grDevices::rgb(z, 0, 1 - z), 0.4))\n    }\n  }\n  model_bic <- bic(ll, n, 5)\n  model_aic <- aic(ll, 5)\n  model_icl_bic <- icl_bic(ll, z, n, 5)\n  return(list(probExpressed = z, propExpressed = n * rho_iter/length(data), \n              numExpressed = length(which(z > 0.5)), mu = mu_iter, \n              sd = sqrt(sig2_iter), alpha = alpha_iter, beta = beta_iter, \n              rho = rho_iter, niter = niter, loglik = ll, BIC = model_bic, \n              AIC = model_aic, ICL_BIC = model_icl_bic, AreaDifference = AreaDifference))\n}\nbic <- function(loglik, n, p) {\n  return(-2 * loglik + p * log(n))\n}\naic <- function(loglik, p) {\n  return(-2 * loglik + 2 * p)\n}  #Tend to fit more component\nicl_bic <- function(loglik, postprob, n, p) {\n  postprob <- postprob[postprob > 0]\n  EN = -sum(postprob * log(postprob))\n  return(-2 * loglik + 2 * EN + p * log(n))\n}\n\ny=r_gamma_normal(n=2000,pi=0.3,mu=10,sigma2=1,alpha=1,beta=1)\nsum(y==0)\n\n\n[1] 0\n\nout=gammaNormMix(data=y,plot=T)\n\n\n\n#red: fitted normal line\n#blue: fitte gamma line\n#black: mixture model line\nout$rho\n\n\n[1] 0.7032491\n\nout$mu\n\n\n[1] 9.992367\n\nout$sd\n\n\n[1] 0.9991185\n\nout$alpha\n\n\n[1] 1.064602\n\nout$beta\n\n\n[1] 1.072209\n\nusing code from scLink\nsource code: https://github.com/Vivianstats/scLink\n\n\n### estimate parameters in the mixture distribution\n#https://github.com/Vivianstats/scLink/blob/master/R/get_mix_parameters.R\nlibrary(parallel)\nncores=2;\nsource('get_mix_parameters.R')\n\ny1=r_gamma_normal(n=2000,pi=0.3,mu=10,sigma2=1,alpha=1,beta=1)\ny2=r_gamma_normal(n=2000,pi=0.1,mu=6,sigma2=2,alpha=0.5,beta=1)\ncount=t(data.frame(y1=y1,y2=y2)) \ndim(count) #two genes, each gene has 2000 cell info\n\n\n[1]    2 2000\n\npa = get_mix_parameters(count, ncores = 2) #using log.mat for fit\npa\n\n\n          rate     alpha     beta        mu     sigma\ninit 0.3051956 1.0678489 1.104861 10.034635 0.9779919\n     0.1178539 0.5602537 1.200184  6.042215 1.3942275\n\n# rate is the proportion of gamma.distribution of the mixture\n\n\n\nfit mixture model using single cell data in fly\n\n\n## read in small loomR file\nlibrary(loomR)\nds <- connect('wing_2celltypes_10x.loom')\nmat <- t(ds$matrix[,])\ngene.names <- ds$row.attrs$Gene[]\ncell.names <- ds$col.attrs$CellID[]\ncell.types<-ds$col.attrs$cell.type[]\nsex.labels<-ds$col.attrs$sex.label[]\nds$close_all()\n\ndim(mat)\n\n\n[1] 13411   302\n\nlength(gene.names)\n\n\n[1] 13411\n\nlength(cell.names)\n\n\n[1] 302\n\ntable(cell.types)\n\n\ncell.types\n   hemocyte muscle cell \n        158         144 \n\ntable(sex.labels)\n\n\nsex.labels\nfemale   male \n   103    199 \n\n# filter out some genes\nrownames(mat)=gene.names\ncolnames(mat)=cell.names\nfilter <- rowSums(mat>5)>5\ntable(filter)\n\n\nfilter\nFALSE  TRUE \n12973   438 \n\numi.mat<- mat[filter,]\ndim(umi.mat) #cell by gene\n\n\n[1] 438 302\n\nscale.factor=1e06;\ncount=as.matrix(umi.mat)\ncpm.mat = sweep( count, MARGIN = 2, scale.factor/colSums( count), FUN = \"*\")\n\ncell.size=Matrix::colSums(umi.mat)\nhead(umi.mat[,1]/cell.size[1]*scale.factor)\n\n\n      AGO3       ASPP    ATPsynC ATPsynbeta      Ac13E     Act79B \n     0.000      0.000   3076.923   3076.923      0.000      0.000 \n\ncpm.mat[1:5,1]\n\n\n      AGO3       ASPP    ATPsynC ATPsynbeta      Ac13E \n     0.000      0.000   3076.923   3076.923      0.000 \n\n# transpose to cell by gene matrix\nt.log.cpm.mat = t(log(cpm.mat+1,base=2))\nt.log.cpm.mat1= t(log10(cpm.mat+1))\nt.log.cpm.mat2 = t(log10(cpm.mat+1.01))\n\npar(mfrow=c(1,3))\npick.gene.i=c(10,20)\nfor(gene.i in pick.gene.i){\n  #gene.i=10;\n  #hist(t.log.cpm.mat[,10],main='log2(cpm+1)')\n  #hist(t.log.cpm.mat1[,10],main='log10(cpm+1)')\n  hist(umi.mat[gene.i,],main='UMI')\n  hist(cpm.mat[gene.i,],main='CPM')\n  hist(t.log.cpm.mat2[,gene.i],main='log10(cpm+1.01)')\n}\n\n\n\nmat=t.log.cpm.mat1\nlog.mat=t.log.cpm.mat2\n#log10(1.01)\n#sum(log.mat <= log10(1.01))\n#sum(log.mat<log10(1.01)) #0 \n#sum(log.mat<=log10(1.01)) #ok\nlog.mat[log.mat <= log10(1.01)] = log10(1.01) #for safe, as floating number computation, small minus value\n\ndim(log.mat) #302cell by 438 gene\n\n\n[1] 302 438\n\nlibrary(parallel)\npa = get_mix_parameters(t(log.mat), ncores = 2) #using log.mat for fit\ndim(pa) #number of genes and the 5 estimated paras\n\n\n[1] 438   5\n\nhead(pa)\n\n\n          rate alpha     beta       mu     sigma\ninit 0.5695364    20 4628.158 3.446175 0.3801366\n     0.8609272    20 4628.158 3.163246 0.3147853\n     0.4205298    20 4628.158 3.383409 0.4001202\n     0.5993377    20 4628.158 3.318515 0.3593697\n     0.6291391    20 4628.158 3.273980 0.3438312\n     0.7251656    20 4628.158 3.633570 0.4701132\n\n# select genes to plot obs and predicted values\ngene.para=pa[pick.gene.i,] #estiamted para values for gene.i\n# simulate distribution based on estiamted parameters\n# as in r_gamma_normal(), pi is the proportion of Normal in the mixture.\n# get_mix_parameters() return rate as the proportion of gamma in the mixture.\nfor(i in 1:nrow(gene.para)){\n  simu.dat=r_gamma_normal(n=nrow(log.mat),pi=1-gene.para[i,1], mu=gene.para[i,4],sigma2=gene.para[i,5]^2,alpha=gene.para[i,2],beta=gene.para[i,3])\n  \n  par(mfrow=c(2,1))\n  hist(t.log.cpm.mat2[,pick.gene.i[i]],main='log10(cpm+1.01)')\n  hist(simu.dat,main=paste0('simu.data based on estimated parameter\\ndetection.rate=',round(1-gene.para[i,1],4), '\\n',paste(names(gene.para[i,]),collapse = ';'), '\\n',paste(round(gene.para[i,-1],2),collapse = ';')),cex.main=1)\n}\n\n\n\n## based on estiamted gene_wise parameters\n## calcualte non-detection rate for each gene in each cell\nI = ncol(log.mat) #number of genes\nJ= nrow(log.mat) #number of cells\n### calculate cell-wise dropout rate for each gene\ndroprate = sapply(1:I, function(i) {\n  if(is.na(pa[i,1])) return(rep(0,J))\n  wt = calculate_weight(log.mat[, i], pa[i, ]) #https://github.com/Vivianstats/scLink/blob/master/R/get_mix_parameters.R\n  return(wt[, 1])\n})\ndim(droprate) #cell by gene\n\n\n[1] 302 438\n\ndroprate[1:3,1:3] #this measures non-detected/dropout rate\n\n\n                                                                    [,1]\nAAACGAACAAGTGATA-a3bbecd0__FCA39_Male_wing_adult_5dWT_Scott_sample1    1\nAAAGTCCAGCCAGTAG-a3bbecd0__FCA39_Male_wing_adult_5dWT_Scott_sample1    0\nAACCTTTAGAGAGTGA-a3bbecd0__FCA39_Male_wing_adult_5dWT_Scott_sample1    1\n                                                                    [,2]\nAAACGAACAAGTGATA-a3bbecd0__FCA39_Male_wing_adult_5dWT_Scott_sample1    1\nAAAGTCCAGCCAGTAG-a3bbecd0__FCA39_Male_wing_adult_5dWT_Scott_sample1    0\nAACCTTTAGAGAGTGA-a3bbecd0__FCA39_Male_wing_adult_5dWT_Scott_sample1    1\n                                                                    [,3]\nAAACGAACAAGTGATA-a3bbecd0__FCA39_Male_wing_adult_5dWT_Scott_sample1    0\nAAAGTCCAGCCAGTAG-a3bbecd0__FCA39_Male_wing_adult_5dWT_Scott_sample1    0\nAACCTTTAGAGAGTGA-a3bbecd0__FCA39_Male_wing_adult_5dWT_Scott_sample1    0\n\ntable(as.numeric(droprate))\n\n\n\n                0 0.999999999999978  0.99999999999998 \n            63685               203                92 \n0.999999999999996 0.999999999999997 0.999999999999999 \n              122               167               207 \n                1 \n            67800 \n\n\n\nsessionInfo()\n\n\nR version 4.1.0 (2021-05-18)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Mojave 10.14.5\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] parallel  stats     graphics  grDevices utils     datasets \n[7] methods   base     \n\nother attached packages:\n[1] loomR_0.2.1.9000 hdf5r_1.3.3      R6_2.5.0        \n\nloaded via a namespace (and not attached):\n [1] bslib_0.2.5.1     compiler_4.1.0    jquerylib_0.1.4  \n [4] highr_0.9         tools_4.1.0       digest_0.6.27    \n [7] downlit_0.4.0     bit_4.0.4         jsonlite_1.7.2   \n[10] evaluate_0.14     memoise_2.0.0     lifecycle_1.0.0  \n[13] lattice_0.20-44   rlang_0.4.11      Matrix_1.3-3     \n[16] distill_1.3       yaml_2.2.1        xfun_0.24        \n[19] fastmap_1.1.0     stringr_1.4.0     knitr_1.33       \n[22] vctrs_0.3.8       sass_0.4.0        bit64_4.0.5      \n[25] grid_4.1.0        pbapply_1.4-3     fansi_0.5.0      \n[28] rmarkdown_2.11    farver_2.1.0      distr_2.8.0      \n[31] magrittr_2.0.1    scales_1.1.1      htmltools_0.5.1.1\n[34] MASS_7.3-54       sfsmisc_1.1-11    colorspace_2.0-2 \n[37] startupmsg_0.9.6  stringi_1.7.3     munsell_0.5.0    \n[40] cachem_1.0.5     \n\n\n\n\n",
    "preview": "posts/2021-11-23-scrnageneexpr05/distill-preview.png",
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-11-23-scrnageneexpr04/",
    "title": "04.scRNA-seq: fit P, NB, ZIP, ZINB models in a Bayesian framework with real single cell data",
    "description": "Fit the four statistical models to fly single cell data and estimate parameters in a Bayesian framework",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-11-24",
    "categories": [],
    "contents": "\n\nContents\nread in test data in loom format\nfit the four models\ncompare models\n\nIn this post, I’d use fly single cell data and perform modelling fitting.\nread in test data in loom format\nIn the post titled 00.scRNA-seq: fit zero proportions, I generated a test dataset in loom format. Read in this data to prepare for model fitting.\n\n\n## read in small loomR file\nlibrary(loomR)\nds <- connect('wing_2celltypes_10x.loom')\nmat <- t(ds$matrix[,])\ngene.names <- ds$row.attrs$Gene[]\ncell.names <- ds$col.attrs$CellID[]\ncell.types<-ds$col.attrs$cell.type[]\nsex.labels<-ds$col.attrs$sex.label[]\nds$close_all()\n\ndim(mat)\n\n\n[1] 13411   302\n\nlength(gene.names)\n\n\n[1] 13411\n\nlength(cell.names)\n\n\n[1] 302\n\ntable(cell.types)\n\n\ncell.types\n   hemocyte muscle cell \n        158         144 \n\ntable(sex.labels)\n\n\nsex.labels\nfemale   male \n   103    199 \n\nfit the four models\nI copied source code from: #https://github.com/churchill-lab/scRATE/blob/master/R/fit_count_models.R to perform model fitting.\n\n\n## fit P, NB, ZIP, ZINB models for each gene\n## use cell.type and sex as covariates\ncell.size=log(Matrix::colSums(mat))\ngene.total.umi=Matrix::rowSums(mat)\ni=which.max(gene.total.umi)\ny=mat[i,] #use the gene with most umi/transcripts\n\ngexpr=data.frame(y=y,cell.size=cell.size,cell.type=cell.types,sex.label=sex.labels)\n\ncovariates <- names(gexpr)[-c(1, 2)]\n\nformula_string <- 'y ~ 1'\nfor (covar in covariates) {\n  formula_string <- paste(formula_string,sprintf(' + (1|%s)', covar))\n}\nformula_string\n\n\n[1] \"y ~ 1  + (1|cell.type)  + (1|sex.label)\"\n\nf12 <- as.formula(formula_string) #for these two models, offset can be set inside functin.\n# no need to include it in the linear formula\nf34 <- as.formula(paste(formula_string, ' + offset(cell.size)'))\nf12\n\n\ny ~ 1 + (1 | cell.type) + (1 | sex.label)\n\nf34\n\n\ny ~ 1 + (1 | cell.type) + (1 | sex.label) + offset(cell.size)\n\nfitting <- list()\nlibrary(rstanarm);\n\nnCores=2;seed=2049\n\nmessage('Fitting data with Poisson model...')\nfitting[[\"P\"]] <- stan_glmer(f12,\n                             family = poisson,\n                             data = gexpr,\n                             offset = cell.size,\n                             cores = nCores,\n                             seed = seed,\n                             refresh = 0)\n\n\nmessage('Fitting data with Negative Binomial model...')\nfitting[[\"NB\"]] <- stan_glmer(f12,\n                              family = neg_binomial_2,\n                              data = gexpr,\n                              offset = cell.size,\n                              cores = nCores,\n                              seed = seed,\n                              refresh = 0)\n\n## for fitting zero-inflated models, use `brms` package\nlibrary(brms)\noptions(brms.backend = \"cmdstanr\")\n\nadapt_delta=0.8\nmessage('Fitting data with Zero-Inflated Poisson model...')\n\nmyprior_3 <- get_prior(bf(f34, zi ~ 1),\n                       family = zero_inflated_poisson(),\n                       data = gexpr)\nmyprior_3_values <- eval(parse(text=gsub(\"student_t\", \"c\", myprior_3$prior[1])))\n\nfitting[[\"ZIP\"]] <- brm(bf(f34, zi ~ 1),\n                        family = zero_inflated_poisson(),\n                        data = gexpr,\n                        prior = myprior_3,\n                        control = list(adapt_delta = adapt_delta),\n                        cores = nCores,\n                        seed = seed,\n                        refresh = 500)\n\n\nRunning MCMC with 4 chains, at most 2 in parallel...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 55.6 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 66.6 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 62.6 seconds.\nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 61.5 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 61.6 seconds.\nTotal execution time: 128.3 seconds.\n\nmessage('Fitting data with Zero-Inflated Negative Binomial model...')\nmyprior_4 <- get_prior(bf(f34, zi ~ 1),\n                       family = zero_inflated_negbinomial(),\n                       data = gexpr)\nmyprior_4_values <- eval(parse(text=gsub(\"student_t\", \"c\", myprior_4$prior[1])))\nfitting[[\"ZINB\"]] <- brm(bf(f34, zi ~ 1),\n                         family = zero_inflated_negbinomial(),\n                         data = gexpr,\n                         control = list(adapt_delta = adapt_delta),\n                         prior = myprior_4,\n                         cores = nCores,\n                         seed = seed,\n                         refresh = 500)\n\n\nRunning MCMC with 4 chains, at most 2 in parallel...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 39.1 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 42.8 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 39.8 seconds.\nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 53.8 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 43.9 seconds.\nTotal execution time: 93.2 seconds.\n\ncompare models\nI copied source code from:https://github.com/churchill-lab/scRATE/blob/master/R/compare_count_models.R to compare models\n\n\nlibrary(loo)\nmodels <- names(fitting)\nmodels\n\n\n[1] \"P\"    \"NB\"   \"ZIP\"  \"ZINB\"\n\nloo_list <- list()\n\nloo_1 <- loo(fitting$P)\nloo_list[['P']] <- loo_1\n\nloo_2 <- loo(fitting$NB)\nloo_list[['NB']] <- loo_2\n\nloo_3 <- loo(fitting$ZIP)\nloo_list[['ZIP']] <- loo_3\n\nloo_4 <- loo(fitting$ZINB)\nloo_list[['ZINB']] <- loo_4\n\nres <- do.call(loo_compare, list(loo_list))\nres\n\n\n     elpd_diff se_diff\nNB       0.0       0.0\nZINB    -1.3       0.2\nZIP  -1971.9     440.7\nP    -1976.3     442.7\n\n\n\nsessionInfo()\n\n\nR version 4.1.0 (2021-05-18)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS High Sierra 10.13.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] loo_2.4.1        brms_2.16.1      rstanarm_2.21.1 \n[4] Rcpp_1.0.7       loomR_0.2.1.9000 hdf5r_1.3.3     \n[7] R6_2.5.0        \n\nloaded via a namespace (and not attached):\n  [1] minqa_1.2.4          colorspace_2.0-2     ellipsis_0.3.2      \n  [4] ggridges_0.5.3       rsconnect_0.8.25     estimability_1.3    \n  [7] markdown_1.1         base64enc_0.1-3      rstudioapi_0.13     \n [10] farver_2.1.0         rstan_2.21.2         DT_0.19             \n [13] bit64_4.0.5          fansi_0.5.0          mvtnorm_1.1-2       \n [16] bridgesampling_1.1-2 codetools_0.2-18     splines_4.1.0       \n [19] downlit_0.4.0        cachem_1.0.5         knitr_1.33          \n [22] shinythemes_1.2.0    projpred_2.0.2       bayesplot_1.8.1     \n [25] jsonlite_1.7.2       nloptr_1.2.2.2       shiny_1.6.0         \n [28] compiler_4.1.0       emmeans_1.6.2-1      backports_1.2.1     \n [31] assertthat_0.2.1     Matrix_1.3-4         fastmap_1.1.0       \n [34] cli_3.0.1            later_1.2.0          htmltools_0.5.1.1   \n [37] prettyunits_1.1.1    tools_4.1.0          igraph_1.2.6        \n [40] coda_0.19-4          gtable_0.3.0         glue_1.4.2          \n [43] posterior_1.1.0      reshape2_1.4.4       dplyr_1.0.7         \n [46] V8_3.6.0             jquerylib_0.1.4      vctrs_0.3.8         \n [49] nlme_3.1-152         crosstalk_1.1.1      tensorA_0.36.2      \n [52] xfun_0.24            stringr_1.4.0        ps_1.6.0            \n [55] lme4_1.1-27.1        mime_0.11            miniUI_0.1.1.1      \n [58] lifecycle_1.0.0      gtools_3.9.2         MASS_7.3-54         \n [61] zoo_1.8-9            scales_1.1.1         colourpicker_1.1.1  \n [64] promises_1.2.0.1     Brobdingnag_1.2-6    sandwich_3.0-1      \n [67] parallel_4.1.0       inline_0.3.19        shinystan_2.5.0     \n [70] gamm4_0.2-6          yaml_2.2.1           curl_4.3.2          \n [73] memoise_2.0.0        pbapply_1.4-3        gridExtra_2.3       \n [76] ggplot2_3.3.5        StanHeaders_2.21.0-7 sass_0.4.0          \n [79] distill_1.3          stringi_1.7.3        dygraphs_1.1.1.6    \n [82] checkmate_2.0.0      boot_1.3-28          pkgbuild_1.2.0      \n [85] cmdstanr_0.4.0.9000  rlang_0.4.11         pkgconfig_2.0.3     \n [88] matrixStats_0.59.0   distributional_0.2.2 evaluate_0.14       \n [91] lattice_0.20-44      purrr_0.3.4          rstantools_2.1.1    \n [94] htmlwidgets_1.5.3    bit_4.0.4            processx_3.5.2      \n [97] tidyselect_1.1.1     plyr_1.8.6           magrittr_2.0.1      \n[100] generics_0.1.0       DBI_1.1.1            mgcv_1.8-36         \n[103] pillar_1.6.2         withr_2.4.2          xts_0.12.1          \n[106] survival_3.2-11      abind_1.4-5          tibble_3.1.3        \n[109] crayon_1.4.1         utf8_1.2.2           rmarkdown_2.11      \n[112] grid_4.1.0           data.table_1.14.0    callr_3.7.0         \n[115] threejs_0.3.3        digest_0.6.27        xtable_1.8-4        \n[118] httpuv_1.6.1         RcppParallel_5.1.4   stats4_4.1.0        \n[121] munsell_0.5.0        bslib_0.2.5.1        shinyjs_2.0.0       \n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-11-23-scrnageneexpr03/",
    "title": "03.scRNA-seq: fit P, NB, ZIP, ZINB models in a Bayesian framework with simulated data",
    "description": "Simulate data following the four statistical models and estimate parameters in a Bayesian framework with R package rstanarm, brms, and cmdstanr.",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-11-23",
    "categories": [],
    "contents": "\n\nContents\nset up formulas\nPoisson model\nNegative Binomial model\nZero-inflated Poisson model\nZero-inflated Negative Binomial model\n\nIn this post, I’d fit the four models in a Bayesian framework with simulated data.\nset up formulas\n\n\n# simulate data and fit model using rstan\nlibrary(rstanarm)\n#https://mc-stan.org/rstanarm/reference/stan_glm.html\n\nf0='y ~ 1' #intercept only model\nf1='y ~ 1+group' #with one covariate\nnCores=2;\nn=1000;\n\nseed=2049;\ngroup <- sample(c(0,1), size = n, replace = TRUE) #covariate\n\n\n\nPoisson model\n\n\n# simulate data following Poisson model and fit model\nseed=2049;\nsimu.dat=data.frame(y=rpois(n,lambda=2),group=group)\n\nm0 <-   stan_glm(as.formula(f0),\n                             family = poisson,#default link = \"log\" \n                             data = simu.dat,\n                             cores = nCores,\n                             seed = seed,\n                             refresh = 0)\nm0$coefficients\n\n\n(Intercept) \n   0.740331 \n\nexp(m0$coefficients)\n\n\n(Intercept) \n   2.096629 \n\nm1 <-   stan_glm(as.formula(f1),\n                 family = poisson,#default link = \"log\" \n                 data = simu.dat,\n                 cores = nCores,\n                 seed = seed,\n                 refresh = 0)\nm1$coefficients\n\n\n(Intercept)       group \n 0.75065387 -0.02274826 \n\nexp(m1$coefficients) \n\n\n(Intercept)       group \n  2.1183847   0.9775085 \n\n# use loo to compare two models\n#http://mc-stan.org/loo/reference/loo_compare\n#https://github.com/churchill-lab/scRATE/blob/master/R/compare_count_models.R\n#https://mc-stan.org/loo/reference/loo-glossary.html\n#The ELPD is the theoretical expected log pointwise predictive density for a new dataset (Eq 1 in VGG2017), which can be estimated, e.g., using cross-validation. elpd_loo is the Bayesian LOO estimate of the expected log pointwise predictive density (Eq 4 in VGG2017) and is a sum of N individual pointwise log predictive densities. \n\nlibrary(loo)\nloo_list=list()\nloo_list[['m0']]=loo(m0)\nloo_list[['m1']]=loo(m1)\nelpd_loo <- do.call(loo_compare, list(loo_list))\nelpd_loo\n\n\n   elpd_diff se_diff\nm0  0.0       0.0   \nm1 -0.9       0.6   \n\n#the best model is in the 1st row\n\n\n\nNegative Binomial model\n\n\n# simulate data following Negative Binomial model and fit model\n#http://mc-stan.org/rstanarm/reference/neg_binomial_2.html\n#https://mc-stan.org/rstanarm/reference/stan_glm.html\n#For negative binomial models prior_aux controls \"reciprocal_dispersion\", \n#which is similar to the \"size\" parameter of rnbinom: \n#smaller values of \"reciprocal_dispersion\" correspond to greater dispersion. \n\n## 1) test model\nseed=2049\nsimu.dat=data.frame(y=MASS::rnegbin(1000,mu=2,theta=0.5),group=group)\nseed=2049\nsimu.dat=data.frame(y=rnbinom(1000,mu=2,size=0.5),group=group)\n\nm0=stan_glm(as.formula(f0),\n            family = neg_binomial_2, #default, link='log'\n            data = simu.dat,\n            cores = nCores,\n            seed = seed,\n            refresh = 0)\n\nm0\n\n\nstan_glm\n family:       neg_binomial_2 [log]\n formula:      y ~ 1\n observations: 1000\n predictors:   1\n------\n            Median MAD_SD\n(Intercept) 0.7    0.0   \n\nAuxiliary parameter(s):\n                      Median MAD_SD\nreciprocal_dispersion 0.5    0.0   \n\n------\n* For help interpreting the printed output see ?print.stanreg\n* For info on the priors used see ?prior_summary.stanreg\n\nm0$coefficient\n\n\n(Intercept) \n  0.7125498 \n\nexp(m0$coefficients) #default, link='log'\n\n\n(Intercept) \n   2.039184 \n\n## 2) model comparison\nsimu.dat=data.frame(y=MASS::rnegbin(1000,mu=exp(2+1.5*(group==1)),\n                                    theta=0.5),group=group)\n\nm0=stan_glm(as.formula(f0),\n            family = neg_binomial_2, #default, link='log'\n            data = simu.dat,\n            cores = nCores,\n            seed = seed,\n            refresh = 0)\n\nm0\n\n\nstan_glm\n family:       neg_binomial_2 [log]\n formula:      y ~ 1\n observations: 1000\n predictors:   1\n------\n            Median MAD_SD\n(Intercept) 3.0    0.1   \n\nAuxiliary parameter(s):\n                      Median MAD_SD\nreciprocal_dispersion 0.4    0.0   \n\n------\n* For help interpreting the printed output see ?print.stanreg\n* For info on the priors used see ?prior_summary.stanreg\n\nm0$coefficient\n\n\n(Intercept) \n   3.022633 \n\n#exp(fit.out$coefficients) #default, link='log'\n\nm1=stan_glm(as.formula(f1),\n            family = neg_binomial_2, #default, link='log'\n            data = simu.dat,\n            cores = nCores,\n            seed = seed,\n            refresh = 0)\nm1\n\n\nstan_glm\n family:       neg_binomial_2 [log]\n formula:      y ~ 1 + group\n observations: 1000\n predictors:   2\n------\n            Median MAD_SD\n(Intercept) 1.9    0.1   \ngroup       1.6    0.1   \n\nAuxiliary parameter(s):\n                      Median MAD_SD\nreciprocal_dispersion 0.5    0.0   \n\n------\n* For help interpreting the printed output see ?print.stanreg\n* For info on the priors used see ?prior_summary.stanreg\n\nm1$coefficients\n\n\n(Intercept)       group \n   1.937089    1.597672 \n\nloo_list[['m0']]=loo(m0)\nloo_list[['m1']]=loo(m1)\nloo_compare(loo_list)\n\n\n   elpd_diff se_diff\nm1    0.0       0.0 \nm0 -128.9      12.5 \n\nZero-inflated Poisson model\nA Zero-inflated Possion model has two component: inlfated 0 and a Possion distribution.\nThus, the probability of observing a 0 equals:\n\\[ P(Y=0) = \\pi + (1-\\pi) *Poisson(0|lambda) \\]\n\n\n# use brms package to fit zero-inflated models\nlibrary(brms);\nadapt_delta=0.8;\n\noptions(brms.backend = \"cmdstanr\")\n\n# simulate data following zero-inflated Possion model and fit model\n#https://stats.stackexchange.com/questions/189005/simulate-from-a-zero-inflated-poisson-distribution/189052\npi=0.2; lambda=2\ny=ifelse(rbinom(n, size = 1, prob = 1-pi) == 0, 0, rpois(n, lambda = lambda))\nsimu.dat=data.frame(y=y)\n\n#https://stat.ethz.ch/R-manual/R-devel/library/stats/html/NegBinomial.html\nmyprior <- get_prior(bf(as.formula(f0), zi ~ 1),\n                       family = zero_inflated_poisson(),\n                       data = simu.dat)\nmyprior_values <- eval(parse(text=gsub(\"student_t\", \"c\", myprior$prior[1])))\nm0<- brm(bf(as.formula(f0), zi ~ 1),\n                        family = zero_inflated_poisson(),\n                        data = simu.dat,\n                        prior = myprior,\n                        control = list(adapt_delta = adapt_delta),\n                        cores = nCores,\n                        seed = seed,\n                        refresh = 500)\n\n\nRunning MCMC with 4 chains, at most 2 in parallel...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 2.9 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 3.2 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 2.9 seconds.\nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 3.1 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 3.0 seconds.\nTotal execution time: 6.5 seconds.\n\nm0\n\n\n Family: zero_inflated_poisson \n  Links: mu = log; zi = logit \nFormula: y ~ 1 \n         zi ~ 1\n   Data: simu.dat (Number of observations: 1000) \n  Draws: 4 chains, each with iter = 1000; warmup = 0; thin = 1;\n         total post-warmup draws = 4000\n\nPopulation-Level Effects: \n             Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS\nIntercept        0.68      0.03     0.62     0.74 1.00     1479\nzi_Intercept    -1.41      0.12    -1.67    -1.18 1.00     1751\n             Tail_ESS\nIntercept        2313\nzi_Intercept     2115\n\nDraws were sampled using sample(hmc). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\nx=brms::posterior_summary(m0)\nx\n\n\n                    Estimate  Est.Error          Q2.5         Q97.5\nb_Intercept        0.6753027 0.03099307     0.6161892     0.7354821\nb_zi_Intercept    -1.4131916 0.12252405    -1.6696777    -1.1844935\nIntercept          0.6753027 0.03099307     0.6161892     0.7354821\nIntercept_zi      -1.4131916 0.12252405    -1.6696777    -1.1844935\nlp__           -1665.8615675 1.03804304 -1668.6705000 -1664.8400000\n\n# possion, lambda, link function: mu=log\nexp(x[1,1]) #lambda\n\n\n[1] 1.964628\n\n# zero inflation, link function: zi = logit \nexp(x[4,1])/(1+exp(x[4,1])) #p\n\n\n[1] 0.1957312\n\nZero-inflated Negative Binomial model\nA Zero-inflated Negative Binomial model has two component: inlfated 0 and a Negative Binomial distribution.\nThus, the probability of observing a 0 equals:\n\\[ P(Y=0) = \\pi + (1-\\pi) *NB(0|mu,size) \\]\n\n\n# simulate data following zero-inflated Negative Binomial model and fit model\nset.seed(6)\npi=0.3\nz <- rbinom(n = n, size = 1, prob = 1-pi) \n# mean(z == 0)\ny_sim <- ifelse(z == 0, 0, \n                rnbinom(n = n, \n                        mu = exp(5), \n                        size = 3))\nsimu.dat=data.frame(y=y_sim,group=group)\n\nmessage('Fitting data with Zero-Inflated Negative Binomial model...')\nmyprior <- get_prior(bf(as.formula(f0), zi ~ 1),\n                       family = zero_inflated_negbinomial(),\n                       data = simu.dat)\nmyprior_values <- eval(parse(text=gsub(\"student_t\", \"c\", myprior$prior[1])))\nm0 <- brm(bf(as.formula(f0), zi ~ 1),\n                         family = zero_inflated_negbinomial(),\n                         data = simu.dat,\n                         control = list(adapt_delta = adapt_delta),\n                         prior = myprior,\n                         cores = nCores,\n                         seed = seed,\n                         refresh = 500)\n\n\nRunning MCMC with 4 chains, at most 2 in parallel...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 4.7 seconds.\nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 5.0 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 4.3 seconds.\nChain 4 finished in 4.1 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 4.5 seconds.\nTotal execution time: 9.2 seconds.\n\nm0\n\n\n Family: zero_inflated_negbinomial \n  Links: mu = log; shape = identity; zi = logit \nFormula: y ~ 1 \n         zi ~ 1\n   Data: simu.dat (Number of observations: 1000) \n  Draws: 4 chains, each with iter = 1000; warmup = 0; thin = 1;\n         total post-warmup draws = 4000\n\nPopulation-Level Effects: \n             Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS\nIntercept        5.03      0.02     4.99     5.08 1.00     3759\nzi_Intercept    -0.84      0.07    -0.97    -0.70 1.00     3762\n             Tail_ESS\nIntercept        2734\nzi_Intercept     2751\n\nFamily Specific Parameters: \n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nshape     3.09      0.16     2.78     3.40 1.00     4096     3121\n\nDraws were sampled using sample(hmc). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n#Family: zero_inflated_negbinomial \n#Links: mu = log; shape = identity; zi = logit \nx=posterior_summary(m0)\nx\n\n\n                    Estimate  Est.Error          Q2.5         Q97.5\nb_Intercept        5.0309380 0.02204203     4.9883687     5.0756602\nb_zi_Intercept    -0.8369572 0.06719812    -0.9691769    -0.7047863\nshape              3.0885394 0.16088103     2.7834585     3.4033623\nIntercept          5.0309380 0.02204203     4.9883687     5.0756602\nIntercept_zi      -0.8369572 0.06719812    -0.9691769    -0.7047863\nlp__           -4655.9800825 1.23179195 -4659.3100000 -4654.6100000\n\n# possion, lambda, link function: mu=log\nx[1,1] #lambda\n\n\n[1] 5.030938\n\nx[3,1] #shape or size\n\n\n[1] 3.088539\n\n# zero inflation, link function: zi = logit \nexp(x[5,1])/(1+exp(x[5,1])) #prob\n\n\n[1] 0.302176\n\n## add covarite\nset.seed(6)\npi=0.3\nz <- rbinom(n = n, size = 1, prob = 1-pi) \n# mean(z == 0)\ny_sim <- ifelse(z == 0, 0, \n                rnbinom(n = n, \n                        mu = exp(5+1.5*(group==1)), \n                        size = 3))\nsimu.dat=data.frame(y=y_sim,group=group)\n\nmessage('Fitting data with Zero-Inflated Negative Binomial model...')\nmyprior <- get_prior(bf(as.formula('y~1'), zi ~ 1),\n                       family = zero_inflated_negbinomial(),\n                       data = simu.dat)\nmyprior_values <- eval(parse(text=gsub(\"student_t\", \"c\", myprior$prior[1])))\nm0<-brm(bf(as.formula('y~1'), zi ~ 1),\n        family = zero_inflated_negbinomial(),\n        data = simu.dat,\n        control = list(adapt_delta = adapt_delta),\n        prior = myprior,\n        cores = nCores,\n        seed = seed,\n        refresh = 500)\n\n\nRunning MCMC with 4 chains, at most 2 in parallel...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 4.0 seconds.\nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 finished in 4.1 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 3.6 seconds.\nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 4.4 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 4.0 seconds.\nTotal execution time: 8.7 seconds.\n\nx=brms::posterior_summary(m0)\nx\n\n\n                    Estimate  Est.Error          Q2.5         Q97.5\nb_Intercept        6.0517846 0.03408241     5.9847993     6.1188020\nb_zi_Intercept    -0.8388666 0.06900001    -0.9773625    -0.7088822\nshape              1.2329947 0.06059265     1.1186750     1.3546025\nIntercept          6.0517846 0.03408241     5.9847993     6.1188020\nIntercept_zi      -0.8388666 0.06900001    -0.9773625    -0.7088822\nlp__           -5535.7736400 1.21228095 -5538.7505000 -5534.3800000\n\nmyprior <- get_prior(bf(as.formula('y~1+group'), zi ~ 1),\n                     family = zero_inflated_negbinomial(),\n                     data = simu.dat)\nm1 <- brm(bf(as.formula('y~1+group'), zi ~ 1),\n                         family = zero_inflated_negbinomial(),\n                         data = simu.dat,\n                         control = list(adapt_delta = adapt_delta),\n                         prior = myprior,\n                         cores = nCores,\n                         seed = seed,\n                         refresh = 500)\n\n\nRunning MCMC with 4 chains, at most 2 in parallel...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 4.3 seconds.\nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 finished in 4.4 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 4.4 seconds.\nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 4.8 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 4.5 seconds.\nTotal execution time: 9.3 seconds.\n\nx=brms::posterior_summary(m1)\nx\n\n\n                   Estimate  Est.Error          Q2.5         Q97.5\nb_Intercept        5.005789 0.03178481     4.9458535     5.0675015\nb_zi_Intercept    -0.836455 0.06880482    -0.9735041    -0.7060338\nb_group            1.542648 0.04443010     1.4562753     1.6313010\nshape              2.921166 0.15255552     2.6331545     3.2174758\nIntercept          5.774028 0.02205470     5.7315295     5.8178305\nIntercept_zi      -0.836455 0.06880482    -0.9735041    -0.7060338\nlp__           -5191.455835 1.38545831 -5195.0302500 -5189.7000000\n\n#Family: zero_inflated_negbinomial \n#Links: mu = log; shape = identity; zi = logit \n# possion, lambda, link function: mu=log\nx[1,1] #lambda\n\n\n[1] 5.005789\n\nx[4,1] #shape or size\n\n\n[1] 2.921166\n\nx[3,1] #covariate beta\n\n\n[1] 1.542648\n\n# zero inflation, link function: zi = logit \nexp(x[6,1])/(1+exp(x[6,1])) #prob\n\n\n[1] 0.3022819\n\nloo_list=list()\nloo_list[['m0']]=loo(m0)\nloo_list[['m1']]=loo(m1)\nloo_compare(loo_list)\n\n\n   elpd_diff se_diff\nm1    0.0       0.0 \nm0 -343.6      19.3 \n\n\n\nsessionInfo()\n\n\nR version 4.1.0 (2021-05-18)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS High Sierra 10.13.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] brms_2.16.1     loo_2.4.1       rstanarm_2.21.1 Rcpp_1.0.7     \n\nloaded via a namespace (and not attached):\n  [1] minqa_1.2.4          colorspace_2.0-2     ellipsis_0.3.2      \n  [4] ggridges_0.5.3       rsconnect_0.8.25     estimability_1.3    \n  [7] markdown_1.1         base64enc_0.1-3      rstudioapi_0.13     \n [10] farver_2.1.0         rstan_2.21.2         DT_0.19             \n [13] fansi_0.5.0          mvtnorm_1.1-2        bridgesampling_1.1-2\n [16] codetools_0.2-18     splines_4.1.0        downlit_0.4.0       \n [19] cachem_1.0.5         knitr_1.33           shinythemes_1.2.0   \n [22] projpred_2.0.2       bayesplot_1.8.1      jsonlite_1.7.2      \n [25] nloptr_1.2.2.2       shiny_1.6.0          compiler_4.1.0      \n [28] emmeans_1.6.2-1      backports_1.2.1      assertthat_0.2.1    \n [31] Matrix_1.3-4         fastmap_1.1.0        cli_3.0.1           \n [34] later_1.2.0          htmltools_0.5.1.1    prettyunits_1.1.1   \n [37] tools_4.1.0          igraph_1.2.6         coda_0.19-4         \n [40] gtable_0.3.0         glue_1.4.2           reshape2_1.4.4      \n [43] dplyr_1.0.7          posterior_1.1.0      V8_3.6.0            \n [46] jquerylib_0.1.4      vctrs_0.3.8          nlme_3.1-152        \n [49] crosstalk_1.1.1      tensorA_0.36.2       xfun_0.24           \n [52] stringr_1.4.0        ps_1.6.0             lme4_1.1-27.1       \n [55] mime_0.11            miniUI_0.1.1.1       lifecycle_1.0.0     \n [58] gtools_3.9.2         MASS_7.3-54          zoo_1.8-9           \n [61] scales_1.1.1         colourpicker_1.1.1   promises_1.2.0.1    \n [64] Brobdingnag_1.2-6    sandwich_3.0-1       parallel_4.1.0      \n [67] inline_0.3.19        shinystan_2.5.0      gamm4_0.2-6         \n [70] yaml_2.2.1           curl_4.3.2           memoise_2.0.0       \n [73] gridExtra_2.3        ggplot2_3.3.5        StanHeaders_2.21.0-7\n [76] sass_0.4.0           distill_1.3          stringi_1.7.3       \n [79] dygraphs_1.1.1.6     checkmate_2.0.0      boot_1.3-28         \n [82] pkgbuild_1.2.0       cmdstanr_0.4.0.9000  rlang_0.4.11        \n [85] pkgconfig_2.0.3      matrixStats_0.59.0   distributional_0.2.2\n [88] evaluate_0.14        lattice_0.20-44      purrr_0.3.4         \n [91] rstantools_2.1.1     htmlwidgets_1.5.3    processx_3.5.2      \n [94] tidyselect_1.1.1     plyr_1.8.6           magrittr_2.0.1      \n [97] R6_2.5.0             generics_0.1.0       DBI_1.1.1           \n[100] mgcv_1.8-36          pillar_1.6.2         withr_2.4.2         \n[103] xts_0.12.1           survival_3.2-11      abind_1.4-5         \n[106] tibble_3.1.3         crayon_1.4.1         utf8_1.2.2          \n[109] rmarkdown_2.11       grid_4.1.0           data.table_1.14.0   \n[112] callr_3.7.0          threejs_0.3.3        digest_0.6.27       \n[115] xtable_1.8-4         httpuv_1.6.1         RcppParallel_5.1.4  \n[118] stats4_4.1.0         munsell_0.5.0        bslib_0.2.5.1       \n[121] shinyjs_2.0.0       \n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-11-23-scrnageneexpr02/",
    "title": "02.scRNA-seq: fit ZIP model with cmdstanr R package",
    "description": "Simulate data following Zero-inflated Possion model and estimate parameters in a Bayesian framework",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-11-22",
    "categories": [],
    "contents": "\n\nContents\nuse brms to fit Zero-inflated Possion model\ninstall cmdstanr\nuse cmdstanr to fit ZIP model\n\nThis post belongs to the ‘modelling gene expression with single cell data’ series.\nI’d use brms and cmdstanr r package to fit Zero-inflated Possion model in a Bayesian framework.\nuse brms to fit Zero-inflated Possion model\nRef: https://stats.idre.ucla.edu/r/dae/zip/\nA Zero-inflated Possion model has two component: inlfated 0 and a Possion distribution.\nThus, the probability of observing a 0 equals:\n\\[ P(Y=0) = \\pi + (1-\\pi) *Poisson(0|lambda) \\]\nsimulate some data first\n\n\nlibrary(brms) \nf0='y ~ 1'\nadapt_delta=0.8\nnCores=2\nseed=2049\n\n### zero-inflated Possion model \n#https://stats.stackexchange.com/questions/189005/simulate-from-a-zero-inflated-poisson-distribution/189052\nn=1000;\npi=0.2; lambda=2\nset.seed(2049)\ny=ifelse(rbinom(n, size = 1, prob = 1-pi) == 0, 0, rpois(n, lambda = lambda))\nsimu.dat=data.frame(y=y)\nhist(y,main='Zero-inflated Possion model')\n\n\n\n\nbegin to fit model\n\n\nmyprior <- get_prior(bf(as.formula(f0), zi ~ 1),\n                       family = zero_inflated_poisson(),\n                       data = simu.dat)\nmyprior_values <- eval(parse(text=gsub(\"student_t\", \"c\", myprior$prior[1])))\n\n\n\n\n\nfit.out=brm(bf(as.formula(f0), zi ~ 1),\n                        family = zero_inflated_poisson(),\n                        data = simu.dat,\n                        prior = myprior,\n                        control = list(adapt_delta = adapt_delta),\n                        cores = nCores,\n                        seed = seed,\n                        refresh = 500)\n\n\n\nThere are some error message when running brm()\n\nerror message: #SAMPLING FOR MODEL ‘373567a7b30c7389e50b3f232b41cb74’ NOW (CHAIN 1).\n\n\nError in unserialize(socklist[[n]]) : error reading from connection\n\n\nSAMPLING FOR MODEL ‘373567a7b30c7389e50b3f232b41cb74’ NOW (CHAIN 2).\n\nI did some search and found a solution which requie the installation of cmdstanr package\ninstall cmdstanr\n\n\n#https://mc-stan.org/cmdstanr/articles/cmdstanr.html\n#https://githubmemory.com/repo/stan-dev/cmdstanr/issues/552\nremotes::install_github(\"stan-dev/cmdstanr\")\n## test cmdstanr\nlibrary(cmdstanr)\nlibrary(posterior)\nlibrary(bayesplot)\ncolor_scheme_set(\"brightblue\")\n\ncheck_cmdstan_toolchain()\ninstall_cmdstan(cores = 2)\n#* Finished installing CmdStan to /Users/ming/.cmdstan/cmdstan-2.28.1\n#CmdStan path set to: /Users/ming/.cmdstan/cmdstan-2.28.1\n# check path\ncmdstan_path()\ncmdstan_version() #2.28.1\n\n\n\nuse cmdstanr to fit ZIP model\n\n\nlibrary(brms)\noptions(brms.backend = \"cmdstanr\")\nfit.out=brm(bf(as.formula(f0), zi ~ 1),\n                        family = zero_inflated_poisson(),\n                        data = simu.dat,\n                        prior = myprior,\n                        control = list(adapt_delta = adapt_delta),\n                        cores = nCores,\n                        seed = seed,\n                        refresh = 500)\n\n\nRunning MCMC with 4 chains, at most 2 in parallel...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 2.8 seconds.\nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 finished in 2.9 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 3.2 seconds.\nChain 4 finished in 3.0 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 3.0 seconds.\nTotal execution time: 6.2 seconds.\n\nfit.out #Links: mu = log; zi = logit \n\n\n Family: zero_inflated_poisson \n  Links: mu = log; zi = logit \nFormula: y ~ 1 \n         zi ~ 1\n   Data: simu.dat (Number of observations: 1000) \n  Draws: 4 chains, each with iter = 1000; warmup = 0; thin = 1;\n         total post-warmup draws = 4000\n\nPopulation-Level Effects: \n             Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS\nIntercept        0.67      0.03     0.61     0.73 1.00     2372\nzi_Intercept    -1.41      0.12    -1.65    -1.19 1.00     2173\n             Tail_ESS\nIntercept        2504\nzi_Intercept     2083\n\nDraws were sampled using sample(hmc). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\nx=brms::posterior_summary(fit.out)\nexp(x[1,1]) #Links: mu = log\n\n\n[1] 1.948527\n\nexp(x[4,1])/(1+exp(x[4,1])) #prob, link='logit'\n\n\n[1] 0.1955083\n\n\n\nsessionInfo()\n\n\nR version 4.1.0 (2021-05-18)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS High Sierra 10.13.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] brms_2.16.1 Rcpp_1.0.7 \n\nloaded via a namespace (and not attached):\n  [1] minqa_1.2.4          colorspace_2.0-2     ellipsis_0.3.2      \n  [4] ggridges_0.5.3       rsconnect_0.8.25     estimability_1.3    \n  [7] markdown_1.1         base64enc_0.1-3      rstudioapi_0.13     \n [10] farver_2.1.0         rstan_2.21.2         DT_0.19             \n [13] fansi_0.5.0          mvtnorm_1.1-2        codetools_0.2-18    \n [16] bridgesampling_1.1-2 splines_4.1.0        downlit_0.4.0       \n [19] cachem_1.0.5         knitr_1.33           shinythemes_1.2.0   \n [22] bayesplot_1.8.1      projpred_2.0.2       jsonlite_1.7.2      \n [25] nloptr_1.2.2.2       shiny_1.6.0          compiler_4.1.0      \n [28] emmeans_1.6.2-1      backports_1.2.1      assertthat_0.2.1    \n [31] Matrix_1.3-4         fastmap_1.1.0        cli_3.0.1           \n [34] later_1.2.0          htmltools_0.5.1.1    prettyunits_1.1.1   \n [37] tools_4.1.0          igraph_1.2.6         coda_0.19-4         \n [40] gtable_0.3.0         glue_1.4.2           reshape2_1.4.4      \n [43] dplyr_1.0.7          posterior_1.1.0      V8_3.6.0            \n [46] jquerylib_0.1.4      vctrs_0.3.8          nlme_3.1-152        \n [49] crosstalk_1.1.1      tensorA_0.36.2       xfun_0.24           \n [52] stringr_1.4.0        ps_1.6.0             lme4_1.1-27.1       \n [55] mime_0.11            miniUI_0.1.1.1       lifecycle_1.0.0     \n [58] gtools_3.9.2         MASS_7.3-54          zoo_1.8-9           \n [61] scales_1.1.1         colourpicker_1.1.1   promises_1.2.0.1    \n [64] Brobdingnag_1.2-6    sandwich_3.0-1       parallel_4.1.0      \n [67] inline_0.3.19        shinystan_2.5.0      gamm4_0.2-6         \n [70] yaml_2.2.1           curl_4.3.2           memoise_2.0.0       \n [73] gridExtra_2.3        ggplot2_3.3.5        StanHeaders_2.21.0-7\n [76] loo_2.4.1            sass_0.4.0           distill_1.3         \n [79] stringi_1.7.3        highr_0.9            dygraphs_1.1.1.6    \n [82] checkmate_2.0.0      boot_1.3-28          pkgbuild_1.2.0      \n [85] cmdstanr_0.4.0.9000  rlang_0.4.11         pkgconfig_2.0.3     \n [88] matrixStats_0.59.0   distributional_0.2.2 evaluate_0.14       \n [91] lattice_0.20-44      purrr_0.3.4          rstantools_2.1.1    \n [94] htmlwidgets_1.5.3    tidyselect_1.1.1     processx_3.5.2      \n [97] plyr_1.8.6           magrittr_2.0.1       R6_2.5.0            \n[100] generics_0.1.0       DBI_1.1.1            pillar_1.6.2        \n[103] withr_2.4.2          mgcv_1.8-36          xts_0.12.1          \n[106] survival_3.2-11      abind_1.4-5          tibble_3.1.3        \n[109] crayon_1.4.1         utf8_1.2.2           rmarkdown_2.11      \n[112] grid_4.1.0           data.table_1.14.0    callr_3.7.0         \n[115] threejs_0.3.3        digest_0.6.27        xtable_1.8-4        \n[118] httpuv_1.6.1         RcppParallel_5.1.4   stats4_4.1.0        \n[121] munsell_0.5.0        bslib_0.2.5.1        shinyjs_2.0.0       \n\n\n\n\n",
    "preview": "posts/2021-11-23-scrnageneexpr02/distill-preview.png",
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-11-23-scrnageneexpr01/",
    "title": "01.scRNA-seq: fit P, NB, ZIP, ZINM models using simulated data",
    "description": "Simulate data following one of the four distritutions and estimate parameters in R.",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-11-21",
    "categories": [],
    "contents": "\n\nContents\nPossion model\nZero-inflated Possion model\nNegative Binomial model\nZero-inflated Negative Binomial model\n\nThis is the 2nd post of the ‘modelling gene expression with single cell data’ series.\nBefore jumping into real scRNA-seq data, in this post, I’d test the four most frequently used statistical models in single cell gene expression modelling in R.\nP Possion model\nNB Negative Binomial model\nZIP Zero-Inflated Poisson\nZINB Zero-Inflated Negative Binomial\nI’d simulate some data following certain probability distribution and use functions inside R to fit model and perform parameter estimation.\nPossion model\n\n\n# simulate 500 numbers following Possion model \nset.seed(2049)\ny <- rpois(n = 500, lambda = 4)\nn <- 500\ngroup <- sample(c(0,1), size = n, replace = TRUE)\ny_sim <- rpois(n = n, lambda = exp(-2 + 0.5 * (group == 1)))\ntable(y_sim,group)\n\n\n     group\ny_sim   0   1\n    0 208 210\n    1  24  49\n    2   2   7\n\npar(mfrow=c(2,1))\nhist(y_sim[group==0],main='Possion, group0')\nhist(y_sim[group==1],main='Possion, group1')\n\n\n\n# fit model\nm1 <- glm(y_sim ~ group, family = poisson(link='log') )\nsummary(m1)\n\n\n\nCall:\nglm(formula = y_sim ~ group, family = poisson(link = \"log\"))\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-0.6883  -0.6883  -0.4892  -0.4892   2.7394  \n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  -2.1231     0.1890 -11.234  < 2e-16 ***\ngroup         0.6828     0.2271   3.006  0.00265 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 335.04  on 499  degrees of freedom\nResidual deviance: 325.33  on 498  degrees of freedom\nAIC: 498.86\n\nNumber of Fisher Scoring iterations: 6\n\nm0 <- update(m1, . ~ 1)\nlogLik(m0)\n\n\n'log Lik.' -252.2794 (df=1)\n\nlogLik(m1)\n\n\n'log Lik.' -247.4284 (df=2)\n\npchisq(2 * (logLik(m1) - logLik(m0)), df = 1, lower.tail = FALSE)\n\n\n'log Lik.' 0.001840521 (df=2)\n\n#https://norcalbiostat.github.io/AppliedStatistics_notes/model-fit-criteria.html\nAIC(m0,m1) #Smaller is better\n\n\n   df      AIC\nm0  1 506.5589\nm1  2 498.8567\n\nBIC(m0,m1) #Smaller is better\n\n\n   df      BIC\nm0  1 510.7735\nm1  2 507.2860\n\nZero-inflated Possion model\nRef: https://stats.idre.ucla.edu/r/dae/zip/\nA Zero-inflated Possion model has two component: inlfated 0 and a Possion distribution.\nThus, the probability of observing a 0 equals:\n\\[ P(Y=0) = \\pi + (1-\\pi) *Poisson(0|lambda) \\]\n\n\n#simulate data following zero-inflated Possion model \n#https://stats.stackexchange.com/questions/189005/simulate-from-a-zero-inflated-poisson-distribution/189052\nset.seed(2049)\nn=1000; \npi=0.2;  #which means 1-pi=0.8 to be Poisson\nlambda=2; #lambda parameter in the Possion distribution\ny=ifelse(rbinom(n, size = 1, prob = 1-pi) == 0, 0, rpois(n, lambda = lambda))\ngroup=sample(c('a','b'),n,replace = T)\nsimu.dat=data.frame(y=y,group=group)\n\npar(mfrow=c(1,1))\nhist(y,main='Zero-inflated Possion')\n\n\n\n# fit model\nlibrary(pscl)\nm0 <- zeroinfl(y ~ 1, data = simu.dat)\nx=summary(m0)\nx\n\n\n\nCall:\nzeroinfl(formula = y ~ 1, data = simu.dat)\n\nPearson residuals:\n    Min      1Q  Median      3Q     Max \n-1.0657 -1.0657 -0.3865  0.4625  3.6888 \n\nCount model coefficients (poisson with log link):\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  0.66813    0.03069   21.77   <2e-16 ***\n\nZero-inflation model coefficients (binomial with logit link):\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  -1.4139     0.1196  -11.82   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n\nNumber of iterations in BFGS optimization: 9 \nLog-likelihood: -1647 on 2 Df\n\nx$coefficients\n\n\n$count\n             Estimate Std. Error  z value      Pr(>|z|)\n(Intercept) 0.6681281 0.03069023 21.77006 4.460646e-105\n\n$zero\n             Estimate Std. Error   z value     Pr(>|z|)\n(Intercept) -1.413866  0.1196366 -11.81801 3.150731e-32\n\nexp(x$coefficients$count[1]) #possion, link.func=log\n\n\n[1] 1.950583\n\nexp(x$coefficients$zero[1])/(1+exp(x$coefficients$zero[1])) # zero inflation which is not due to Poisson, link.func=logit\n\n\n[1] 0.1956249\n\n# maximal likelihood \nm1 <- update(m0, . ~ group)\nlogLik(m0)\n\n\n'log Lik.' -1647.205 (df=2)\n\nlogLik(m1)\n\n\n'log Lik.' -1647.118 (df=4)\n\npchisq(2 * (logLik(m1) - logLik(m0)), df = 2, lower.tail = FALSE) #m1 is not sig. better than m0. as in simulation, i just randomly assign numbers to two groups.\n\n\n'log Lik.' 0.9168065 (df=4)\n\nAIC(m0,m1)\n\n\n   df      AIC\nm0  2 3298.410\nm1  4 3302.236\n\nBIC(m0,m1)\n\n\n   df      BIC\nm0  2 3308.225\nm1  4 3321.867\n\nNegative Binomial model\nI used rnbinom function in stats R to simulate numbers.\nSome explanations about this function:\n\nrnbinom(n, size, prob, mu)\n\n\nsize: target for number of successful trials, or dispersion parameter (the shape parameter of the gamma mixing distribution). Must be strictly positive, need not be integer.\n\n\nAn alternative parametrization (often used in ecology) is by the mean mu (see above), and size, the dispersion parameter, where prob = size/(size+mu). The variance is mu + mu^2/size in this parametrization.\n\n\n\n# simulate negative binomial model\n#https://data.library.virginia.edu/simulating-data-for-count-models/\nset.seed(2049)\nn <- 1000\ny_sim <- rnbinom(n = n, mu =5, size = 2)\n\npar(mfrow=c(1,1))\nhist(y_sim,main='Negative Binomial model')\n\n\n\nm3 <- MASS::glm.nb(y_sim ~ 1)\nsummary(m3)\n\n\n\nCall:\nMASS::glm.nb(formula = y_sim ~ 1, init.theta = 2.096160936, link = log)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-2.2882  -0.9548  -0.3058   0.3843   3.0801  \n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  1.65096    0.02586   63.83   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for Negative Binomial(2.0962) family taken to be 1)\n\n    Null deviance: 1119.5  on 999  degrees of freedom\nResidual deviance: 1119.5  on 999  degrees of freedom\nAIC: 5351.7\n\nNumber of Fisher Scoring iterations: 1\n\n              Theta:  2.096 \n          Std. Err.:  0.138 \n\n 2 x log-likelihood:  -5347.740 \n\n# mu: (link.function=log)\n# Theta: the size parameter used in simulating data\nexp(m3$coefficients)\n\n\n(Intercept) \n      5.212 \n\nm3$theta\n\n\n[1] 2.096161\n\n# add one covariate \nset.seed(2049)\nn <- 500\ngroup <- sample(c(0,1), size = n, replace = TRUE)\ny_sim <- rnbinom(n = n, \n                 mu =exp(-2 + 0.7 * (group == 1)),\n                 size = 0.05)\nm1 <- MASS::glm.nb(y_sim ~ group)\nsummary(m1)\n\n\n\nCall:\nMASS::glm.nb(formula = y_sim ~ group, init.theta = 0.06272813776, \n    link = log)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-0.4043  -0.4043  -0.3795  -0.3795   2.7589  \n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  -2.0022     0.2919  -6.859 6.93e-12 ***\ngroup         0.2193     0.4267   0.514    0.607    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for Negative Binomial(0.0627) family taken to be 1)\n\n    Null deviance: 109.50  on 499  degrees of freedom\nResidual deviance: 109.24  on 498  degrees of freedom\nAIC: 367.49\n\nNumber of Fisher Scoring iterations: 1\n\n              Theta:  0.0627 \n          Std. Err.:  0.0162 \n\n 2 x log-likelihood:  -361.4920 \n\nm1$coefficients\n\n\n(Intercept)       group \n -2.0022102   0.2192614 \n\nZero-inflated Negative Binomial model\nA Zero-inflated Negative Binomial model has two component: inlfated 0 and a Negative Binomial distribution.\nThus, the probability of observing a 0 equals:\n\\[ P(Y=0) = \\pi + (1-\\pi) *NB(0|mu,size) \\]\n\n\n# simulate zero-inflated negative binomial model\nset.seed(2049)\nn <- 1000\ngroup <- sample(c(0,1), size = n, replace = TRUE)\n\npi=0.1; # pi=0.1, which means 1-pi=0.9 follows NB distribution\nz <- rbinom(n = n, size = 1, prob = 1-pi) \n# mean(z == 0)\ny_sim <- ifelse(z == 0, 0, \n                rnbinom(n = n, \n                        mu = exp(1.3 + 1.5 * (group == 1)), \n                        size = 2))\n\npar(mfrow=c(2,1))\nhist(y_sim[group==0],main='Zero-inflated Negative Binomial, group 0')\nhist(y_sim[group==1],main='Zero-inflated Negative Binomial, group 1')\n\n\n\nm1=pscl::zeroinfl(y_sim~group,dist='negbin')\nm1\n\n\n\nCall:\npscl::zeroinfl(formula = y_sim ~ group, dist = \"negbin\")\n\nCount model coefficients (negbin with log link):\n(Intercept)        group  \n      1.308        1.489  \nTheta = 2.0097 \n\nZero-inflation model coefficients (binomial with logit link):\n(Intercept)        group  \n   -2.32531      0.09646  \n\nx1=summary(m1)\nx1\n\n\n\nCall:\npscl::zeroinfl(formula = y_sim ~ group, dist = \"negbin\")\n\nPearson residuals:\n    Min      1Q  Median      3Q     Max \n-1.1733 -0.7251 -0.2222  0.4987  5.6434 \n\nCount model coefficients (negbin with log link):\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  1.30820    0.04616  28.340   <2e-16 ***\ngroup        1.48886    0.05808  25.636   <2e-16 ***\nLog(theta)   0.69799    0.07424   9.402   <2e-16 ***\n\nZero-inflation model coefficients (binomial with logit link):\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept) -2.32531    0.28934  -8.037 9.24e-16 ***\ngroup        0.09646    0.32372   0.298    0.766    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n\nTheta = 2.0097 \nNumber of iterations in BFGS optimization: 11 \nLog-likelihood: -2983 on 5 Df\n\n# mu: (link.function=log)\n# Theta: the size parameter used in simulating data\n\n# mu in NB\nx1$coefficients$count[1,1]\n\n\n[1] 1.308202\n\n# theta, or size in NB\nexp(x1$coefficients$count[3,1]) #size, same as theta\n\n\n[1] 2.009717\n\nx1$theta\n\n\n[1] 2.009717\n\n# prob of 0 in ZI not attributed to NB \ng0=x1$coefficients$zero[1] #for group 0 \ng1=x1$coefficients$zero[1]+x1$coefficients$zero[2] #for group 1 \nexp(g0)/(1+exp(g0)) #prob\n\n\n[1] 0.08904874\n\nexp(g1)/(1+exp(g1)) #prob\n\n\n[1] 0.09718956\n\n\n\nsessionInfo()\n\n\nR version 4.1.0 (2021-05-18)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS High Sierra 10.13.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n[1] pscl_1.5.5\n\nloaded via a namespace (and not attached):\n [1] fansi_0.5.0       digest_0.6.27     MASS_7.3-54      \n [4] R6_2.5.0          jsonlite_1.7.2    magrittr_2.0.1   \n [7] evaluate_0.14     highr_0.9         stringi_1.7.3    \n[10] rlang_0.4.11      cachem_1.0.5      jquerylib_0.1.4  \n[13] bslib_0.2.5.1     vctrs_0.3.8       rmarkdown_2.11   \n[16] distill_1.3       tools_4.1.0       stringr_1.4.0    \n[19] xfun_0.24         yaml_2.2.1        fastmap_1.1.0    \n[22] compiler_4.1.0    memoise_2.0.0     htmltools_0.5.1.1\n[25] knitr_1.33        downlit_0.4.0     sass_0.4.0       \n\n\n\n\n",
    "preview": "posts/2021-11-23-scrnageneexpr01/distill-preview.png",
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 1536
  },
  {
    "path": "posts/2021-11-23-scrnageneexpr00/",
    "title": "00.scRNA-seq: fit zero proportions",
    "description": "I'd create a loom object containing test scRNA-seq data and fit simple model to assess 0 inflation.",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-11-20",
    "categories": [],
    "contents": "\n\nContents\nGenerate a loom object containing sample scRNA-seq data\nPlot mean ~ var for genes\nFit Negative.binomial distribution model by plug-in\nIs single cell RNAseq data 0 inflated?\nReferences\n\nOne feature of single cell RNA-seq data is the abundance of ‘0’. There are papers talking about both technical and biological sources of these ‘0’, I list some of them at the end of this post.\nI’m gonna write a series of posts, talking about how to model gene expression in single cell data, such as if there is 0 inflation, how to fit statistical models, how to interpete the fitting result.\nThis post is the first one of the series.\nIn this post, I’d\ngenerate a test dataset in ‘loom’ format of one fly tissue from the Fly Cell Atals public database.\nplot mean ~ var relationship for genes\nfit gene expression using negative binomial model and show the fitting result\nGenerate a loom object containing sample scRNA-seq data\n\n\n## use SCopeLoomR to read loom file\n## save three pieces of information\n## cell.info, gene.names, raw matrix data\nif(F){remotes::install_github(\"aertslab/SCopeLoomR\")}\nlibrary(SCopeLoomR)\n\n# Fly Cell Atlas: https://flycellatlas.org/\n# use wing tisse '10x, Stringent, Loom' as an example\nloom_path <- 's_fca_biohub_wing_10x.loom'\nloom <- open_loom(loom_path, mode=\"r+\")\n\ncell.info=get_cell_annotation(loom)\ndim(cell.info) \n#[1] 15889   347\n\ngene.names=get_genes(loom)\nlength(gene.names) \n#13411\n\nraw <- get_dgem(loom)\nraw[1:5,1:5]\ndim(raw) \n#[1] 13411 15889\n\nclose_loom(loom)\n\n## all three pieces of information collected\n## generate a sample data stored in loom format\n## select two cell types and save a new loom object\npick=names(sort(table(cell.info$annotation)))[c(2,3)]\npick\n#[1] \"muscle cell\" \"hemocyte\" \n\ncell.info.sub=cell.info[cell.info$annotation %in% pick,]\nraw.sub=raw[,cell.info$annotation %in% pick]\ndim(cell.info.sub)\n#[1] 302 347\ndim(raw.sub)\n#[1] 13411   302\nlength(gene.names)\n#[1] 13411\nsum(rownames(raw.sub)==gene.names)\n#[1] 13411\n\ncell.info.sub.list=list(\n  cell.type=cell.info.sub$annotation,\n  sex.label=cell.info.sub$sex)\n\n#https://rdrr.io/github/mojaveazure/loomR/man/create.html\nlibrary(loomR)\ncreate('wing_2celltypes_10x.loom',data=raw.sub,cell.attrs=cell.info.sub.list)\n\n\n\nThe test sample data is done. I chose to store it in loom format due to its small size and read it inside R whenever in use.\n\n\n## read in small loomR file\nlibrary(loomR)\nds <- connect('wing_2celltypes_10x.loom')\nmat <- t(ds$matrix[,])\ngene.names <- ds$row.attrs$Gene[]\ncell.names <- ds$col.attrs$CellID[]\ncell.types<-ds$col.attrs$cell.type[]\nsex.labels<-ds$col.attrs$sex.label[]\nds$close_all()\n\ndim(mat)\n\n\n[1] 13411   302\n\nlength(gene.names)\n\n\n[1] 13411\n\nlength(cell.names)\n\n\n[1] 302\n\ntable(cell.types)\n\n\ncell.types\n   hemocyte muscle cell \n        158         144 \n\ntable(sex.labels)\n\n\nsex.labels\nfemale   male \n   103    199 \n\nPlot mean ~ var for genes\n\n\n# select one cell.type for following analysis\n(cell.type=unique(cell.types)[1])\n\n\n[1] \"muscle cell\"\n\nmat1=mat[,cell.types==cell.type]\n\n# exclude genes that are zero all all cells\ngg<-Matrix::rowSums(mat1)>0 \nY<-mat[gg,]\ndim(Y)\n\n\n[1] 7419  302\n\nlibrary(sparseMatrixStats)\ngene_means<- sparseMatrixStats::rowMeans2(Y)\ngene_vars<- sparseMatrixStats::rowVars(Y)\nlength(gene_means);length(gene_vars)\n\n\n[1] 7419\n[1] 7419\n\nlibrary(tidyverse)\ndf<- bind_cols(gene_means = gene_means, gene_vars = gene_vars)\n# the quadratic polynomial mean-variance relation\ndf %>% ggplot(aes(x = log10(gene_means), y = log10(gene_vars))) +\n  geom_point() +\n  theme_classic(base_size = 14) +\n  ggtitle(paste0(\"Fly wing,\",cell.type))\n\n\n\n\nFit Negative.binomial distribution model by plug-in\nFrom above, the quadratic polynomial mean-variance relation is pretty obvious.\nFor NB distribution\none way of parameterization is:\nMean: mu\nVar = mu + phi * mu^2\nI used gene_means as a empirical estimation of NB parameter mu and to performed a linear regression to estimate phi.\n\n\n# plug in empirical mean and var to estimate phi\nmodel<- lm(gene_vars ~  1* gene_means + I(gene_means^2) + 0, data =df )\nx=summary(model)\nx$coefficients\n\n\n                Estimate Std. Error  t value Pr(>|t|)\nI(gene_means^2) 2.994183 0.00904527 331.0219        0\n\nIs single cell RNAseq data 0 inflated?\nWith mu and phi estimated, plot the fitted values with the observed ones.\n\n\n#plot fitter curve with obs data\npredicted_df<- data.frame(mean = df$gene_means, var_predict = \n                            df$gene_means + x$coefficients[1] * (df$gene_means)^2 )\n\ndf %>%  ggplot(aes(x = log10(gene_means), y = log10(gene_vars))) +\n  geom_point() +\n  geom_line(color = \"red\", data = predicted_df, aes(x = log10(gene_means), y =log10(var_predict))) + \n  theme_classic(base_size = 14) +\n  ggtitle(paste0(\"Fly wing,\",cell.type))\n\n\n\n\nCalculate the expected zero percentage and compare it with the observation.\nWith mu and phi parameterization, following NB distribution, \\[ Pr(X=0) = (\\frac{mu}{mu+phi})^{phi} \\]\n(https://divingintogeneticsandgenomics.rbind.io/post/negative-binomial-distribution-in-scrnaseq/)\n\n\nphi <- 1/x$coefficients[1]\nzeros_nb<- (phi/(gene_means + phi))^phi\nzeros_observed<- apply(Y, 1, function(x) mean(x ==0))\n\ndata.frame(zeros_nb = zeros_nb, zeros_observed = zeros_observed, \n           gene_means = gene_means) %>%\n  ggplot(aes(x =log10(gene_means), y = zeros_observed)) +\n  geom_point() +\n  geom_line(aes(x = log10(gene_means), y = zeros_nb), color = \"red\") +\n  theme_classic(base_size = 14) +\n  ggtitle(paste0(\"Fly wing,\",cell.type))\n\n\n\n\nIt didn’t fit that well for highly expressed genes at the right tail.\nI’d use a varity of statistical models fitting gene expression for single cell data in future posts.\nReferences\nThis blog is inspired by\nhttps://www.nxn.se/valent/2017/11/16/droplet-scrna-seq-is-not-zero-inflated\nhttps://divingintogeneticsandgenomics.rbind.io/post/negative-binomial-distribution-in-scrnaseq/\nhttps://divingintogeneticsandgenomics.rbind.io/post/negative-bionomial-distribution-in-single-cell-rnaseq/\nhttps://github.com/willtownes/scrna2019/blob/master/real/svensson_2019/01_exploratory.Rmd\nhttps://divingintogeneticsandgenomics.rbind.io/post/modeling-single-cell-rnaseq-data-with-multinomial-distribution/\nhttps://www.nxn.se/valent/2018/1/30/count-depth-variation-makes-poisson-scrna-seq-data-negative-binomial\nFurther reading\nSvensson, Valentine. “Droplet scRNA-seq is not zero-inflated.” Nature Biotechnology 38.2 (2020): 147-150.\nSarkar, Abhishek, and Matthew Stephens. “Separating measurement and expression models clarifies confusion in single-cell RNA sequencing analysis.” Nature Genetics 53.6 (2021): 770-777.\nChoi, Kwangbom, et al. “Bayesian model selection reveals biological origins of zero inflation in single-cell transcriptomics.” Genome biology 21.1 (2020): 1-16.\nLi, Wei Vivian, and Yanzeng Li. “sclink: Inferring sparse gene co-expression networks from single-cell expression data.” bioRxiv (2020).\n\n\nsessionInfo()\n\n\nR version 4.1.0 (2021-05-18)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS High Sierra 10.13.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nother attached packages:\n [1] forcats_0.5.1           stringr_1.4.0          \n [3] dplyr_1.0.7             purrr_0.3.4            \n [5] readr_1.4.0             tidyr_1.1.3            \n [7] tibble_3.1.3            ggplot2_3.3.5          \n [9] tidyverse_1.3.1         sparseMatrixStats_1.4.0\n[11] MatrixGenerics_1.4.0    matrixStats_0.59.0     \n[13] loomR_0.2.1.9000        hdf5r_1.3.3            \n[15] R6_2.5.0               \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.7        lubridate_1.7.10  lattice_0.20-44  \n [4] assertthat_0.2.1  digest_0.6.27     utf8_1.2.2       \n [7] cellranger_1.1.0  backports_1.2.1   reprex_2.0.0     \n[10] evaluate_0.14     highr_0.9         httr_1.4.2       \n[13] pillar_1.6.2      rlang_0.4.11      readxl_1.3.1     \n[16] rstudioapi_0.13   jquerylib_0.1.4   Matrix_1.3-4     \n[19] rmarkdown_2.11    labeling_0.4.2    bit_4.0.4        \n[22] munsell_0.5.0     broom_0.7.8       compiler_4.1.0   \n[25] modelr_0.1.8      xfun_0.24         pkgconfig_2.0.3  \n[28] htmltools_0.5.1.1 downlit_0.4.0     tidyselect_1.1.1 \n[31] fansi_0.5.0       withr_2.4.2       crayon_1.4.1     \n[34] dbplyr_2.1.1      grid_4.1.0        jsonlite_1.7.2   \n[37] gtable_0.3.0      lifecycle_1.0.0   DBI_1.1.1        \n[40] magrittr_2.0.1    scales_1.1.1      cli_3.0.1        \n[43] stringi_1.7.3     cachem_1.0.5      pbapply_1.4-3    \n[46] farver_2.1.0      fs_1.5.0          xml2_1.3.2       \n[49] bslib_0.2.5.1     ellipsis_0.3.2    generics_0.1.0   \n[52] vctrs_0.3.8       distill_1.3       tools_4.1.0      \n[55] bit64_4.0.5       glue_1.4.2        hms_1.1.0        \n[58] parallel_4.1.0    fastmap_1.1.0     yaml_2.2.1       \n[61] colorspace_2.0-2  rvest_1.0.0       memoise_2.0.0    \n[64] knitr_1.33        haven_2.4.1       SCopeLoomR_0.11.0\n[67] sass_0.4.0       \n\n\n\n\n",
    "preview": "posts/2021-11-23-scrnageneexpr00/distill-preview.png",
    "last_modified": "2022-01-15T10:59:48-08:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-11-20-blog-through-rstudio-using-distill/",
    "title": "Blog through Rstudio using distill",
    "description": "I'd show how to set up a blog inside Rstudio aided by `distill` R package, sync blog contents and configurations to Github, and deploy blog on Netlify.",
    "author": [
      {
        "name": "Ming",
        "url": {}
      }
    ],
    "date": "2021-11-19",
    "categories": [
      "bioinformatics"
    ],
    "contents": "\n\nContents\nWhy blog\nWhy use distill\nFirst time setup\ninstall distill\nand create a R project\npush to github\ndeploy by Netlify\ncustomize blog\nconfiguration\n\nPublish a new post\nModifications\nModify R markdown\nfile configuration\nCreate and\nmodify theme for blog visualization\nEnable Github\nDiscussion\nShowcase of\ndistill-powered blogs\n\nFinal words\nReferences\n\nWhy blog\nRecord (personal benefits) and Share (public contribution,\nhopefully).\nWhy use distill\nfriendly for R markdown writers.\nconvenient tool link: Rstudio -> Github -> Netlify\nFirst time setup\ninstall distill and\ncreate a R project\n\n# install distill package\nBiocManager::install('distill')\n\nlibrary(distill)\ncreate_blog(dir = \"blog_distill\", title = \"Akira in Neverland\")\n# a new folder would be generated with following contents:\n- _site.yml, file for blog configuration\n- index.Rmd, file for blog list page\n- about.Rmd, file for blog 'about' page\n- _posts, folder for keeping user created Rmd files \n- _site, folder for deploy blog website\n\nA prototype of the website is ready. You can view it by opening this\nfile: _site -> index.html\nThis index.html file is your blog’s home page.\nTo gain easy access writing new post, create a\nNew Project in this blog_distill folder. Then,\nyou would see a blog_distill.Rpoj file.\nNext time, just double click blog_distill.Rpoj, it would\nautomatically open Rstudio and direct you to this folder as working\nenvironment.\npush to github\nI find this tutorial very useful: https://bjungbogati.com.np/posts/creating-distill-blog/\nI just followed its 4. Setup Distill Repository step,\ncreate a new repo on github, then opened the terminal on my laptop:\n\n## create a repo for my blog\ngit init\ngit add -A\ngit commit -m 'added new blog'\n\ngit remote add origin https://github.com/xxx/xxx.git\ngit branch -M main\n\ngit push -f https://{your github personal access token}@github.com/xxx/xxx.git main\n\nI changed my branch to main and used it as the\ndefault.\nAfter git push, check the repo online for just updated\ncontents.\ndeploy by Netlify\nNetlify serves to host blog websites. Follow\n5. Host Your Distill Blog on this tutorial\nAfter Netlify deployment, you’d receive a URL for your blog: \ncustomize blog configuration\nYou could modify _site.yml, index.Rmd and\nabout.Rmd files to customize your blog.\nSome examples can be found here.\nMy site.yml look like this:\n\nname: \"Ming\"\ntitle: \"Akira in Neverland\"\ndescription: |\n  A personal blog\noutput_dir: \"_site\"\n\nbase_url: https://cranky-shaw-466a31.netlify.app/\nnavbar:\n  right:\n    - text: \"Home\"\n      href: index.html\n    - text: \"About\"\n      href: about.html\noutput: distill::distill_article\n\ncollections:\n  posts:\n    #disqus: Akira_in_Neverland\n    share: [twitter]\n    citations: false\n    custom: _custom.html\n\nThe _custom.html file follows this\nfile\nIn _site.yml, the share: [twitter]\nenables reader to click and share your post on twitter.\nPublish a new post\nClick xxx.Rproj, it would open Rstudio and direct\nyou to the proper working environment automatically.\n\n\ndistill::create_post(\"hello world\",author='Ming',slug='auto')\n\n\n\nA new Rmd file titled 202x-xx-xx-hello-world would\nbe created and saved is in _posts/ folder\nautomatically.\nModify the rmd file as you like and while you are editing, feel free\nto Knit anytime you like.\nThis Knit would only generate xxx.html file in the\n_posts/ folder.\nWhen your writing is done, remember to rebuild the\n_site/ folder to update the blog index page.\n\n\nlibrary(rmarkdown)\nrender_site()\n\n\n\nHave a look at the updated blog website by opening\n_site/index.html.\nIf you are happy with it, open your terminal and push it to github,\nthen browser the URL generated by Netlify to see your blog~\nModifications\nModify R markdown file\nconfiguration\nYou can add features to the default Rmd file. For example, enable\nTable of contents by changing the headers\nCreate and\nmodify theme for blog visualization\nFollow tutorial here\n\n\ndistill::create_theme(name = \"theme\") \n\n\n\nA file titled theme.css would be created.\nTo apply your theme.css file, modify the\n_site.yml file.\n\nname: \"distill\"\ntitle: \"Distill for R Markdown\"\ntheme: theme.css\nnavbar:\n  # (navbar definition here)\n\nEnable Github Discussion\nUse the giscus.html downloaded from pipinghotdata,\nand enable Discussion feature following the instruction\nShowcase of distill-powered\nblogs\nThe theme I used comes from here.\nThere are more showcases here.\nFinal words\nShortcuts summary\nCreate a new post\n\ndistill::create_post(“hello world”,author=‘Ming’,slug=‘auto’)\n\nCreate a new Rmd file or make changes on old ones, remember to\nKnit them to update the post content.\nWhen everything is done,render_site to keep\n_site folder up-to-date.\n\nlibrary(rmarkdown)\n\n\nrender_site()\n\nOpen _site/index.html file and have a sneak\npeek~\nThen push everything to your github repo.\nYou are all set! Enjoy the cyperspace ;)\nReferences\nhttps://rstudio.github.io/distill/blog.html\nhttps://themockup.blog/posts/2020-08-01-building-a-blog-with-distill/\nhttps://bjungbogati.com.np/posts/creating-distill-blog/\nhttps://rstudio.github.io/distill/basics.html\nhttps://jhelvy.github.io/distillery/showcase.html\n\n\nsessionInfo()\n\n\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods  \n[7] base     \n\nloaded via a namespace (and not attached):\n [1] fansi_1.0.2     digest_0.6.29   R6_2.5.1        jsonlite_1.7.3 \n [5] magrittr_2.0.2  evaluate_0.15   stringi_1.7.6   rlang_1.0.1    \n [9] cachem_1.0.6    cli_3.2.0       rstudioapi_0.13 jquerylib_0.1.4\n[13] bslib_0.3.1     vctrs_0.3.8     rmarkdown_2.13  distill_1.3    \n[17] tools_4.1.2     stringr_1.4.0   xfun_0.30       yaml_2.3.4     \n[21] fastmap_1.1.0   compiler_4.1.2  memoise_2.0.1   htmltools_0.5.2\n[25] knitr_1.37      downlit_0.4.0   sass_0.4.0     \n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-26T09:27:13-07:00",
    "input_file": {}
  }
]
